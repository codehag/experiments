Response ID;Time Started;Date Submitted;Status;Legacy Comments;Comments;Language;Referer;SessionID;User Agent;Tags;branches;How many years have you been working as a programmer?;How would you rate your knowledge of JavaScript?;What language do you program in most often?;Other - Write In (Required):What language do you program in most often?;Reading Exercise;Â What is the result of the first console log?;What is the result of the second console log?;"add.bind(null, 10);:Which of these are equivalent to addTo(10)?";"add.call(null, 10);:Which of these are equivalent to addTo(10)?";"y => add(10, y);:Which of these are equivalent to addTo(10)?";"add.apply(null, [10]);:Which of these are equivalent to addTo(10)?";proposal 1 branching;Proposal 2 branching;nested;flattened;How often do you see Pattern 1 in a codebase?;How often do you see Pattern 2 in a codebase?;What is your first impression?;How often do you see this code pattern?;Other - Write In (Required):How often do you see this code pattern?;Proposal Introduction;What is your first impression?;What is your first impression?;Which line is the bug on?;How would you correct the line with the bug?;Nested bug hunt;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct the line with the bug?;Flattened bug hunt;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct the line with the bug?;Proposal 2 bug hunt;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct the line with the bug?;Proposal 1 bug hunt;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Line 1:Which line is the bug on?;Line 2:Which line is the bug on?;Line 3:Which line is the bug on?;Line 4:Which line is the bug on?;Line 5:Which line is the bug on?;Line 6:Which line is the bug on?;Line 7:Which line is the bug on?;Line 8:Which line is the bug on?;Line 9:Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Which line is the bug on?;How would you correct it?;bughunt streamlined 2;Kimchi refactor;Rewrite the function here:;What is the result?;What was the hardest part about reading this code?;Other - Write In (Required):What was the hardest part about reading this code?;Can you write a bit about your process reading this code? What features caused you to slow down?;What is the result?;What was the hardest part about reading this code?;Other - Write In (Required):What was the hardest part about reading this code?;Can you write a bit about your process reading this code? What features caused you to slow down?;New Hidden Value;Which features of the Pattern 1 style of writing code do you find challenging?;Which features of the Pattern 1 style of writing code do you find make reading easier?;Which features of the Pattern 2 style of writing code do you find make reading more difficult?;Which features of the Pattern 2 style of writing code do you find make reading easier? What worked well here?;Do you have any other feedback?;Which of the above do you prefer?;Other - Write In (Required):Which of the above do you prefer?;Do you prefer the status quo or the proposal?;Other - Write In (Required):Do you prefer the status quo or the proposal?;How was it typing the |> ?;Any other comments?
8;May 21, 2019 3:35:43 pm;May 21, 2019 3:43:23 pm;Complete;;;English;https://www.surveygizmo.com/s3/4900894/2019-TC39-Feature-Experiment?nested=false&proposal1=true&proposal2=true;1558476097_5ce47541826c92.30014637;;;;0-2 years;Beginner;Other - Write In (Required);R;74;3;"""error""";;;"y => add(10, y);";;;;;;;;;;;;I like the pipeline with the # better;;;;;;;;;;;;;38;;;;;;;;;8;;;;;;;;;;;;;;;32;;;;;;;;;;;;;;;;;;;;;14;;;;;;;;;;;;;;;;;;;;;
9;May 21, 2019 5:15:39 pm;May 21, 2019 5:21:25 pm;Complete;;;English;https://www.surveygizmo.com/s3/4900894/2019-TC39-Feature-Experiment?nested=true&proposal1=true&proposal2=true;1558484132_5ce494a454bfd0.28518133;;;;5-10 years;Expert;JavaScript;;84;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;;;;I like the pipeline with the # better;;;;44;;;;;;;;;;;;;;;;;;11;;;;;;;;;;;;;;;19;;;;;;;;;;;;;;;;;;;;;15;;;;;;;;;;;;;;;;;;;;;
11;May 22, 2019 11:27:23 pm;May 22, 2019 11:32:55 pm;Complete;;;English;https://www.surveygizmo.com/s3/4900894/2019-TC39-Feature-Experiment?nested=true&proposal1=true;1558592826_5ce63d3ab364d9.14271045;;;;5-10 years;Beginner;Python;;107;3;"""function""";;;"y => add(10, y);";;;;;;;;;;;;;I like the proposal better;Line 11;remove bracket;49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add bracket;57;;;;;;;;;;;;;;;;;;;;;41;;;;;;;;;;;;;;;;;;The proposal;;;
26;May 24, 2019 2:23:22 pm;May 24, 2019 2:37:24 pm;Complete;;;English;https://github.com/;1558733002_5ce860ca9c61d2.51019019;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;64;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;153;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));79;;;;;;;;;;;;;;;;;;;;;321;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add([""spicy paste""], _)   |> stir   |> (_ => ferment(_, 2)";;;;;;;;;;;;;;;Pipeline;;;;surprisingly good;Think there's a bug in the code that should be refactored at the kimchi recipe, you stirred for 2 days, and not fermented for 2 days
27;May 24, 2019 2:23:42 pm;May 24, 2019 2:40:55 pm;Complete;;;English;;1558733022_5ce860dea1f648.97805254;;;flattened vs both;5-10 years;Expert;C++;;100;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;await, but i'm confused, since the signature for ferment says returns Jar, not Promise< Jar>?;77;;;;;;;Line 9;await #;255;;;;;;;;;;;;;Line 5;closing );55;;;;;;;;;;;;;;;;;;;;;122;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;Current status quo;;;;No complaints.;The signatures seem wrong? The Jar constructor refers to second number parameter, but none of the examples have this. The ferment function is said to return a Jar, but all the examples show it returning a Promise< Jar>.
32;May 24, 2019 2:52:38 pm;May 24, 2019 3:02:16 pm;Complete;;;English;https://github.com/;1558734758_5ce867a6104d85.53633283;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;12;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;Pass a second argument to ferment.;88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis at the end.;68;;;;;;;;;;;;;;;;;;;;;196;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;No problem.;
33;May 24, 2019 2:56:20 pm;May 24, 2019 3:06:43 pm;Complete;;;English;https://github.com/;1558734980_5ce868843e0458.22557101;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;67;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 7;Await the sauerkrautJar promise's value;68;;;;;;;;;;;;;;;;;;;;;;Line 5;Needs a closing parenthesis;73;;;;;;;;;;;;;;;;;;;;;181;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> ferment   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;Fine;
35;May 24, 2019 2:57:10 pm;May 24, 2019 3:17:22 pm;Complete;;;English;;1558735030_5ce868b654f259.92831106;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;179;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;"add "", 14"" after the parenthesis";120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a parenthesis at the end of the line;115;;;;;;;;;;;;;;;;;;;;;144;(on mobile);;;;;;;;;;;;;;;Pipeline with #;;;;No more difficult than other operators (like ||, &&, etc.);
38;May 24, 2019 3:38:43 pm;May 24, 2019 3:48:56 pm;Complete;;;English;;1558737523_5ce87273bc83b1.60570581;;;flattened vs proposal 1;5-10 years;Advanced;C++;;71;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;await ferment(...);80;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis;34;;;;;;;;;;;;;;;;;;;;;102;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(_)   |> add(""spicy paste"", _)   |> stir   |> await ferment(_, 2)   |> _.takeOne()";;;;;;;;;;;;;;;;;The Status quo;;OK;"Another common pattern is to run functions like this where a function depends on the output of more than one of the previous functions.  For example:  const [a, b] = await Promise.all([fn1(), fn2()]); const c = await fn3(a, b);  A new syntax should work equally well with that pattern as with a ""single-path"" pattern."
42;May 24, 2019 6:28:28 pm;May 24, 2019 6:40:24 pm;Complete;;;English;https://mail.google.com/mail/u/0/;1558747707_5ce89a3be94bf6.17835756;;;nested vs both;more than 10 years;Expert;JavaScript;;213;number;"""object""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;add the missing argument to ferment;70;;;;;;;;;;;;;;;;Line 9;"add ""#"" after the await, but the error message doesn't match?";103;;;;;;;;;;;;;Line 5;add missing paren;21;;;;;;;;;;;;;;;;;;;;;108;"const kimchi = wash(""cabbage"")   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#, 2)   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Fine;"I like ""#"" because it seems more flexible / usable in more scenarios."
44;May 24, 2019 6:55:04 pm;May 24, 2019 7:08:17 pm;Complete;;;English;;1558749304_5ce8a078c74569.06213887;;;flattened vs both;more than 10 years;Expert;JavaScript;;46;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;â¦ = await ferment(â¦);85;;;;;;;;I don't know what the bug is;158;;;;;;;;;;;;;Line 5;add closing parenthesis;15;;;;;;;;;;;;;;;;;;;;;245;"const kimchiJar = new Jar(     ""cabbage""     |> wash     |> cut     |> salt );  const kimchi = (     kimchiJar     |> add(""spicy paste"", #)     |> stir ).takeOne();";;;;;;;;;;;;;;;Other - Write In (Required);either proposal, but I'd have named addWater and fermentPickle functions to avoid the horrific in-pipeline noise;;;fine;i don't think this survey is realistic
45;May 24, 2019 8:23:52 pm;May 24, 2019 8:38:20 pm;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1558754632_5ce8b54852f5d1.10125102;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;96;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;Add the second argument to ferment;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing parenthesis;42;;;;;;;;;;;;;;;;;;;;;387;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Well, I did this in mobile so not as good as with a keyboard! Would love this added soooooo much. ;Please add pipeline!
46;May 24, 2019 10:26:20 pm;May 24, 2019 10:48:21 pm;Complete;;;English;;1558761980_5ce8d1fc1eaa48.87505275;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;122;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;await;135;;;;;;;Line 6;water should be string?;145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;187;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await fement(#, 2)   |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;Fine;How would functional composition work?  I'd guess:  const createPickle = (vegetable)   |> wash   |> new Jar(#)   |> ...    TS support would be very important. It is currently very difficult to strictly type.
47;May 25, 2019 12:08:12 am;May 25, 2019 12:33:35 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1558768092_5ce8e9dc1f9002.86575976;;;nested vs both;more than 10 years;Expert;TypeScript;;136;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 10;, 14;147;;;;;;;;;;;;;;;;Line 10;not sure;54;;;;;;;;;;;;;Line 5;);44;;;;;;;;;;;;;;;;;;;;;522;"const kimchiJar = ""cabbage""   |> wash   |> (o => new Jar(o)   |> (o => add(""spicy paste"", o))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;OK. The operator is clear, unused and concise.;I don't like the # at all. 1) it magically captures variables and 2) the symbol itself does not relate to the semantics for me.
48;May 25, 2019 3:32:04 am;May 25, 2019 3:44:19 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1558780323_5ce919a3dfde45.00723078;;;flattened vs proposal 1;5-10 years;Expert;TypeScript;;67;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 7;await the promise;102;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis;30;;;;;;;;;;;;;;;;;;;;;411;"let jar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy taste"", _)) |> stir  let kimchi = (await ferment(jar, 2)).takeOne()";;;;;;;;;;;;;;;;;The proposal;;Ok;
50;May 25, 2019 5:23:07 am;May 25, 2019 5:38:51 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1558786987_5ce933ab02abf4.56595063;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;58;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 2);55;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));30;;;;;;;;;;;;;;;;;;;;;301;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;The proposal;;Not bad on a US keyboard. Unfamiliar but not cumbersome.;"It feels weird to put a semi-colon at the end of a pipeline chain. I probably shouldn't, but I do like semicolons elsewhere in in my JS. It's weird that arrow functions have to be in parentheses. In general, it feels a bit cumbersome to write an arrow function for anything that's not a simple one-argument function call; a separate proposal for partial application / placeholders etc. would be very nice."
54;May 25, 2019 12:34:18 pm;May 25, 2019 12:55:18 pm;Complete;;;English;;1558812858_5ce998ba075034.07051659;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;37;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 4;Add a second argument to the instance declaration, as it expects;532;;;;;;;;;;;;;;;;;;;;;;Line 4;"Closing parentheses "")"" is missing";50;;;;;;;;;;;;;;;;;;;;;316;"const pickle = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |>(_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;;;The nesting ternary operator + short circuit made me slow down the reading, although it can be fixed by adding a higher indenting spacing;;;;;240;;;;;;;;The proposal;;Smooth, good key-positioning in the keyboard.;
59;May 26, 2019 11:15:25 am;May 26, 2019 11:47:20 am;Complete;;;English;;1558894525_5cead7bd5606a1.93827575;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;133;"""string""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;"Change #10 to ""), days";215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a close paren;41;;;;;;;;;;;;;;;;;;;;;137;I don't understand the question. Which one to you want me to refactor?;;;;"Too deeply nested. Mixes styles. What is a standalone ""#""? ";;;;;155;;;;;;Current status quo;;;;"By ""typing"" do you mean hitting the keys on a keyboard, or inferring the types of the expressions?";"Motivating example felt like a strawman. In the status quo language, it is not how a good programmer would write it, and it would be flagged in a good code review. Either of the following is more realistic:    const pickleJar = await ferment(salt(add([""water""],                                            new Jar(wash(""cucumber""),                                                    10))),                                   2);    const pickleJar = new Jar(wash(""cucumber""), 10);   const fermented = await ferment(salt(add([""water""], pickleJar)), 2);  When I said I like the status quo better, I was already thinking of the status quo as the first rewrite with the indentation."
63;May 27, 2019 12:39:51 am;May 27, 2019 3:10:48 am;Complete;;;English;;1558942791_5ceb9447c9bd33.57519127;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;266;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 9;,2);180;;;;;;;;;;;;;;;;Line 5;new Jar(#, 2);116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;246;"const kimchiJar  = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;;;all this functions in pipes are hard reading. It will be better to remove this wrappers;3108;;;;;;;;The proposal;;|> - one of the best things in JS;
64;May 27, 2019 4:35:10 am;May 27, 2019 4:56:29 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1558956910_5cebcb6e12d1f4.85670177;;;flattened vs both;3-5 years;Expert;TypeScript;;109;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;rename to saltyCabbageJar;115;;;;;;;Line 10;;110;;;;;;;;;;;;;Line 5;add missing paren at the end;39;;;;;;;;;;;;;;;;;;;;;569;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (cabbage => new Jar(cabbage))   |> (jar => add(""spicy paste"", jar))   |> stir   |> (jar => ferment(jar, 2))   |> await";;;;;;;;;;;;;;;Pipeline;;;;;
66;May 27, 2019 8:18:28 pm;May 27, 2019 8:28:22 pm;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1559013507_5ceca883e9e887.89213749;;;nested vs proposal 1;3-5 years;Advanced;TypeScript;;82;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;Add a 2;92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add end );55;;;;;;;;;;;;;;;;;;;;;49;On mobile;null;;;Literally didn't read it t because it was so complex. However I don't believe the hashes are the reason why.;;;;;83;;;;;;Pipeline with #;;;;Fine;I believe presenting the hashes at the very end in an intentionally complex example will bias responses against it. Why not show the identical example as the one with parentheses 
70;May 28, 2019 6:43:44 pm;May 28, 2019 7:28:04 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559094223_5cede3cfe00e57.66175707;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;189;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;"Supply a second argument of 14 days (aka 2 weeks) to `ferment` by inserting "", 14"" at the end of line 10";498;;;;;;;;;;;;;;;;Line 9;Use `await #` instead of bare await;726;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;391;"const kimchi = ""cabbage""   |> wash |> cut |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2) |> await #   |> #.takeOne()";a bowl of jogurt with berries;;;Nested use of the ternary operator made me pause for a moment. The # placeholder seems a bit foreign in JS syntax, but it honestly reads quite easily when you get over that fact. I probably wouldn't choose to use as complicated subexpressions as on lines 9-16 if this were my own code, for the sake of readability.;;;;;345;;;;;;;;The proposal;;It's whatever. Other operators aren't particularly convenient to type either, and people got used to it. Code is read more than it's written anyways, and I think |> reads fairly well and looks nice in monospace fonts.;Thank you all for trying to pursue changes to JS intelligently. It would be a much worse language without your efforts.
73;May 29, 2019 8:06:08 am;May 29, 2019 8:31:42 am;Complete;;;English;;1559142367_5cee9fdfdf9661.95038388;;;nested vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);PHP;218;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 11;"ferment(..., 14);";159;;;;;;;;;;;;;;;;Line 9;|> await #;162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;519;"I am a native English speaker, but I can't understand what this question is asking for on a basic level. It seems like perhaps the code samples are in the wrong places. There are no function signatures below ""Here is the code that needs to be refactored and the function signatures again"" but they appear above that, and then there is a new syntax introduced with no mention of it.";;;;;;;;;;;;;;;;;The Status quo;;Fine, but I don't use a typical keyboard.;I found the organization and wording of the questions much harder to understand than the proposed syntax.  I'm not in favor of syntactic sugar like this. It's just more to learn and more mental overhead.
84;May 29, 2019 8:19:21 am;May 29, 2019 9:08:22 am;Complete;;;English;https://feedly.com/i/collection/content/user/0b459ceb-1beb-4cdb-80c4-9c31364b4a49/category/free-software;1559143161_5ceea2f986b637.94496172;;;flattened vs proposal 1;more than 10 years;Intermediate;Other - Write In (Required);C#;136;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar instead of saltCabbageJar (variable name typo);86;;;;;;;;;;;;;;;;;;;;;;Line 5;add a ) at the end;24;;;;;;;;;;;;;;;;;;;;;460;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_)) // missing number second param to Jar constructor?   |> (_ => add(""spicy paste"", _)) // the other example passes an array but the signature says string   |> stir // no signature given for stir but presumably one argument   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;Other - Write In (Required);The proposal but with syntactic sugar for the (_ => something(_)) pattern;Not an issue!;"About the survey - it was hard to answer the ""first impression - which is better, proposal or status quo?"" question because I really needed an ""other"" option to say that I think the proposal is a good start but needs some refinement before it's a clear improvement over the status quo.  Also about the survey - I think there were some slight errors and omissions in the given function signatures and example code which made for a bit of confusion (I annotated these with comments in the refactoring answer).  About the proposal itself - the idea is great, but the constant repetition of (_ => something(_)) makes the new code harder to read than the original. I don't think the proposal should be adopted without better syntactic sugar for that scenario. Trying to think of what that sugar might look like, I can see why it's not easy to come up with, but I do think it's needed.  The best idea I have is to add a variant |>> which is followed by an expression and is syntactic sugar for (_ => expression), except that within the expression the ""this"" keyword refers to the input parameter ""_"". Hopefully someone can come up with something better that doesn't require redefining ""this""!  const pickle = ""cucumber""   |> wash   |>> new Jar(this)   |>> add(""water"", this)   |> salt   |>> ferment(this, 2)   |> await   |>> this.takeOne();"
85;May 29, 2019 8:19:28 am;May 29, 2019 8:37:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559143168_5ceea3002f69a9.03790965;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;170;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;), 14;202;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));93;;;;;;;;;;;;;;;;;;;;;303;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;;
86;May 29, 2019 8:20:47 am;May 29, 2019 8:30:47 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559143247_5ceea34f53d750.83960597;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;50;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 11;prepend a comma, a number and then close the function call;121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) at the end;53;;;;;;;;;;;;;;;;;;;;;162;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> ((cabbage) => new Jar(cabbage))   |> ((jar) => add(""spicy taste"", jar))   |> stir   |> ((jar) => ferment(jar, 2))   |> await   |> ((jar) => jar.takeOne());";;;;;;;;;;;;;;;Current status quo;;;;"Okay, though I'm not quite sure the code formatting that results from it is much better than just splitting out the steps into multiple variables. Especially using a function that takes more than one param seems very cumbersome and would probably result in more arrays as params. I guess a solution to that would be to have a way to spread as part of the pipeline, but still doesn't solve ""forks"" in the pipeline, like you can with promise chains, where you can split and re-merge etc.";
88;May 29, 2019 8:23:18 am;May 29, 2019 8:45:19 am;Complete;;;English;https://qsurvey.mozilla.com/;1559143398_5ceea3e6bf1607.38713202;;;flattened vs proposal 2;more than 10 years;Intermediate;;;151;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;fix the typo;191;;;;;;;Line 10;change to sauerkraut.takeOne();163;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;342;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)    // why does this need the # placeholder?   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #           // why does this need the # placeholder?   |> #.takeOne()   // why does this need the # placeholder?";;;;;;;;;;;;;;;;;The proposal;;Ok;I think I would probably still split it up a bit into a separate pickleJar and pickle
89;May 29, 2019 8:23:37 am;May 29, 2019 9:14:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559143417_5ceea3f988a082.02400679;;;flattened vs proposal 1;0-2 years;Beginner;Ruby;;197;int;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);I rarely attempt to read javascript for comprehension, since I've never properly learned the language. Unsure if I've seen this pattern or not.;;;I like the proposal better;;;;;;;;;;Line 6;"""saltCabbageJar"" is correctly identified by the JS interpreter as being undefined. This is a typo; Line 6 should have ""saltyCabbageJar"" instead, as defined in Line 5. Note the ""y"" as in ""salty.""";247;;;;;;;;;;;;;;;;;;;;;;Line 5;"I would add a right closing parenthesis, "")"" at the end of the line. As the interpreter error message points out, this appears to be an  expression that wasn't properly enclosed on one end.";238;;;;;;;;;;;;;;;;;;;;;1808;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add([""spicy paste""], _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;Other - Write In (Required);"I would defer to JS folks on my team if this topic came up... With this recipe example, I do like the pipeline syntax. It clearly demonstrates a series of steps, in sequence, transforming the ""data"" / ""cabbages"" into the desired result (""kimchi""). There's a lot of clarity there. Yet I'm not sure if I always want to do steps, one after the other. How does it handle branching logic, if/thens? Does it upend conventions of what things are easy to express... is it a hassle? I don't write or read enough JS to know. I lean toward the pipelines here, but I wonder if it generalizes well to other code ""patterns"", or handles other language features well. So I defer to others to make the call.";"Easier than typing arrow functions (""=>"")!!!  I thought it was fine.  Here's couple for you now! |> |> |> |>";Thanks for asking! I like to help in any way I can. And I think checking if new features work well with actual users is a great idea! Thank you for the forethought to do this, and reaching out! Good luck!
91;May 29, 2019 8:25:52 am;May 29, 2019 8:51:47 am;Complete;;;English;;1559143552_5ceea480016ad0.33238661;;;nested vs proposal 1;more than 10 years;Advanced;Python;;120;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;, 14;118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);36;;;;;;;;;;;;;;;;;;;;;225;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";;;;;;;;;;;;;;;Current status quo;;;;OK;"_ is often used to denote a value that we want to discard. Using it in those examples confused me because the value is very relevant.  Although I see the value of the pipeline syntactic sugar, I'm not convinced that value is enough to warrant having a more complex language. This is heavily influenced by the current trend about functional programming. I'd rather have some efforts on bringing some of the collection protocols that Python offers (what enables things like `if ""foo"" in bar`): https://docs.python.org/3/library/collections.abc.html. I think this would improve a lot of APIs, including the DOM. I can never remember if I should if I should use `contains` or `includes` on string, array, DOMTokenList or Node."
93;May 29, 2019 8:29:32 am;May 29, 2019 8:47:03 am;Complete;;;English;;1559143772_5ceea55cbf6e27.75426359;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;14;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 14);";30;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_, 5));147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;424;"const kimchi =  ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ ferment(_, 2) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;The proposal;;hard with french keyboard on windows (altgr+6 then shift + >);"Add the usage of method reference like you have in Java 8+ will be nice (and not just in pipeline usage https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)  const pickle = ""cucumber"" |> wash |> Jar::new |> add([""water""], #) |> salt |> await ferment(#, 2) |> #::takeOne"
95;May 29, 2019 8:33:24 am;May 29, 2019 8:54:37 am;Complete;;;English;;1559144003_5ceea643dc26d8.50433424;;;nested vs proposal 1;5-10 years;Intermediate;Java;;96;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add closing parens at end of line;105;;;;;;;;;;;;;;;;;;;;;512;"const kimchi = ""cabbage""  |> wash |> cut |> salt |> (_ => new Jar(_)) |> (j => add(""spicy paste"", j)) |> stir |> (j => ferment(j, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Not too bad, I can see myself learning this one quickly.;Make the survey easier to use on a phone. For example, make the code snippets actual text that fills the viewport or images that can be zoomed.
96;May 29, 2019 8:33:59 am;May 29, 2019 8:45:18 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559144039_5ceea667ba9091.39571226;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;95;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";106;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));26;;;;;;;;;;;;;;;;;;;;;255;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _)) // string in definition, array in above example  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;The proposal;;I like it. Didn't think the pipeline would be good at first, but I can think of areas where I have written this kind of code.;add function in examples changes between using an array of string and a string, depending on the area.
97;May 29, 2019 8:36:18 am;May 29, 2019 8:49:57 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559144178_5ceea6f2297159.76963035;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;102;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 4;;200;;;;;;;Line 9;await #;195;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;158;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;;
101;May 29, 2019 8:43:01 am;May 29, 2019 9:48:18 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559144581_5ceea885778db4.28732149;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;211;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;On line 10, add another parameter for 14 days: , 14;154;;;;;;;;;;;;;;;;Line 7;salt(#);617;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;332;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> Jar(#, 1)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)";;;;;;;;;;;;;;;;;The proposal;;"It took a bit for me to get used to typing the "">"" character after the pipe... it's a bit of a reach, probably more so for anyone with smaller hands";Reading the syntax felt like learning about arrow functions for the first time... at first glance I was a little confused, but then when I got it it was really nice for conciseness and readability. Really improves readability over multiple nested function calls.
103;May 29, 2019 8:44:59 am;May 29, 2019 9:10:18 am;Complete;;;English;https://feedbin.com/;1559144699_5ceea8fb15c6d5.28280392;;;nested vs both;5-10 years;Expert;JavaScript;;77;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the status quo better;;Line 10;Add a comma and a number for the day argument;97;;;;;;;;;;;;;;;;Line 10;I would replace #.takeOne() with a function expression like `x => x.takeOne()`, assuming `#` is only meant to appear in an argument position;136;;;;;;;;;;;;;Line 5;Add `)` to the end of the line;36;;;;;;;;;;;;;;;;;;;;;248;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(['spicy paste'], #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Typing it was easy (I use a unix-based operating system, so the pipe operator is a familiar reach for my pinky).;"While I do like the convenience of the pipeline operator, especially with # placeholder, I don't know if this is needed as a core part of the language. It seems better suited for an external library.  I use pipelines quite often in my code, using the Ramda library, which ends up looking more or less like the pipeline proposal, just as a variadic function call whose arguments are curried functions. The R.pipeP allows piping promises as well. Something like:  const addCurried = R.curry(add) const fermentCurried = R.curry(R.flip(ferment))  const makePickle = R.pipeP(   wash,   x => new Jar(x),   addCurried(water),   salt,   fermentCurried(2),   x => x.takeOne() )  const pickle = makePickle(""cucumber"")  In sum: the pipeline operator doesn't allow any new capabilities in the language that libraries already do not.  ... But of course, if piping were part of the language, error messages would likely be better. They can be a bit hard to decipher in long Ramda pipelines. I don't know if that's an inherent limitation of how Ramda pipes work within existing JavaScript, or if it's something that libraries could deal with on their own."
104;May 29, 2019 8:45:10 am;May 29, 2019 8:55:05 am;Complete;;;English;;1559144710_5ceea906407f11.97829558;;;flattened vs both;more than 10 years;Advanced;JavaScript;;64;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";100;;;;;;;Line 9;await #;42;;;;;;;;;;;;;Line 5;(_ => new Jar(_));22;;;;;;;;;;;;;;;;;;;;;100;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Meh. Came from a PHP background so the \ namespace separator was weird for a while but everyone got used to it. Lots of complaining up front but eventually no one cared.;As much as i like the visual representation of #, the error message question revealed some potential issues. Care should be taken to possibly represent the WHOLE line for which the specific # error happened on (especially in addition to line number)
106;May 29, 2019 8:45:53 am;May 29, 2019 8:57:24 am;Complete;;;English;;1559144753_5ceea931376564.06859608;;;flattened vs both;more than 10 years;Advanced;JavaScript;;70;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";57;;;;;;;Line 9;|> await #;41;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));22;;;;;;;;;;;;;;;;;;;;;184;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spice paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;It'll take a minute to get used to pressing Shift+\ to get |, but not too bad;"The await syntax feels a little awkward. Is there a way to inline it with the call that returns a Promise instead of having it as standlone lines after calls that return Promises? e.g.  const pickle = ""cucumber""   |> wash   |> (_ => new Jar(_))   |> (_ => add([""water""], _))   |> salt   |> await (_ => ferment(_, 2))   |> (_ => _.takeOne());"
107;May 29, 2019 8:45:53 am;May 29, 2019 9:19:11 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559144753_5ceea931066379.90709811;;;flattened vs both;more than 10 years;Expert;TypeScript;;62;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;s/saltCab/saltyCab/;161;;;;;;;Line 9;await #;54;;;;;;;;;;;;;Line 5;(_ => new Jar(_));20;;;;;;;;;;;;;;;;;;;;;456;"wash(""cabbage"") |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not a problem. ;"Now that i've had my hands on the pipeline with # syntax for a few minutes, I think I prefer having explicit # in the line, always present. So you would have to do simple function calls like so:  |> wash(#) |> salt(#) |> await #  I think the required # makes it clear where you are sticking in that argument and how the function is getting called. I think this is an improvement for novice programmers coming to the syntax for the first time.  On the other hand, if the hash is not required in the line, then I think there should be an allowance for the await keyword, so that this is allowed and doesn't cause a bug:  |> await  --------------  Going over all of this raises some questions: is this allowed?:  |> await ferment(#, 2)  Additionally, is this allowed, all on one line?  const saltyCucumber = (""cucumber"" |> wash |> salt)  alternatively, I would propose special handling for the await keyword to allow await without the hash, like so:  |> await  --------------  Finally, I really like the cleanness of not needing so many parenthesis with the `#`, but I can also understand how the `(_ => ...)` syntax helps differentiate lines that are simple function. It seems to me that the transpile/interpretation routine for the ""pipeline with #"" would allow for a more efficient rewriting, where as the plain pipeline proposal may introduce extra creation of function objects."
109;May 29, 2019 8:46:17 am;May 29, 2019 9:07:50 am;Complete;;;English;;1559144777_5ceea949503ee5.36309294;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;57;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;Line 10;, 14;195;;;;;;;;;;;;;;;;Line 9;await #;152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;285;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;|> is a bit awkward but on a US keyboard layout it isn't terrible as you can keep the shift key pressed down between hitting the two keys. However, it's also my idiosyncratic typing that makes it more awkward. Other keyboard layouts may find it trickier.;I do think that overall I prefer the new proposal with # but it's definitely going to require getting used to. Once you understand it, I think it makes each function call in the chain a bit more obvious and makes it easier to follow the flow of what's happening compared to the regular function calls that you need to read inside out.
111;May 29, 2019 8:46:49 am;May 29, 2019 10:20:22 am;Complete;;;English;;1559144809_5ceea96978b6d2.59085936;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;107;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the proposal better;Line 11;By adding 14 as the second parameter to ferment.;167;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the closing parenthesis.;91;;;;;;;;;;;;;;;;;;;;;360;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";;;;;;;;;;;;;;;Other - Write In (Required);Not sure what Pipeline with # is...;;;Not terrible.;
113;May 29, 2019 8:48:11 am;May 29, 2019 8:57:47 am;Complete;;;English;;1559144891_5ceea9bb18bf92.81832303;;;flattened vs proposal 2;3-5 years;Advanced;TypeScript;;37;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Change variable to `saltyCabbageJar`;48;;;;;;;Line 9;Change to `await #`;71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;115;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;Easy;N/A
114;May 29, 2019 8:47:19 am;May 29, 2019 9:05:15 am;Complete;;;English;;1559144839_5ceea98728dc37.97864623;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;59;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 5;I wouldn't name that var. I'd pass it in a promise chain using closures where needed;125;;;;;;;Line 9;pass the placeholder;65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;225;"wash(""cabbage"")   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;;;Other - Write In (Required);typically id use a helper like composeP from crocks to do these kinds of flows. although I like the proposal, I can do it with functional helpers. as well, I'm not sure how I feel about the await # line. the downside to helpers like compose is their effect on stack traces, and if this proposal can address that all the better. ;On Mobile, can't comment. ;
115;May 29, 2019 8:49:46 am;May 29, 2019 9:00:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559144986_5ceeaa1a9a3e33.33448042;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;60;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);95;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));30;;;;;;;;;;;;;;;;;;;;;289;"const kimchi = ""cabbage"" |> wash |> cut |> (_ => new Jar(_)) |> salt |> (_ => add([""spicy paste""], _) |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne(_));";;;;;;;;;;;;;;;;;The proposal;;a bit cumbersome, but not bad;
116;May 29, 2019 8:49:39 am;May 29, 2019 9:05:20 am;Complete;;;English;;1559144979_5ceeaa13ba3671.86640018;;;nested vs both;5-10 years;Intermediate;TypeScript;;99;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 11;", 14);";156;;;;;;;;;;;;;;;;Line 5;ingredient => new Jar(ingredient, 1);97;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));38;;;;;;;;;;;;;;;;;;;;;199;"const pickle = ""cabbage""   |> wash   |> cut   |> salt   |> cabbage => new Jar(cabbage)   |> jar => add(""spicy paste"", jar)   |> stir   |> jar => ferment(jar, 2)   |> await   |> jar => jar.takeOne()";;;;;;;;;;;;;;;Pipeline;;;;No big deal - hold shift, hit two keys. Typing on Dvorak where these keys are far apart was easy.;The parentheses around the arrow functions feel like they shouldn't be needed. The fact that `=>` is there and the function is terminated by the next `|>` in most cases seems like it should remove the need for them, similar to passing arrow functions as successive arguments to a function.
117;May 29, 2019 8:49:59 am;May 29, 2019 8:55:29 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559144999_5ceeaa279b0db0.24328377;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;85;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;fix var name;61;;;;;;;;;;;;;;;;;;;;;;Line 5;;31;;;;;;;;;;;;;;;;;;;;;50;;;;;;;;;;;;;;;;;;The proposal;;;
126;May 29, 2019 8:57:54 am;May 29, 2019 10:01:45 am;Complete;;;English;https://qsurvey.mozilla.com/;1559145474_5ceeac02602e02.01187692;;;flattened vs proposal 2;more than 10 years;Expert;Other - Write In (Required);C#;76;Number;"""object""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;2461;;;;;;;Line 5;add second argument;86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;120;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await |> takeOne";;;;;;;;;;;;;;;;;The proposal;;no problem;
128;May 29, 2019 8:59:49 am;May 29, 2019 9:21:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559145589_5ceeac75cd8f50.83344709;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;91;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;add `, 14`;160;;;;;;;;;;;;;;;;Line 9;add #;111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#, number) // there is suppose to be a number here, but I don't know what   |> add(""spicy paste"", #)   |> stir // what's the signature here?   |> ferment(#, 2)   |> await   |> #.takeOne();";;;;;;;;;;;;;;;;;The proposal;;That was fine. Does it require the newlines and formatting?;It is still unclear to me when # is required and when it isn'tâeven the previous example was not consistent whether `await` requires it.  It is unclear if I can do something like `|> cut(wash(#))` on a single line.  In the survey, several of the function signatures (like for `wash` or `cut`) weren't provided, and the function signature for `new Jar` said it required a number that wasn't present in the example code.  Could one do `|> await ferment(#, 2)` in one line? That seems like it may be more natural. Or, in the case of single-argument functions, `|> await stir`?  Is there a way to `console.log` intermediate values, since `|> console.log(#)` would break the pipeline?  If `new Jar` only took a single argument, would `|> new Jar` have been sufficient?  Side note: I'd really like `await` support within a `.map(â¦).reduce(â¦)` chain. :-)
133;May 29, 2019 9:02:11 am;May 29, 2019 9:08:58 am;Complete;;;English;;1559145730_5ceead02e927b6.82947732;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;43;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;91;;;;;;;Line 9;await #;63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;104;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;Feels very nice;
134;May 29, 2019 9:03:00 am;May 29, 2019 9:17:38 am;Complete;;;English;;1559145780_5ceead34609bc1.73622599;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;151;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;157;;;;;;;;;;;;;;;;Line 9;|> await #;82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;233;"const makeKimchi = () => ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;"Very natural, it reads a loud very well too, replacing ""|>"" with ""then I"" and ""#"" with ""it""...  ""I start with a cucumber, then I wash it, then I create a new Jar with it, then I add water to it, then I salt it, then I ferment it for 2 days, then I wait for it, then I take it.""";Love it!
135;May 29, 2019 9:03:09 am;May 29, 2019 9:21:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559145789_5ceead3dcef041.56451886;;;nested vs proposal 2;5-10 years;Advanced;TypeScript;;112;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 1;Add a number argument to the end of ferment();151;;;;;;;;;;;;;;;;Line 9;await #;36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;498;"const kimichi = ""cabbage"" |> wash |> cut |> salt |> food => new Jar(food) |> food => add(""spicy paste"", food) |> stir |> async food => await ferment(food, 2) |> jar => jar.takeOne()";;;;;;;;;;;;;;;;;The Status quo;;It looks weird, but it was actually alright typing it in.;A single character would be better, like in unix. Like $ or \ or ! or something.
136;May 29, 2019 9:03:04 am;May 29, 2019 9:37:50 am;Complete;;;English;;1559145783_5ceead37e5f319.17005954;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;118;Number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 11;Add number of days argument.;225;;;;;;;;;;;;;;;;Line 9;Combine lines 8 and 9.;166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;689;"Const kimchiJar = ""cabbage""   |. wash   |. cut   |. new Jar(#)   |. salt   |. add(""spicy paste"", #)   |. stir   |. await ferment(#, 2);   Note: I like |. better than |>";;;;;;;;;;;;;;;;;The proposal;;Too visually distracting imho.  Would be nice to just use | but that's already reserved.  Then why not   |. ?;So this is kinda like a promise chain then()... but for regular functions, right?  Promise chains are being replaced by awaits.  Is there an equivalent   for function chains...I wonder!?  Chains has been around for a long time, popularized by jQuery.  The new pipe operator can be thought of as global, language level, chaining... inherited by every function.  Is that a valid metaphor?  Thanks for keeping JavaScript relevant and making it great.  
144;May 29, 2019 9:04:27 am;May 29, 2019 9:15:46 am;Complete;;;English;https://feedly.com/i/latest;1559145867_5ceead8b287749.83473055;;;nested vs proposal 1;more than 10 years;Expert;TypeScript;;73;number;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 10;),14;116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));92;;;;;;;;;;;;;;;;;;;;;186;"const kinchi = ""cabbage"" |> wash |> cut |> (_ => new Jar(_)) |> (_ => add([""water""], _)) |> salt |> (_ => add([""spicy paste""])) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Used to it from F#.;
145;May 29, 2019 9:05:29 am;May 29, 2019 9:29:08 am;Complete;;;English;;1559145929_5ceeadc98ffed1.71079898;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;69;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14 );";168;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> _ => new Jar( _ );83;;;;;;;;;;;;;;;;;;;;;306;"const kimchiJar = await  ferment(     stir(         add(             'spicy paste',             salt( new Jar( cut( wash( 'cabbage' )))),         )     ),     2, );  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline;;;;"Didn't even notice it.  It takes right hand finger #4 on [Shift], finger #3 on ""|"" and then finger #2 on "">"".  It takes more effort to type special symbols above the numbers (!@#$%...) on my Lithuanian keyboard :).";"I see ""Pipeline with #"" and ""Pipeline"" in the ""Which of the above do you prefer?"". I have no idea what ""Pipeline with #"" means. There's probably a bug in this survey.  Also I noticed mistakes in code examples on every survey page. E.g.: `ferment( salt( jar, 2 ))` instead of `ferment( salt( jar ), 2 )`, `( _ => new Jar( _ ))` instead of `( _ => new Jar( _, 10 ))`, etc."
147;May 29, 2019 9:08:12 am;May 29, 2019 9:26:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559146092_5ceeae6c64f884.39946305;;;flattened vs proposal 2;more than 10 years;Expert;Other - Write In (Required);Php;281;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Add a 'y' to the variable name.;147;;;;;;;Line 8;Unsure where it is (cellphone makes it a pain to check functions Def.);118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;66;;;;;;;;;;;;;;;;;;The Status quo;;Much like bash pipe, it might be a good idea, just doesn't feel to readable for me as of now.;
148;May 29, 2019 9:08:34 am;May 29, 2019 9:27:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559146114_5ceeae8205d6d5.71678374;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;144;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 4;new Jar() requires another argument;403;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) at the end of the line;29;;;;;;;;;;;;;;;;;;;;;338;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;The proposal;;it's rough because i use my right pinky to hit shift all the time, but i'd probably feel better about it if i used left pinky to hit shift, which i'd probably train myself to do over time;good job you convinced me, i like it :^)
152;May 29, 2019 9:10:58 am;May 29, 2019 9:22:19 am;Complete;;;English;;1559146258_5ceeaf12b98da8.65290075;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;80;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Other - Write In (Required);Mostly from Jr developers - this is fairly unreadable and would end up using variables for each, despite the potential issues with memory size;;;I like the proposal better;Line 10;), 14;126;;;;;;;;;;;;;;;;Line 9;|> await #;60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;199;"const pickle = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar(#) 	|> add(""spicy paste"", #) 	|> stir 	|> ferment 	|> await # 	|> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;Perfectly fine! Seems very natural to me as an operator ;I think the other syntax (the one with arrow functions) is a bit more messy and kinda removes a lot of the appeal and debuggability of the F# syntax proposal, but also might make more sense for some newer JS developers
154;May 29, 2019 9:11:51 am;May 29, 2019 9:29:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559146311_5ceeaf4738eb22.84417815;;;nested vs proposal 1;5-10 years;Intermediate;JavaScript;;211;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 3;;252;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;122;;;;;;;;;;;;;;;;;;;;;115;;;;;;;;;;;;;;;;Pipeline;;;;Not bad.;
156;May 29, 2019 9:12:41 am;May 29, 2019 9:40:26 am;Complete;;;English;;1559146361_5ceeaf798c3db0.73684659;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;73;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 4;pass a second argument;586;;;;;;;;;;;;;;;;;;;;;;Line 5;add a paren to the end;54;;;;;;;;;;;;;;;;;;;;;450;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> _ => new Jar(_) |> _ => add(""spicy paste"", _) |> stir |> _ => ferment(_, 2) |> await |> _ => _.takeOne()";;;;;;;;;;;;;;;;;The proposal;;weird, and not quick to type;
157;May 29, 2019 9:12:38 am;May 29, 2019 9:27:31 am;Complete;;;English;;1559146358_5ceeaf76140cf1.18419193;;;nested vs both;more than 10 years;Expert;JavaScript;;40;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 11;", 14);";183;;;;;;;;;;;;;;;;Line 5;|> new Jar(#, 10);18;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_, 10));23;;;;;;;;;;;;;;;;;;;;;153;"const kimchiJar = ""cabbage"" |> wash |> cut |> new Jar(#) |> salt |> add(""spicy paste"", #) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not horrible;i don't like either placeholder concept tbh but would rather you can only use it with single-argument functions (so you'd have to use .bind() in order to work with functions that have a higher arity)
158;May 29, 2019 9:13:25 am;May 29, 2019 9:26:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559146405_5ceeafa5d60435.49259036;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;80;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";99;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));158;;;;;;;;;;;;;;;;;;;;;165;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;;;;
162;May 29, 2019 9:16:44 am;May 29, 2019 9:24:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559146604_5ceeb06ca30006.56406401;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;67;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;97;;;;;;;;;;;;;;;;;;;;;;Line 5;I would add a ) to the end;47;;;;;;;;;;;;;;;;;;;;;57;;;;;;;;;;;;;;;;;;The Status quo;;Uncomfortable, and a little clumsy-feeling;
164;May 29, 2019 9:17:26 am;May 29, 2019 9:33:03 am;Complete;;;English;;1559146646_5ceeb0960b20e9.70588502;;;nested vs both;more than 10 years;Beginner;Java;;63;Int;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;", 14);";115;;;;;;;;;;;;;;;;Line 9;|> await #;182;;;;;;;;;;;;;Line 5;(_ => new Jar(_));47;;;;;;;;;;;;;;;;;;;;;263;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add([""spicy pasta""], #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Ok;(await #) seems unnatural, I would expect (await)
165;May 29, 2019 9:18:21 am;May 29, 2019 9:31:23 am;Complete;;;English;;1559146701_5ceeb0cd452773.96962529;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;124;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;typo;135;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) EOL;27;;;;;;;;;;;;;;;;;;;;;314;"const kimchi = ""cabbage""; |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;Other - Write In (Required);Undecided;Fine;
168;May 29, 2019 9:19:51 am;May 29, 2019 9:38:43 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559146791_5ceeb127794f31.75855239;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;92;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);I don't know what code pattern you're referring to. Passing values to functions? All the time. Constructing an object and mixing function calls with method application? Somewhat.;;;I like the status quo better;Line 10;), 14;149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));117;;;;;;;;;;;;;;;;;;;;;124;I'd rather not.;;;;;;;;;;;;;;;Other - Write In (Required);The first style, but labeling intermediate values when the expression gets too complex.;;;It was two characters. Why would someone complain about that?;"I have concerns about the methodology of this survey. I was presented with false dichotomies. The ""recipes"" were far harder for me to understand than any of the code samples. The functions (like ""add"") were given a type signature then that signature was violated. The line number of an error is subjective."
170;May 29, 2019 9:20:14 am;May 29, 2019 9:33:10 am;Complete;;;English;;1559146814_5ceeb13e82a975.12527429;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;80;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;"add the ""numdays"" parameter to the ferment call";78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add "")"" to the end of the line";79;;;;;;;;;;;;;;;;;;;;;192;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (x => new Jar(x))   |> (x => add(""spicy paste"", x))   |> stir   |> (x => ferment(x, 2))   |> await   |> (x => x.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;I don't type a lot of pipes right now in my code so I'm still a bit slow. I had more problems with having to type parenthesized arrow functions everywhere though.;"You forgot to include the ""#"" example, but I think it's the placeholder syntax that's used instead of arrow functions?"
178;May 29, 2019 9:25:53 am;May 29, 2019 9:44:48 am;Complete;;;English;;1559147153_5ceeb29195fa23.46926171;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;54;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;Add `,\n  14,`;100;;;;;;;;;;;;;;;;Line 9;Change it to `await #`? No idea on this one.;280;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;245;"const preparedCabbage = 'cabbage'   |> wash(#)   |> cut(#)   |> salt(#); const kimchiJar = new Jar(preparedCabbage)   |> add('spicy paste', #)   |> stir(#)   |> await ferment(#, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;The Status quo;;Odd, but probably just from novelty rather than it actually being problematic.;"I'd argue that the status quo option is a bit of a strawman. In my opinion that code needs to be refactored to remove a couple of layers of nested calls by storing things in intermediate variables. In my opinion it's pretty unreadable now, which makes the ""which do you prefer"" question somewhat misleading: as written I prefer the pipeline version, but would I prefer the pipeline version over a refactored ""status quo""? Possibly, but it's much less clear.  I'd also probably write my pipelines so that each section is operating on a single type of thing. Otherwise I could see it getting hard to track what the result of each line is."
179;May 29, 2019 9:26:24 am;May 29, 2019 10:00:08 am;Complete;;;English;;1559147183_5ceeb2afead574.96611476;;;flattened vs both;5-10 years;Advanced;Ruby;;92;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;correct ferment's first arg to `saltyCabbageJar`;230;;;;;;;Line 10;`await ferment(#, 14)` on the same line (?????);310;;;;;;;;;;;;;Line 5;add a closing paren: `new Jar(_))`;48;;;;;;;;;;;;;;;;;;;;;685;"// I don't understand a single thing the instructions on this page say. D: Are the pictures mixed up out of order??  const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await   |> #.takeOne()  // also I would just rewrite the kimchiJar assignment as a function without the nested function call nonsense and without pipelines at all";;;;;;;;;;;;;;;Current status quo;;;;Very uncomfortable.;Pipelining seems handy for when I need to pass an argument like `() => someComputation(v)` to a function just so it'll be lazily evaluated.  Other than that I don't like it at all. The unpipelined code in the survey that was intended to be refactored was just bad code to begin with. It seems like the same compulsion to write a single-statement assignment without any intermediary var assignments---which is what made it unreadable in the first place---is the same driving impulse behind the pipelining feature. Thumbs down.
184;May 29, 2019 9:28:54 am;May 29, 2019 9:40:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147334_5ceeb346396f92.14793839;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;69;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));85;;;;;;;;;;;;;;;;;;;;;178;const kimchi = cucumber |> wash |> cut |> salt |> jar |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());;;;;;;;;;;;;;;Pipeline with #;;;;;
185;May 29, 2019 9:29:04 am;May 29, 2019 9:49:05 am;Complete;;;English;https://qsurvey.mozilla.com/;1559147344_5ceeb35067b550.74471973;;;flattened vs proposal 1;3-5 years;Intermediate;C++;;120;"""number""";"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"fix variable name ""saltCabbageJar"" -> ""saltyCabbageJar""""";298;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add a closing "")"" at the end of line 5";117;;;;;;;;;;;;;;;;;;;;;299;"const kimchi = ""cabbage""   |> wash   |> cut   |> (_ => new Jar(_))   |> salt // there was a bug int the previous implementation here! It salted the cut cabbage without the Jar   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;The proposal;;Typing that is horrible on many non-US keyboard layouts. (I do use a US-Layout, but I know how horrible it would be on a German one);I don't quite like the way it looks, but I can't think of a better way either. In general I quite like the idea though.
186;May 29, 2019 9:29:34 am;May 29, 2019 9:40:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147374_5ceeb36e628474.11000830;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;88;;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 4;Remove new? It's a bit hard to tell what the bug is, tbh.;157;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing bracket;36;;;;;;;;;;;;;;;;;;;;;161;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;;;The proposal;;It's okay, not much harder than say `=>`;Nope, absolutely love pipelines proposal and can't wait for it to be finalized :)
187;May 29, 2019 9:29:35 am;May 29, 2019 9:37:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147375_5ceeb36f5539d7.50475272;;;flattened vs both;5-10 years;Advanced;JavaScript;;85;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;The specs says that all the functions return object, yet there is undefined. Someone is lying.;137;;;;;;;;No idea;59;;;;;;;;;;;;;Line 5;Add missing );23;;;;;;;;;;;;;;;;;;;;;18;;;;;;;;;;;;;;;;;;;;;This exercise is way too long 
192;May 29, 2019 9:32:23 am;May 29, 2019 9:48:35 am;Complete;;;English;http://newsblur.com/site/1501788/planet-mozilla;1559147543_5ceeb417781a49.80632604;;;nested vs both;more than 10 years;Advanced;C++;;82;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;Add `, 14`;100;;;;;;;;;;;;;;;;Line 9;Add a `#` at the end.;147;;;;;;;;;;;;;Line 5;Add `)` at the end;30;;;;;;;;;;;;;;;;;;;;;148;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A little annoying, in terms of the finger-stretching.  `|}` would be easier...;The `#.takeOne()` bit doesn't make sense to me.  Everything else to the RHS of `|>` is a function with some parametrization bit, but `#.takeOne()` isn't really.  Is that meant to be a shorthand for `#.takeOne.bind(#)` basically?  I understand why it's not `#.takeOne` (since that might be a function we want to call with `#` as argument), but it's still a bit confusing.
193;May 29, 2019 9:34:16 am;May 29, 2019 9:56:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147656_5ceeb488415aa4.51082515;;;flattened vs proposal 1;more than 10 years;Advanced;Other - Write In (Required);PHP;107;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;ferment(saltyCabbageJar, 14);127;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ) at the end;47;;;;;;;;;;;;;;;;;;;;;273;"// Question is unclear. I assume you want me to re-write `kimchiJar` using `|>` operators.  const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (c => new Jar(c))   |> (c => add(""spicy paste"", c))   |> stir;   ";;;;;;;;;;;;;;;;;Other - Write In (Required);Neither;Simpler than expected;I dread this a little. It is nicer, but the example you're working on is very, very simplistic. I predict this will get abused, like ternaries and arrow functions, and lead to less legible code.  ``` // Not even a complex example of some awful code: const puzzle = ((a) => (b) => a + b)   |> (a) => (b) => a(b)   |> (c) => c(20)(5) > 50 ? () => true : () => false  const puzzle = ? ```  If you re-write that oldskool you can put a debug or a console.log in between the function calls to see what you're dealing with - I don't get the impression that `|>` will support that.
197;May 29, 2019 9:35:38 am;May 29, 2019 9:58:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147738_5ceeb4dac9eb20.25250475;;;nested vs proposal 1;3-5 years;Advanced;TypeScript;;78;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;, 14;92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);21;;;;;;;;;;;;;;;;;;;;;378;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> (_ => new Jar(_)) 	|> (_ => add(""spicy paste"", _)) 	|> stir 	|> (_ => ferment(_, 2)) 	|> await 	|> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;Not too uncomfortable;"The ""Pipeline with #"" example was hidden for some reason. I had to inspect element to be able to see it."
200;May 29, 2019 9:37:16 am;May 29, 2019 9:47:17 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147836_5ceeb53c149df8.38492027;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;39;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";144;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));67;;;;;;;;;;;;;;;;;;;;;162;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(_, ""spicy paste""))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;Slightly annoying;The convention in this survey to use underscore as a pass thru variable name contrasts with how I usually see it, where it's used on arguments that are not used at all.
201;May 29, 2019 9:37:14 am;May 29, 2019 10:12:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147834_5ceeb53a30cb72.54217224;;;nested vs proposal 1;5-10 years;;TypeScript;;130;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;replace `)` with `), \n 14`;256;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing paren on line 5;290;;;;;;;;;;;;;;;;;;;;;270;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Surprisingly easy, it looked a bit clunky at first but having typed it in a couple of times I got totally used to it;"The code is *so much* cleaner when you read it top-down, instead of trying to find the deepest paren level and then working all the way back to the left until your eye hits `await` while keeping track of second arguments for `ferment()`. Hat tip on this one.  Now I consider this proposal somewhat similar to when we switched from callback hell to `then().then().then ...` with Promises.   Parens around arrow func still feel clunky within pipeline. But it should be easy to handle in IDE, when you just hold left shift and press ""\"" and ""."" for pipeline, then without releasing shift press space and ""9"" + ""-"" to start arrow func. (just tried and yes, ez to type this in, so we're good)."
202;May 29, 2019 9:37:41 am;May 29, 2019 11:36:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147861_5ceeb555b23468.85437530;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;124;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;357;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));79;;;;;;;;;;;;;;;;;;;;;338;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Easy. Can type with one hand. Would prefer a single-character operator or something more reachable or familiar but the choice makes sense.;"1. Excited about how this will change functional programming style and strategy.  2. Should any functional expression be valid here? Should non-functions be considered an assignment? How does this handle exceptions or rejected promises?  'foo' |> () => 'bar' // Expected: bar  'foo' |> x => 'bar' // Expected: bar  'foo' |> function (_) {return 'bar';} // Expected: bar  'foo' |> 'bar' |> 'baz' // Expected: baz  try {   return 'foo'     |> () => throw new Error()     |> true } catch (e) {   return false } // Expected: false  3. Should there be a way to compose unary functions with just the assignment operator?  const foobar = |> foo |> bar  // Equivalent to: const foobar = x => x |> foo |> bar // Equivalent to: const foobar = pipe(foo, bar);  4. I noticed that the semantics of the await operator have changed to be a valid left-side operand for a pipeline. Should it possible to use the await operator like this?  'foo' |> await bar  // Equivalent to: 'foo' |> bar |> await // Equivalent to: 'foo' => (x => await bar(x))"
204;May 29, 2019 9:39:51 am;May 29, 2019 10:02:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559147991_5ceeb5d78fa640.51290011;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;90;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) at end;44;;;;;;;;;;;;;;;;;;;;;214;const kimchi = 'cabbage' |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add('spicy paste', _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());;;;;;;;;;;;;;;Pipeline;;;;On estonian layout < > and | are under same key (normal, shift, alt+gr respectively), idk how to feel about it. Technically could do it one handed but that's too many fingers in small area. Combining both hands (right thumb altgr + left hand < and right pinky shift + left hand < ) feels like after a bit of getting used to would be pretty fast;"""Which of the above do you prefer?"" doesn't explain ""Pipeline with #""... So no idea what that means so no vote for that"
209;May 29, 2019 9:03:47 am;May 29, 2019 10:09:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559145827_5ceead63377de6.43251447;;;flattened vs both;more than 10 years;Advanced;JavaScript;;84;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;150;;;;;;;Line 9;|> await #;523;;;;;;;;;;;;;Line 5;Add a ) after `new Jar(_)`;48;;;;;;;;;;;;;;;;;;;;;254;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;I wasn't used to it, but it wasn't too bad.;
210;May 29, 2019 9:43:46 am;May 29, 2019 9:50:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559148226_5ceeb6c2865912.96395785;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;66;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 5;Change salty -> salt;75;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing paren at end of line;37;;;;;;;;;;;;;;;;;;;;;79;???;;;;;;;;;;;;;;;;;The Status quo;;;
213;May 29, 2019 9:49:17 am;May 29, 2019 10:08:44 am;Complete;;;English;;1559148556_5ceeb80ce1ce56.59123190;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;152;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the proposal better;Line 10;add `, 14` (second argument to `ferment`);111;;;;;;;;;;;;;;;;Line 9;await #;57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;202;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;Required some minor finger gymnastics, but much easier than reading nested function calls.;
214;May 29, 2019 9:50:53 am;May 29, 2019 10:01:30 am;Complete;;;English;;1559148653_5ceeb86d86f7f6.92498924;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;78;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));29;;;;;;;;;;;;;;;;;;;;;145;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());;;;;;;;;;;;;;;Pipeline;;;;;Pipeline is more readable
215;May 29, 2019 9:51:28 am;May 29, 2019 10:13:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559148688_5ceeb890d64ed9.75191626;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;169;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;add a `numdays` arg for `ferment()` - also I'm assuming `wash()` is a valid helper function;158;;;;;;;;;;;;;;;;Line 2;Add the `wash()` helper method?;332;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;204;"Firstly, I don't think the section headers match up to the code listings here?    const kimchi = ""cabbage""   |> wash   |> cut   |> salt    |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> takeOne";;;;;;;;;;;;;;;;;The proposal;;It was okay, I didn't mind that.;"I'm probably going to be in the minority in this, but for learnability I think it helps to be slightly less implicit with the parameters.  It's a bit more typing, but I really do think the consistency in usage makes things appear less ""magical"".    const pickle = ""cucumber""   |> wash(#)   |> new Jar(#)   |> add([""water""], #)   |> salt(#)   |> ferment(#, 2)   |> await #   |> #.takeOne()  I'm also not a huge fan of the placeholder symbol `#`, but I guess any symbol chosen is going to look weird until I get used to it."
219;May 29, 2019 9:54:45 am;May 29, 2019 10:09:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559148885_5ceeb955234a21.04106077;;;flattened vs proposal 2;3-5 years;Intermediate;TypeScript;;91;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 5;;209;;;;;;;;;189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;232;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;The Status quo;;;
220;May 29, 2019 9:54:29 am;May 29, 2019 10:10:39 am;Complete;;;English;;1559148868_5ceeb944e26cd6.63939512;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;95;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));57;;;;;;;;;;;;;;;;;;;;;259;"const kimchi = ""cabbage""   |> wash   |> cut   |> (_ => new Jar(_))   |> salt   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;not bad;there were inconsistencies in the examples and questions that made it a bit confusing on how you wanted the questions answered.
230;May 29, 2019 10:02:52 am;May 29, 2019 10:23:49 am;Complete;;;English;;1559149372_5ceebb3cc55524.81125392;;;flattened vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);Rust;187;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;fix the variable name;254;;;;;;;Line 9;await #;84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;295;"const cabbageJar = new Jar(""cabbage"" |> wash |> cut |> salt); const prepJar = add(""spicy paste"", cabbageJar) |> stir; const kimchiJar = await ferment(prepJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;The Status quo;;Maybe better than the status quo, but the # makes it much worse IMO.;
234;May 29, 2019 10:05:34 am;May 29, 2019 10:23:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559149534_5ceebbde276501.17830208;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;406;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;155;;;;;;;Line 7;salt(#);119;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;211;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;good;can't wait to see pipeline operator!
238;May 29, 2019 10:09:35 am;May 29, 2019 10:21:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559149775_5ceebccf600563.86708265;;;flattened vs proposal 2;5-10 years;Advanced;Haskell;;91;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"Spell ""saltyCabbageJar"" correctly";59;;;;;;;Line 9;Feed `#` to `await`;170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;148;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;;;The proposal;;Fine.  The keyboard is rarely ever real bottleneck for programming anyway.;"I prefer ""&>"" for the pipeline operator.  Not that I expect to convince you.  But I think it's more obvious to read ""&>"" as ""and then""."
239;May 29, 2019 10:09:53 am;May 29, 2019 10:20:33 am;Complete;;;English;;1559149793_5ceebce17eb730.49739425;;;nested vs both;5-10 years;Expert;JavaScript;;93;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;Line 10;, 14;114;;;;;;;;;;;;;;;;Line 10;;106;;;;;;;;;;;;;Line 5;);22;;;;;;;;;;;;;;;;;;;;;118;"wash(""sabbage"") |> cut |> salt |> Jar |> add(""spicy paste"", #) |> stir(#, 2) |> await |> takeOne";;;;;;;;;;;;;;;Current status quo;;;;If the user gets into a situation where there are this many function calls on the same piece of data within the same function, I feel the code needs refactoring as it's too complex for understanding, whichever operator is used.;Bad code should look bad, and I feel having this kind of call stack is very hard to read and test.
240;May 29, 2019 10:09:53 am;May 29, 2019 10:20:36 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559149793_5ceebce1caca64.36717424;;;nested vs proposal 2;5-10 years;Expert;TypeScript;;84;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 1;117;;;;;;;;;;;;;;;;Line 9;await #;135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;108;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment |> await # |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;ð;
241;May 29, 2019 10:10:05 am;May 29, 2019 10:17:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559149805_5ceebceda6f1c4.37572805;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;83;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";146;;;;;;;Line 9;|> await #;21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;112;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#)  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;The proposal;;;
242;May 29, 2019 10:11:34 am;May 29, 2019 10:26:45 am;Complete;;;English;;1559149894_5ceebd46d16ef1.08204068;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;129;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 3);";385;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));52;;;;;;;;;;;;;;;;;;;;;222;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> await   |> (_ => ferment(_, 2));  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;The proposal;;Not great, but I think reading is more important than typing and it really wasn't that bad;LOVE IT! Please add!!
243;May 29, 2019 10:11:44 am;May 29, 2019 10:31:14 am;Complete;;;English;;1559149904_5ceebd507a4a03.79554409;;;flattened vs proposal 2;more than 10 years;Intermediate;Java;;132;int;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;s/salt/salty;90;;;;;;;Line 10;i don't see a bug;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;214;Impossible, original code is buggy: cut returns a string and salt expects a jar.;;;;;;;;;;;;;;;;;The Status quo;;ok;I don't understand the proposed syntax. When is and isn't the # character required?
244;May 29, 2019 10:13:18 am;May 29, 2019 10:24:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559149998_5ceebdaea153f9.15381740;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;59;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;"add "", 14"" after the close paren";92;;;;;;;;;;;;;;;;Line 9;"should read ""await #""";134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;202;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;;;The proposal;;Not bad at all. IDEs will help in the future once this is accepted.;Almost didn't catch the fact that `await` must be written `await #` within a pipeline. Seems like bare `await` should just work (or `await ferment(#, 2)`).
247;May 29, 2019 10:14:29 am;May 29, 2019 10:31:22 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559150069_5ceebdf50454f0.78867849;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;31;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";48;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));49;;;;;;;;;;;;;;;;;;;;;357;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar   |> add(""spicy paste"", _)   |> stir   |> ferment(_, 2)   |> await   |> _.takeOne()";;;;;;;;;;- Nesting is too deep - Hard to understand what's happening;None.;None.;- Breaking stuffs down into smaller pieces - Easy to understand;Â¯\_(ã)_/Â¯;;;The Status quo;;Â¯\_(ã)_/Â¯;Â¯\_(ã)_/Â¯
248;May 29, 2019 10:14:53 am;May 29, 2019 10:24:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559150093_5ceebe0db1d478.10159345;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;102;3;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;Sometimes;Sometimes;I like Pattern 2 better;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Change variabele referenced;61;;;;;;;;;;;;;;;;;;;;;;Line 5;Add paratheses at end;17;;;;;;;;;;;;;;;;;;;;;154;"const kimchi = wash(""cabbage"")   |> cut |> salt |> (_) => new Jar(_) |> (_) => add(""spicy paste"", _) |> stir |> ferment |> await |> takeOne";;;;;;;;;;Lots of nesting;;Lots of declaration;Split out in statements, easier debugging (though it has improved much in the latest firefox);;;;The proposal;;;
250;May 29, 2019 10:15:37 am;May 29, 2019 10:26:58 am;Complete;;;English;;1559150137_5ceebe394fb3c2.38231462;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;79;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;52;;;;;;;Line 10;;87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;233;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne();";;;;;;;;;;;;;;;;;The proposal;;good;"I could see it being confusing whether you need to write ""|> salt"" or ""|> salt(#)"" (which seem to be equivalent).  It would also be convenient if ""await""-ing could be done on the same like the asynchronous function was invoked: ""... |> ferment(#, 2) |> await # .... "" would turn into ""|> await ferment(#, 2)"""
252;May 29, 2019 10:16:09 am;May 29, 2019 10:48:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559150169_5ceebe5970ad46.08370977;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;74;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);"I'm not sure I would call this a pattern at all; it's just some code. ";;;I like the proposal better;Line 1;"I would add the second parameter to the ferment call; the edit would actually be in line 11";171;;;;;;;;;;;;;;;;Line 9;write `await #`;264;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;291;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;;;The proposal;;A little annoying, but not too bad.;"I hope the # symbol would work in other contexts! I want `|>` to have input types (A, A -> B), and output type B. then # is just shorthand to create a function. So I'd want to write `addTen = add(#, 10)`. It would be even better if it acted like a syntax ""hole"", so I could write `addTen = # + 10;`. I also hope the pipe operator works reasonably with generators/streams. Overall, I like the proposal."
255;May 29, 2019 10:17:29 am;May 29, 2019 10:28:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559150249_5ceebea9561bf9.27700887;;;flattened vs both;0-2 years;Expert;TypeScript;;66;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;replace 'saltCabbageJar' with 'saltyCabbageJar';68;;;;;;;Line 10;I'm not sure. Wrap '#' in parentheses?;177;;;;;;;;;;;;;Line 5;add a close paren to the end of the line;28;;;;;;;;;;;;;;;;;;;;;169;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Fairly intuitive;Not very intuitive that 'await' doesn't work like a regular function. Seems like it should in the context of the pipeline with #. Probably hard to parse? /shrug
260;May 29, 2019 10:23:46 am;May 29, 2019 10:44:20 am;Complete;;;English;;1559150626_5ceec0224c41c9.49128679;;;flattened vs proposal 2;more than 10 years;Beginner;Other - Write In (Required);C#;90;3;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;saltyCabbageJar;153;;;;;;;Line 9;await #;76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;109;salt goes around add;;whitespace formating;;;;;;;;;;;;;;;Other - Write In (Required);I like both for different reasons. The status quo is very procedural, the proposal more functional. But in the proposal, I would like the # to be optional when it is the last parameter.;I didn't :-)  On a tablet, it is terrible to type. But I usually program with a regular keyboard. Besides, I think slower than I type nd two characters, even when needing shift, is faster than coming up with meaningful variable names.;Nice idea, but I cheatted on the open questions for the following reasons: 1) I hate to type on a tablet. 2) I couldn't remember the exact code and did not want to back-and-forward constantly.
268;May 29, 2019 10:33:11 am;May 29, 2019 10:51:02 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559151191_5ceec257dab1b5.76677866;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;148;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";97;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));84;;;;;;;;;;;;;;;;;;;;;159;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;Other - Write In (Required);there is no code displayed;;;Other - Write In (Required);there is no code displayed;;;It is hard to see boundaries of the methods.;It is compact - I can easily see we oncly need pickle (or pickleJar) without dicing into the code.;Many variables so not sure if they are needed later or only once.;It is easy to understand what each line does.;no;;;The proposal;;ok;no
270;May 29, 2019 10:33:46 am;May 29, 2019 10:56:58 am;Complete;;;English;;1559151226_5ceec27a650100.69695056;;;nested vs proposal 2;more than 10 years;Intermediate;C++;;168;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;), 14;194;;;;;;;;;;;;;;;;;;353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;323;Unclear what you want to have done. But please don't add this syntax to the browsers.;;inconsistent style;;;;inconsistent style;;;;;;;;;;;The Status quo;;;Please just stop. Don't add this. Language is large enough as it is.
271;May 29, 2019 10:35:35 am;May 29, 2019 10:53:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559151335_5ceec2e73bcb62.19970273;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;134;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";76;;;;;;;Line 9;await #;150;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;444;"const kimchi = ""cabbage""   |> wash   |> cut   |> new Jar(#)   |> salt   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;inconsistent style;;;;;;;;;;;;;;;The proposal;;Fairly natural. Could become completely fluid if used enough;
273;May 29, 2019 10:36:24 am;May 29, 2019 10:59:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559151384_5ceec318cebff1.32319525;;;nested vs flattened;5-10 years;Expert;JavaScript;;125;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 11;Add a numdays parameter on line 11;121;;;;;;;Line 6;change the name to saltyCabbageJar;58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43;"const preparedCabbage = salt(cut(wash(""cabbage""))); const jar = new Jar(preparedCabbage); const spicedJar = stir(add(""spicy paste"", jar));  const kimchiJar = await ferment(spicedJar, 2);";;Other - Write In (Required);I'm not sure what the instructions are trying to say;;;Other - Write In (Required);I think this is the same question as the last one?;;35;The nested function arguments are hard to parse;It's fairly compact and doesn't need a lot of intermediate variables to keep track of.  Understood to be an immutable expression.;Lots of variables that could be used elsewhere in the function.  It's not clear when we are done with a value.;Lines are spread out to it's easy to see which arguments are going where.;;;;;;;
276;May 29, 2019 10:41:45 am;May 29, 2019 11:28:01 am;Complete;;;English;;1559151705_5ceec459a03017.17794201;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;175;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Fix the typo. This stood out immediately.;54;;;;;;;;;;;;;;;;;;;;;;Line 5;Add an additional closing parenthesis to the end of line 5.;92;;;;;;;;;;;;;;;;;;;;;971;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2))   |> await  // Also, not everybody knows what kimchi is, // or how it is made. You may have lost context // w/me and other devs on this example. //  // I had to look it up before doing the code - // it was only until after the code was finished // that I realized it didn't matter.";;Other - Write In (Required);It's FIFO instead of FILO. The functions are executed in top-down order instead of inside-out order. It's not bad, it's just different and will take some getting used to.;;;Other - Write In (Required);It's FIFO instead of FILO. The functions are executed in top-down order instead of inside-out order. It's not bad, it's just different and will take some getting used to. (this question is a duplicate, and now so is the answer);;;Too many nested values and functions on one line make it unreadable. This looks minified.;None...?;Excessive variables. Variables that all share many of the same characters/words make them appear similar, even if they are accurate.;"Separation of concerns. Easy debugging should a statement screw up (""error on line n"" vs. ""error on line 1""). Comments on a per-line basis (which the pipeline operator also encourages).";Writing the Kimchi rewrite using the pipeline operator felt natural and exciting.;;;Other - Write In (Required);"The Status quo. That said, I preferred ""function"" over ""=>"" a few years ago, and now I am disgusted at writing that word.";I kept typing =>. A lot.;This is a real need.
277;May 29, 2019 10:42:52 am;May 29, 2019 11:00:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559151772_5ceec49c172672.71206737;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;110;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";122;;;;;;;Line 9;await #;84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;350;"const kimchi = 'cabbage' 	|> wash 	|> cut 	|> salt 	|> new Jar( # ) 	|> add( 'spicy paste', # ) 	|> stir 	|> ferment( #, 2 ) 	|> await # 	|> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;Convoluted ternary operator;;;;;;;;;The Status quo;;Good enough.;
278;May 29, 2019 10:42:49 am;May 29, 2019 10:56:08 am;Complete;;;English;https://www.inoreader.com/;1559151769_5ceec499c9d355.74471577;;;nested vs flattened;5-10 years;Intermediate;JavaScript;;75;number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 10;append: , 14;112;;;;;;;Line 5;"replace ""saltCabbageJar"" with ""saltyCabbageJar""";51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;I don't know what you're asking me to do here, even a little;;nested pipelines;;;;whitespace formating;;;;Because it's deeply nested, you have to read it inside out rather than left to right;OK use of white space;Lots of identifiers;It reads neatly top to bottom. I know the sequence of steps in a natural reading order;;;;;;;
279;May 29, 2019 10:43:25 am;May 29, 2019 1:12:04 pm;Complete;;;English;;1559151805_5ceec4bd226427.39404484;;;flattened vs both;0-2 years;Intermediate;Java;;37;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerKrautJar = await(saltyCabbageJar, 14);";6708;;;;;;;Line 5;|> new Jar;240;;;;;;;;;;;;;Line 5;|> (_=>new Jar(_));149;;;;;;;;;;;;;;;;;;;;;1080;"const kinchiJar = wash ""cabbage"" |> cut |> salt |> new Jar |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await  const kimchi = kimchiJar.takeOne();";;whitespace formating;;;;density of operators;;;87;;;;;;Pipeline with #;;;;No problem!;
289;May 29, 2019 10:52:58 am;May 29, 2019 11:32:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559152378_5ceec6faadc1b4.44665921;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;172;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Never;Very often;I like Pattern 2 better;Often;;;;I like the proposal better;;;;;;;;;;Line 6;line 6: change saltCabbageJar to saltyCabbageJar;182;;;;;;;;;;;;;;;;;;;;;;Line 5;line 5: add closing paren to the end of line;74;;;;;;;;;;;;;;;;;;;;;440;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;firstly, the # on line 6. then finding out about the fillPlate function. lastly, the jogurt var name for the result of fillBowl.;;;;;;Reading the procedure from the inside out.;There are only two lines, and the second one is great.;Too many lines each with own identifiers.;It's easy to see the recipe here. Doing one step on each line really makes all the difference when compared to Pattern 1. Also, this way it's easy to find an error.;"From practice, for procedures like these where the result of an op is immediately fed into the next, I'd use a function which would iterate through each step and take care of passing results as params.  Something like:  const pickle = pipe(     [""cucumber""],     [wash]     [_ => (new Jar(_))],     [add, ""water""],     [salt],     [ferment, 2],     [_ => _.takeOne()] );  The await is missing, but the pipe() function accounts for Promises.";;;The proposal;;Not too annoying. Would get the hang of it pretty fast.;How about piping into branching operators without the need for an anonymous function  ... |> switch    1: something    2: something else    default: theRest |> ...
291;May 29, 2019 10:53:35 am;May 29, 2019 11:00:29 am;Complete;;;English;https://planet.mozilla.org/;1559152415_5ceec71f30d221.16355065;;;flattened vs proposal 2;more than 10 years;Intermediate;JavaScript;;69;number;"""error""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 5;Rename constant;86;;;;;;;Line 7;Add parameter;44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12;;;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;The Status quo;;Will get used to it but they're not the easiest combination of characters to type.;
294;May 29, 2019 10:58:33 am;May 29, 2019 11:18:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559152713_5ceec849a94876.63825387;;;flattened vs proposal 1;3-5 years;Advanced;TypeScript;;83;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Almost never;I like Pattern 2 better;Often;;;;I like the status quo better;;;;;;;;;;Line 6;update saltCabbageJar to saltyCabbageJar;64;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) to the end;41;;;;;;;;;;;;;;;;;;;;;259;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);# in fetch;It was mostly straight forward, I spent more time worrying about that # as the first argument of fetch over anything else. The next closest thing is that I almost missed the 2 line return statement where berries are added to the bowl of jogurt;;;;;;Things are out of order which is always unfortunate ;All arguments are clearly paired with ();As pointed out in the bug finding question detecting a typo in the identifiers/arguments could be a challenge;It laid out in order of operation and the variable names are descriptive.;Pattern 2 is my preferred option;;;The Status quo;;Not great but also not terrible, would prefer non-shift requiring punctuation marks.;The arrow function expressions are far more distracting than the pipeline operator
297;May 29, 2019 10:59:03 am;May 29, 2019 11:21:04 am;Complete;;;English;;1559152743_5ceec8670c6c96.66275116;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;49;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;283;;;;;;;Line 9;? await ferment(#, 14) ?;200;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;219;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;slow down caused by: nested ternaries, figuring out how |> interacts with ternaries, remembering what # refers to.;;;;;;;;;The Status quo;;Fairly easy to type.;Dislike this proposal. Moves too much functionality into operators.
299;May 29, 2019 11:09:10 am;May 29, 2019 11:34:21 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559153350_5ceecac69b3449.05936057;;;nested vs proposal 1;5-10 years;Expert;Java;;123;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;Add numdays argument to ferment function;68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add missing parenthesis;84;;;;;;;;;;;;;;;;;;;;;101;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);If statements are too long;I start by scanning, to get the general gist of the code. I use this to identify the most important bits to focus on (in this case the fetch statement which contains a syntax error (# in place of _, which I assume is a typo and not relevant), and the large block of if statements. I then pay more attention to these bits. Here I keep skipping between the if statements and the hardcoded values at the top, to see which values are always true/false. I also double check if these values are never redefined, so I keep scanning the code in between as well.;;;;;;;;;;;;;Other - Write In (Required);I like the proposal, but all the literal arrow functions with the underscores throw me off.;I have no strong opinions on this.;"In for example scala, you have something called placeholders, which you can use to create anonymous functions without having to type all the arguments. For example:      val sum = List(1,2,3,4,5).reduceLeft(_+_)  It would be nice if JavaScript had something similar, it would increase the readability of the code samples in this survey. For example (using the @ for clarity):  const pickle = ""cucumber""   |> wash   |> new Jar(@)   |> add(['water'], @)   |> salt   |> ferment(@, 2)   |> await   |> @.takeOne()  This is already much more readable than the current code, with all the arrow functions and brackets. As it is now however, I think the proposal is a very, very small improvement over the status quo. And if you introduce some variables in the status quo, it becomes a lot more readable, making the benefit even smaller.  const cucumberJar = new Jar(wash('cucumber'), 10) const saltedCucumberJar = salt(add(['water'], cucumberJar)) const pickleJar = await ferment(saltedCucumberJar, 2) const pickle = pickleJar.takeOne()"
300;May 29, 2019 11:10:07 am;May 29, 2019 11:14:27 am;Complete;;;English;https://qsurvey.mozilla.com/;1559153407_5ceecaffb9e119.65202621;;;flattened vs proposal 2;5-10 years;Advanced;Other - Write In (Required);PHP;78;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;await fermet(saltyCabbageJar, 14);32;;;;;;;Line 9;;14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10;;;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;;
302;May 29, 2019 11:12:03 am;May 29, 2019 11:25:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559153523_5ceecb73350bb0.28362770;;;nested vs flattened;more than 10 years;Intermediate;Other - Write In (Required);PHP;252;;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 11;;147;;;;;;;Line 6;change saltCabbageJar to SaltyCabbageJar;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;It's hard to parse, and my mind is constantly moving back and forth on the line as I work deeper into the nesting.;Very little, honestly.;Nothing, really.;I find laying out the steps line by line is much easier for my brain to parse, and I think it makes it easier for me to find bugs.;;;;;;;
303;May 29, 2019 11:12:57 am;May 29, 2019 11:40:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559153577_5ceecba979ad42.17633948;;;nested vs proposal 1;5-10 years;Intermediate;Other - Write In (Required);Wolfram Language;89;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;);231;;;;;;;;;;;;;;;;;;;;;248;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await";a bowl of jogurt with berries;inconsistent style;;"One thing I needed to get used to is the use of |> inside the RHS of another |>. So I was wondering for a moment about scope (till I noticed that there are no collisions). Then there is the ""return"" and ""|>"" on the same line. Finally, grouping two meals into one if(...) was tricky.";;;;;;;;;;;;;The proposal;;"Great. I'm used to it from typing ""associations"" in the WL.";I like how this proposal highlights the order of operations, instead of their nesting.
305;May 29, 2019 11:14:09 am;May 29, 2019 11:39:57 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559153649_5ceecbf187b3f0.15893389;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;100;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar on line 6;121;;;;;;;Line 9;either change to await #, or can I put await after |> on the previous line?;97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;241;"const kimChi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);long conditional and inline ternary - should be wrapped in a func;If statements with more than about 3 statements in the clause are always difficult to ready confidently.  It's a bit disorienting that the ternary is kinda used to bifurcate the pipe, but not quite  I guess it looks like it's written by somebody who knows enough func programming to be dangerous, but not enough to do it really well... someone like me in fact  After reflection, I realised that line 8 - 13 is really just an anonymous function body. The syntax hides that fact and makes it more confusing... but it's a terribly written function anyway;;;;;;;;;Other - Write In (Required);I would rather see pipes in js than no pipes, but not a massive fan of this;Great. Love it;await # rather than await ferment(#, 2) feels bad. Would be good to find a way to inline await  Maybe this is wild, but could |> become a rare case of an operator that does not - for most cases - work with multiline statements (e.g return doesn't in many cases). It would prevent the worst misuses, while giving the power of pipes to those who are disclipined
307;May 29, 2019 11:13:07 am;May 29, 2019 1:34:38 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559153587_5ceecbb3245445.25781243;;;flattened vs both;3-5 years;Intermediate;JavaScript;;160;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix the typo on line 6;2454;;;;;;;Line 8;combine line 8 and 9, await ferment(#, 14);195;;;;;;;;;;;;;Line 5;add a closing paren to the end of the line;38;;;;;;;;;;;;;;;;;;;;;643;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It will take some getting used to, it's not a common hand position on my keyboard.  ;
311;May 29, 2019 11:17:30 am;May 29, 2019 11:18:58 am;Complete;;;English;;1559153850_5ceeccba2c4206.72937419;;;nested vs flattened;5-10 years;;;;3;;;;;;;;;;;;;;;;;;;;;9;;;;;;;;;11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3;;;;;;;;;;;;;;;;;;;;;
314;May 29, 2019 11:19:47 am;May 29, 2019 12:03:06 pm;Complete;;;English;;1559153986_5ceecd42de4042.20784006;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;185;3;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);In Bash & things written about pipes in JS;;;I like the status quo better;Line 11;Add `numdays` as second arg of `ferment`;236;;;;;;;;;;;;;;;;Line 8;I'm not sure of the async/await syntax for pipes, but I would guess ln. 9 should be `await ferment(#, 14)`;148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542;"const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;"- Ternary nesting (I prefer to avoid that stuff) - Looks like there's an unnecessary "")"" on line 13 - I think line 12 should be `(({wine}) => wine |> fillGlass)(#)`";;;;;;;;;Other - Write In (Required);A change in proposal;I think that excessive nesting is bad practice, but `|>` makes it more legible.;My issue with the proposal is that I don't like using `#`, which is used for comments in so many languages. I understand why an otherwise invalid char was chosen, but it still looks plain wrong to me.
315;May 29, 2019 11:20:35 am;May 29, 2019 11:43:04 am;Complete;;;English;;1559154035_5ceecd7399c296.95842909;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;233;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;,14);147;;;;;;;;;;;;;;;;Line 5;new Jar;125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;165;;;;;;a bowl of jogurt with berries;too many if statements;;the meeting of the ternary operators. There was the temptation to transform to functions to check the correctness. ;;;;;;;;;The proposal;;Ok;No
317;May 29, 2019 11:23:13 am;May 29, 2019 11:51:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559154193_5ceece112ab986.69398392;;;nested vs both;3-5 years;Advanced;JavaScript;;184;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 1;pass numdays or define it;377;;;;;;;;;;;;;;;;Line 5;put it in a function;241;;;;;;;;;;;;;Line 5;close with );84;;;;;;;;;;;;;;;;;;;;;66;;;;;;;;;;;;;;;;Pipeline with #;;;;I can get used to it;
321;May 29, 2019 9:19:19 am;May 29, 2019 11:48:59 am;Complete;;;English;;1559146759_5ceeb107c2f562.32329769;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;320;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;"), 7);";136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));105;;;;;;;;;;;;;;;;;;;;;357;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"") |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;weird at first but i got used to it;"what is the difference between ""pipeline"" and ""pipeline with #""? Is ""pipeline with #"" equivalent to ""|#""? If so, I have no preference."
325;May 29, 2019 11:34:58 am;May 29, 2019 11:53:02 am;Complete;;;English;;1559154898_5ceed0d2bae990.05489747;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;172;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;Add numDays argument to the ferment function;209;;;;;;;;;;;;;;;;Line 7;salt is missing an argument -> salt(#);92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;254;"const kimchiJar = ""cabbage""  |> wash  |> cut(#)  |> salt(#)  |> new Jar(#)  |> add(""spicy paste"",#)  |> stir(#)  |> await #  |> #.takeOne()";;;;;null;too many if statements;;trying to find where if and its corresponding else statement;;;;;;;;;The proposal;;Nothing difficult;
327;May 29, 2019 11:37:01 am;May 29, 2019 11:56:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559155021_5ceed14d4a8300.09869853;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;91;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Rename salty... to salt... or otherwise;505;;;;;;;;I've no idea ._. It looks ugly.;250;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;60;Sorry, I'm on mobile and don't actually remember how. But why not return this and then pipe things using the dot operator?;;;;;a bowl of jogurt with berries;nested pipelines;;The mental overhead is tremendous, I need to scan-ahead and come back to always figure out which value is getting injected into the hash operator.;;;;;;;;;The Status quo;;It's not bad, but definitely not a good experience. Also, please note the proposed change doesn't solve the underlying problem of the status quo code not being as clean as it could be. ;
328;May 29, 2019 11:39:23 am;May 29, 2019 12:11:31 pm;Complete;;;English;android-app://com.Slack;1559155163_5ceed1db1d1887.72267650;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;94;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 11;Add a second arg to the ferment call;65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add paren at EOL 5;82;;;;;;;;;;;;;;;;;;;;;354;"const kimchi = 'cabbage' |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;whitespace formating;;"I just read top to bottom. I dislike the simultaneous verbosity and lack of clarity of constant |> (_ => _.whatever()) |> await versus const b = await a.whatever(). Pipeline operator can be cool, but probably just for single-arg pure functions  Issues:  - |> on the return line and then another on the next line, unindented. - Naming the bowl ""jogurt"" - duplicate _jogurt.ready check - # looks like a bug";;;;;23;;;;;;;;Other - Write In (Required);Intermediate variables in the status quo would read best IMO. `const washed = wash(...)`;I'm on mobile. Actually it was fine. (_ => ) sucked though. Too much of that.;Gotta add a syntactic shorthand for the (_ => ) noise. A magic # inside pipeline operator can be sugar for it, perhaps. |> #.fn() |> fn(#, 42)  would also be nice to inline the awaits somehow.
331;May 29, 2019 11:46:57 am;May 29, 2019 12:02:27 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559155617_5ceed3a19558d0.95260937;;;flattened vs both;more than 10 years;Expert;JavaScript;;86;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltCabbageJar, 14);137;;;;;;;Line 5;|> new Jar(#, jar);99;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));61;;;;;;;;;;;;;;;;;;;;;260;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Easy;Smart Pipelines (with #) are awesome, waiting for them!
334;May 29, 2019 11:53:50 am;May 29, 2019 12:03:30 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559156030_5ceed53e28aaa2.58109182;;;nested vs proposal 1;3-5 years;Expert;JavaScript;;72;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;fermet(salt(...), 14);140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;new Jar(_));40;;;;;;;;;;;;;;;;;;;;;80;;a bowl of jogurt with berries;density of operators;;;;;;;145;;;;;;Pipeline;;;;Fine;
336;May 29, 2019 11:58:19 am;May 29, 2019 12:18:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559156299_5ceed64b674b12.76685697;;;flattened vs both;more than 10 years;Expert;JavaScript;;118;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;correct the variable name to `saltyCabbageJar`;128;;;;;;;Line 9;|> await #;178;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));60;;;;;;;;;;;;;;;;;;;;;198;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> _ => new Jar(_)   |> _ => add(""spicy paste"", _)   |> stir   |> _ => ferment(_, 2)   |> await";;;;;;;;;;;;;;;;;The proposal;;|> is clear and distinct to read as an operator;Are there any plans to support syntax for function composition without immediately applying a value, or will it just end up as something like: fThenG = _ => _ |> f |> g
341;May 29, 2019 12:00:42 pm;May 29, 2019 12:06:40 pm;Complete;;;English;https://www.inoreader.com/;1559156442_5ceed6da16ffd2.26468552;;;flattened vs both;more than 10 years;Advanced;JavaScript;;115;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;rename salt -> salty;72;;;;;;;Line 2;"define a function called ""wash""";76;;;;;;;;;;;;;Line 2;define a function called wash;13;;;;;;;;;;;;;;;;;;;;;7;;;;;;;;;;;;;;;;;;;;;
343;May 29, 2019 12:06:18 pm;May 29, 2019 12:25:06 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559156778_5ceed82a5903e6.37663148;;;flattened vs both;more than 10 years;Expert;TypeScript;;24;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";118;;;;;;;Line 10;|> _ => _.takeOne();79;;;;;;;;;;;;;Line 5;|> _ => new Jar(_) // do I really need to wrap expressions in parens?!?;100;;;;;;;;;;;;;;;;;;;;;202;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> _ => _.takeOne()";;;;;;;;;;;;;;;;;Other - Write In (Required);maybe a chainable API?;I use neo2 (https://www.neo-layout.org/), and I frequently mis-typed it as `$>`, as `|` is right next to `$` :-D It is a bit tedious to type in general. I do have parens right on the home row, which makes them super easy for me to type :-);"well the typo would have been caught by typescript. Also typescript with good IDE support would actually make a chaining-based API super easy to work with, since mostly *everything* would be suggested automatically, and it would also take care of only supporting things that make sense, in the way of ""making invalid state unrepresentable"".  ```ts Recipe.with(""cucumber"").wash().intoJar().add(""water"").salt().ferment(2).then(_ => _.takeOne()) ```  the only tedious thing is the promise / awaitâ¦"
346;May 29, 2019 12:07:18 pm;May 29, 2019 2:15:10 pm;Complete;;;English;;1559156838_5ceed866307140.74726861;;;nested vs both;more than 10 years;Advanced;TypeScript;;2604;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 11;", 14);";164;;;;;;;;;;;;;;;;Line 9;await #;927;;;;;;;;;;;;;Line 5;(_ => new Jar(_));54;;;;;;;;;;;;;;;;;;;;;189;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;;;The proposal;;I'm ok with it;Thanks Yulia!
348;May 29, 2019 12:11:10 pm;May 29, 2019 12:32:04 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559157070_5ceed94ea8cf83.62142446;;;flattened vs both;more than 10 years;Expert;TypeScript;;203;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"spell ""saltCabbageJar"" as ""saltyCabbageJar""";148;;;;;;;;Not sure where the bug is;285;;;;;;;;;;;;;Line 5;Add a paren at the end of the line;83;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;Fine, not many keystrokes.;"Definitely would be nice to have fewer reasons to use a ""compose"" helper."
349;May 29, 2019 12:11:24 pm;May 29, 2019 12:50:22 pm;Complete;;;English;;1559157084_5ceed95c7775e0.87670021;;;flattened vs proposal 1;5-10 years;Expert;Other - Write In (Required);c#;256;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;fix the spelling of the variable;254;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) at the end;74;;;;;;;;;;;;;;;;;;;;;336;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;density of operators;;The # at line 6 The many operators at line 13;;;;;;;;;;;Current status quo;;;;ok. I don't type | so often, so i had to look at the keyboard to see it is AltGr+Â´.;I don't think the functions in the example work well with the operator. It would make more sense with functions made for the operator, like the addTo function, or even better: an easier syntax for passing additional parameters. Feels a lot like c# extension methods.
350;May 29, 2019 12:16:37 pm;May 29, 2019 12:34:34 pm;Complete;;;English;;1559157397_5ceeda953f99d3.84716005;;;nested vs flattened;3-5 years;Advanced;JavaScript;;172;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 10;), 14;295;;;;;;;Line 6;use the correct var name from line 5;76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;?;;;;;;;;;;it's ok;it's ok;too many variables that aren't going to be used, takes up too much space (fitting less code in a page);depends on the context;"these things have no absolute answers; it depends on context and what is most important (both when it's being written, and when it needs to be understood several months later). in some cases I'd use the compressed version if the details are a distraction. in other cases I'd use the spelled out version if the intermediate steps are important for the code writers/readers in the context of the rest of the source file.";;;;;;
355;May 29, 2019 12:21:24 pm;May 29, 2019 12:41:56 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559157684_5ceedbb4b95854.86225385;;;flattened vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);Rust;61;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Add a y;102;;;;;;;Line 10;Put # after await, though I don't know if I would have seen this so quickly in real code;143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;220;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2) |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Unfamiliar style of operator soup made it hard for me to follow the logic. This looks like a Haskell programmer wanted to write JavaScript.;;;;;;;Pipeline with #;;;;Very difficult on a smartphone.;I am excited to see what libraries people come up with that abuse this syntax.
366;May 29, 2019 12:37:42 pm;May 29, 2019 1:01:09 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559158662_5ceedf86484a77.44753853;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;24;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;Add an additional argument (14) to the call to ferment;169;;;;;;;;;;;;;;;;Line 10;I've got no idea;230;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;288;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2)); const kimchi = (await kimchiJar).takeOne();";;;;;a bowl of jogurt with berries;identifiers;;"It was rarely clear what ""#"" indicated. It might be the same thing from line to line or it might not be, depending on where the expression terminates.  Also, |> looks more like a prompt character than syntax.";;;;;;;;;The Status quo;;Moderately annoying, but I'm on a big ergonomic keyboard. Some of my keyboards at home don't have easy access to the | character.;"|> looks more like a prompt character than syntax (look at the F# REPL for an example).  Also, this feels like there's a mismatch between grammar style and intent. It's normal to either have really long lines or explicitly break them in shell scripts; otherwise each line usually indicates a new statement. It doesn't work nearly as well in JS where very long lines are discouraged and there are many situations where ending a line doesn't terminate an expression."
372;May 29, 2019 12:46:20 pm;May 29, 2019 6:50:59 pm;Complete;;;English;https://feedly.com/i/subscription/feed%2Fhttp%3A%2F%2Fhacks.mozilla.org%2Ffeed%2F;1559159180_5ceee18c2fa908.75943399;;;nested vs flattened;more than 10 years;Expert;TypeScript;;115;string;"""function""";"add.bind(null, 10);";;;;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 11;Add number of days;319;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;Hard to read because it's all smushed together. Though, that could be fixed by better formatting.  A more insidious problem is that you need to read from inside to the outside. 'wash' is the first action and 'ferment' is the last.;It's concise, there are no side effects and no extra state is created.;It's long-winded. It takes an extra second to see that each variable created is used exactly once. And once I see that, my first instinct is to start combining lines, but then I get into the same problem as I see above.;"The naming of the variables is very nice. This is a bit of a contrived example. In the wild, I have seen too many instances like this, but the variables are named ""temp1"" or ""a"", etc.";"In my coding style, I'd prefer a bit of a mix of these styles. I probably wouldn't want to nest function calls any more than two deep. And then I would use explicit variables for the remainder.  Maybe something like this:  const cucumberJar = new Jar(wash(""cucumber"")) const saltyCucumberJar = salt(add(""water"", cucumberJar))  etc...  But...If I were making this API, I would do something like this:  const pickle = (await new Jar()   .add(wash(""cucumber""))   .add(""water"")   .add(""salt"")   .ferment())   .takeOne()  Which actually reads similar to your proposal later on. ";;;;;;
374;May 29, 2019 12:53:53 pm;May 29, 2019 1:08:19 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559159632_5ceee350eebbc5.54568921;;;flattened vs both;more than 10 years;Expert;TypeScript;;215;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix variable name;180;;;;;;;Line 10;# isn't for arguments?;105;;;;;;;;;;;;;Line 5;Add missing paren new Jar(_));28;;;;;;;;;;;;;;;;;;;;;137;I don't understand what I'm supposed to refactor, directions are not clear.;;;;;;;;;;;;;;;Pipeline with #;;;;Strange at first, but no weirder than an arrow function.;
375;May 29, 2019 12:54:39 pm;May 29, 2019 1:23:17 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559159679_5ceee37fb96ec0.04645688;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;93;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 1;add the second parameter;514;;;;;;;;;;;;;;;;;;518;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;170;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar( # )   |> add( ""spicy paste"", # )   |> stir   |> ferment( #, 2 )   |> await #";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;not used to it. characters are placed somewhat counter-intuitive on a German keyboard layout, but one may get used to it after a while;
377;May 29, 2019 12:58:44 pm;May 29, 2019 1:34:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559159924_5ceee4745eb7c9.17477658;;;flattened vs proposal 1;3-5 years;Intermediate;TypeScript;;163;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar on line 6;168;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) to the end of line 5;71;;;;;;;;;;;;;;;;;;;;;449;"const kimchiJar = ""cabbage""   |> wash   |> salt   |> ((_) => add(""spicy paste"", _))   |> ((_) => ferment(_, 2))   |> await  const kimchi = kimchiJar.takeOne()";a bowl of jogurt with berries;density of operators;;The slowest part was the if statements. Particularly that second if statement (or first else if). I almost selected null, until I noticed there was an || operator in that else if.;;;;;;;;;;;Pipeline;;;;It was rather intuitive. And Easy |>. I wish the two keys for the pipe operator were closer together though. I could see that straining people with small hands on a qwerty keyboard.;"I don't like the syntax of wrapping anonymous functions. I understand the syntax (from the examples) but I think it's ugly and adds clutter. It's better than the status quo, for sure, but if it is possible to remove all cluter, that would be better.  With the current proposal I'd be tempted to write things like:  const makeJar => _ => new Jar(_) const addWater = _ => add([""water""], _) const fermentTwoDays = _ => ferment(_, 2) const takeOne = _ => _.then(p => p.takeOne())  const pickle = ""cucumber""   |> wash   |> makeJar   |> addWater   |> salt   |> fermentTwoDays   |> takeOne"
383;May 29, 2019 1:05:39 pm;May 29, 2019 1:24:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559160339_5ceee613896cf0.13753164;;;nested vs both;more than 10 years;Advanced;TypeScript;;131;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;, 14;154;;;;;;;;;;;;;;;;Line 1;wash? undefined?;171;;;;;;;;;;;;;Line 5;);45;;;;;;;;;;;;;;;;;;;;;149;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicyPaste', #)   |> stir   |> ferment(#, 2)   |> #.takeOne();";;;;;;;;;;;;;;;;;Other - Write In (Required);Undecided;Okay to type, ugly syntax though.;Both proposals are confusing about when an argument can be implied.  Sometimes in real-world pipelines, the intermediary stages are interesting too, so losing the ability to name them explicitly could make these pipelines less clear to understand
385;May 29, 2019 1:08:19 pm;May 29, 2019 1:26:30 pm;Complete;;;English;;1559160499_5ceee6b34870f6.24400679;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;84;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"the ""numdays"" parameter is missing, so add a "", 7"" or whatever";94;;;;;;;;;;;;;;;;Line 9;i think this is because there's no `#` on the `await` line? the earlier example had one. await isn't a function it's an operator so my intuition is the pipeline would need a placeholder. i don't know the proposed semantics though, and this error message is super confusing if this is the error;187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;112;const kimchi = wash('cabbage')   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;a bowl of jogurt with berries;density of operators;;hit an immediate block on the first ternary condition. i think it was just i wasn't sure what to expect, and when i hit a ternary i had to backtrack a bit. reading the pipelines was fine, but it took some thought to convince myself that multiple placeholders in an expression would make sense.  other bits that slowed me down were trying to work out what the wine IIFE was doing, and where the bracket after the null was opened. i think these are bugs, but it took some searching.  this really is awful code! i think it'd be even harder to read without pipelines;;;;;;;Pipeline with #;;;;easy. on my keyboard | and > are on the bottom row via shift;"not sure if there are some examples missing from the survey or i'm being A/B tested but in most questions i was only presented with a ""pipeline with #"" example? i prefer that to writing a bunch of inline arrow functions, and i'd largely be using curried functions in this style anyway"
386;May 29, 2019 1:08:56 pm;May 29, 2019 1:33:11 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559160536_5ceee6d8897cd9.92284413;;;flattened vs proposal 1;5-10 years;Beginner;Python;;210;integer;"""error""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;?;413;;;;;;;;;;;;;;;;;;;;;;Line 5;_ => new Jar(_);190;;;;;;;;;;;;;;;;;;;;;76;;;identifiers;;;;;;;;;;;;;;;;;I see it as a logical compare symbol all the time and it thows me off.. before I realise it is something else.. looks a bit messy even though you aim for the opposite..;
387;May 29, 2019 1:10:31 pm;May 29, 2019 1:28:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559160630_5ceee736d9d8d2.80831400;;;nested vs flattened;5-10 years;Expert;JavaScript;;70;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 10;add second parameter to ferment() call;154;;;;;;;Line 6;"Correct ""saltCabbageJar"" to ""saltyCabbageJar""";61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbage = salt(cut(wash(''cabbage""))); const cabbageJar = new Jar(cabbage); const spicyCabbageJar = stir(add(""spicy paste"", cabbageJar)); const kimchiJar = await ferment(spicyCabbageJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Hard to read, hard to keep track of what parameters are passed to what functions, easy to make mistakes with parentheses.;It's shorter.;It's overly verbose, too long. Tracing the flow by jumping from one variable to the other might be tedious.;Each line on its own is very clear, no excessive nesting of function calls, easy to spot what params are passed to what functions.;"It would be much more readable if those functions were just methods of classes like Jar, Cabbage etc.  On the other spectrum, using some kind of ""compose"" function (acting like a pipe operator in some functional languages) would make it readable as well.  Those examples are neither really functional nor object-oriented and it's a mess.";;;;;;
392;May 29, 2019 1:20:47 pm;May 29, 2019 2:39:30 pm;Complete;;;English;;1559161247_5ceee99f6ab7f2.06901750;;;nested vs proposal 1;more than 10 years;Expert;Python;;309;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Other - Write In (Required);The question is unclear: if it refers to such a complex recipe written as a single expression - rarely;;;I like the proposal better;Line 10;Pass the number of days to ferment();138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) at the end of the line;3267;;;;;;;;;;;;;;;;;;;;;120;// Come on, you didn't say I'd have to write code on mobile;a bowl of jogurt with berries;Other - Write In (Required);Unsure if semicolon insertion kicks in after fillBowl;Apart from the weird newline after fillBowl, the reversed order of conditions (checking the response before the constants). Also the lack of context - why was I reading through that code: looking for the cause of bug? Trying to understand what the code did assuming it's correct?  No language features stood out as being particularly problematic. ;;;;;;;;;;;Other - Write In (Required);"What's ""pipeline with #""?";;;Ok;
398;May 29, 2019 1:26:29 pm;May 29, 2019 1:53:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559161589_5ceeeaf50529e6.72676989;;;flattened vs both;more than 10 years;Advanced;JavaScript;;203;function;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;typo -- change to ferment(saltyCabageJar, 14);283;;;;;;;Line 2;wash isn't defined? no idea;492;;;;;;;;;;;;;Line 5;add a ) at the end;39;;;;;;;;;;;;;;;;;;;;;242;"const cabbage = wash(""cabbage""); const cutCabbage = cut(cabbage); const saltedCabbage = salt(cutCabbage); const cabbageJar = new Jar(saltedCabbage); const spicyPasteJar = add(""spicy paste"", cabbageJar); const stirredJar = stir(spicyPasteJar); const kimchiJar = await ferment(stirredJar, 14); const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;Other - Write In (Required);Pipeline with #;ok;the proposal with () is just opening up to dumb mistakes missing a paren here and there. the # makes it much less cluttered
400;May 29, 2019 1:29:16 pm;May 29, 2019 1:54:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559161756_5ceeeb9cc1eb94.43845934;;;flattened vs proposal 2;3-5 years;Beginner;Other - Write In (Required);C#;120;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";253;;;;;;;Line 9;await #;314;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;325;"const kimchiJar = await wash(""cabbage"")   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);I write code like this. I find it very readable. I am very sorry. ;I like it. I like this code style. I feel somewhat attacked, but I probably deserve it. ;;;;;;;Pipeline with #;;;;Great!;Please do this! Please, please do this!
405;May 29, 2019 1:39:25 pm;May 29, 2019 2:18:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559162364_5ceeedfce57b28.78629709;;;flattened vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);C#;216;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"add the missing glyph (""y"") in ""saltCabbageJar""";204;;;;;;;Line 9;"Add the missing ""#"" glyph";272;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;427;"// I do not like that ""await"" is separated from the function which generates a promise. If it were me, I would write more like this ""... |> await ferment(#, 2) ...""  const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #;  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;identifiers;;Only the intentionally ugly variable names slowed me down. Mixed styles doesn't slow me down too much because it is actually visually segmented into separate ideas.  I read over the program once to get the flow, then I re-read the state of the variables, this is due to the cognitive load from the messy code, the proposed feature did not slow me down.;;;;;;;Other - Write In (Required);"Pipeline with ""#."" But may I suggest ""val"" instead of ""#?"" Use of the keyword ""value"" in C# setters is clean and self-explanitory.";;;"Clumsy. I would want something which is faster to type and requires less wrist/finger articulation. May I propose "":>"" instead? Though I realize it is harder to identify and read.";
408;May 29, 2019 1:44:35 pm;May 29, 2019 1:52:30 pm;Complete;;;English;;1559162675_5ceeef33bf0ea9.73801964;;;flattened vs both;more than 10 years;Expert;Other - Write In (Required);C#;64;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix typo;83;;;;;;;Line 9;move await up;56;;;;;;;;;;;;;Line 5;add closing bracket;45;;;;;;;;;;;;;;;;;;;;;35;;;;;;;;;;;;;;;;;;The Status quo;;pretty good;do the # thing definitely
410;May 29, 2019 1:49:09 pm;May 29, 2019 2:17:17 pm;Complete;;;English;;1559162949_5ceef0452abbd3.71555784;;;flattened vs proposal 2;3-5 years;Intermediate;Python;;184;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the pipeline with the # better;I like the status quo better;;;;;;;;;;Line 6;"change ""saltCabbageJar"" to ""saltyCabbageJar""";131;;;;;;;Line 9;"add ""#"" after await";161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;218;"const kimchi = ""cabbage""   |> wash   |>Â cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;When reading from top to bottom, branching in ternary operation and referencing variables outside of the pipeline slowed me down.;4;;;;;;Pipeline with #;;The proposal;;;
411;May 29, 2019 1:49:25 pm;May 29, 2019 2:07:41 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559162965_5ceef0557cfce0.00504791;;;nested vs flattened;more than 10 years;Expert;TypeScript;;56;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 10;Provide a numdays argument;116;;;;;;;Line 6;Fix typo in saltCabbageJar. It's missing a y;68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbage = salt(cut(wash('cabbage'))); const jar = stir(add('spicy paste', new Jar(preparedCabbage))); const kimchiJar = await ferment(jar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;"Have to think carefully and read slowly to establish the order of operations, e.g. when there are multiple function calls whose results are passed as arguments to the same function.  Navigating the code in a debugger (must repeatedly ""step into"" and ""step out"" to go into the interesting function)  Long and complex lines are less easily broken into mental ""chunks"". When debugging, as I narrow down a problem, it can be helpful to clearly indicate ""everything up until this point is behaving correctly"". Which single lines are long and complex, this is more difficult. Likewise when reading code, it's easier to think ""ok, I understand everything up until this point"". Doing this for complicated individual lines is more difficult.";Can fit more code on the screen at once.  If the issue I'm concerned about isn't in this line, then it's easier to mentally chunk this code.;So many names! Have to read and evaluate a name for each intermediate value. Any value can be referenced at any time by any subsequent line.  More code, more likely to not be able to fit the important stuff on screen.;Order of operations are super clear and unambiguous.  debugger works great, as it steps statement by statement  Can see the values of individual variables in debugger to quickly validate where a computation went wrong.  In TypeScript, can mouse over each variable to see the type that's been inferred for it. (this is *super* useful)  Can easily console.log() any intermediate value, in cases where debugger isn't convenient;;;;;;;
412;May 29, 2019 1:49:35 pm;May 29, 2019 2:00:18 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559162975_5ceef05f2cad30.39969944;;;nested vs both;3-5 years;Advanced;Other - Write In (Required);Rust;31;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 11;Add the missing parameter;66;;;;;;;;;;;;;;;;;;207;;;;;;;;;;;;;Line 5;Add closing paren;36;;;;;;;;;;;;;;;;;;;;;176;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await";;;;;;;;;;;;;;;;;The proposal;;;
420;May 29, 2019 2:01:10 pm;May 29, 2019 2:15:36 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559163670_5ceef316d87165.76398884;;;flattened vs both;3-5 years;Intermediate;C++;;109;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Yse the correct variable name;114;;;;;;;;No idea;108;;;;;;;;;;;;;Line 5;Add missing parenthesis;37;;;;;;;;;;;;;;;;;;;;;192;Nope. Mobile phone.;;;;;;;;;;;;;;;;;The proposal;;;
421;May 29, 2019 2:20:11 pm;May 29, 2019 2:31:21 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559164811_5ceef78b7796f0.68278894;;;nested vs proposal 2;3-5 years;Expert;JavaScript;;90;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;),2*7;137;;;;;;;;;;;;;;;;;;97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18;;;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;Pipeline;;;;;
422;May 29, 2019 2:25:01 pm;May 29, 2019 2:52:08 pm;Complete;;;English;;1559165101_5ceef8ada3b151.62194893;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;50;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrat = await ferment(saltCabbageJar || 'something', 14);)";128;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));58;;;;;;;;;;;;;;;;;;;;;431;"const kimchiJar = wash('cabbage') 	|> cut 	|> salt 	|> new Jar 	|> (_) => add('spicy paste', _) 	|> stir 	|> (_) => await ferment(_, 2);";a bowl of jogurt with berries;Other - Write In (Required);the underscore variable style;"mainly the awaits being on separate lines. I think line 6 & 8 being `|> await (_ => fetch(_, {...}))` and `|> await (_ => _.json())` respectively would be easier to read, although I would prefer `|> await (url => fetch(url, {...}))` and `|> await (res => res.json())` without the underscore being the ""default"" example";;;;;;;;;;;Pipeline;;;;Fine;"I didn't really understand what you meant by ""Pipeline with #"" so I just went with Pipeline. In the example above I think I would prefer `|> new Jar` over `|> (_ => new Jar(_)` since it's only one argument. Also if we're throwing awaits into the mix,  ``` |> await (_ => ferment(_, 2)) |> (pickleJar => pickleJar.takeOne()) ``` I think is slightly nicer to read than that example."
423;May 29, 2019 2:26:54 pm;May 29, 2019 2:53:06 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559165214_5ceef91e387603.49384133;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;83;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;;Line 1;add the parameter at line 12 (even if interpreter complains the error is in line 1 b/c function is inviked there);154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 1;don't make the pipe operator, make the compose one (right to left, not left to right);101;;;;;;;;;;;;;;;;;;;;;67;;null;Other - Write In (Required);Reading left to right composition instead of right to left (also, not writing the parameters with the rightmost the one to be replaced, thus rendering a placeholder moot, and also not having autocurry);left to right composition coupled with improper ordering of parameters that require placeholders to be bound;;;;;;;;;;;Other - Write In (Required);both are ugly AF and hard to read;;;I didn't type it, I'm doing this on an iPad, usually when I write code, I do it on a laptop - still, not fun of operators I have to write by holding shift and an obscure key on the keyboard;"add the compose (right to left) as an operator, figure out some other way of writing them ( -> for pipe, < - for compose, could be one alternative, or +> or < < ~ or $> and < $)  add the possibility to create autocurried functions, maybe call dunctions as infixed operators (check Haskell) like:   const autocurried = (a,b,c) =>> a + b + c;  const plus = a + b; console.log( 1 @plus 2 );  just adding a pipe operator w/o these to be able to combine, will just make the same amount of unreadable code, but now more vertically unreadable instead horizontally unreadable..."
425;May 29, 2019 2:36:01 pm;May 29, 2019 2:57:11 pm;Complete;;;English;;1559165760_5ceefb40e0eaf0.88543209;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;96;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;), 14;141;;;;;;;;;;;;;;;;Line 9;|> await #;113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;403;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;the ? operator;150;;;;;;Pipeline with #;;;;i did the survey on my phone, so horrible i do know that | is a character that is impractical to type on many keyboards, especially in german speaking countries;
427;May 29, 2019 2:43:17 pm;May 29, 2019 2:53:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559166197_5ceefcf50073f6.53785351;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;56;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Correct the misspelling of the variable;88;;;;;;;;;;;;;;;;;;;;;;Line 5;Add paren to line 5.;23;;;;;;;;;;;;;;;;;;;;;221;"wash(""cabbage"") |> cut |> salt |> v => new Jar(v) |> j => add(""spicy paste"", j) |> stir |> n => ferment(n, 2) |> await |> j => j.takeOne()";a bowl of jogurt with berries;inconsistent style;;Returning a pipeline takes a minute to process, and seems like it would be prone to ASI-style bugs.  I don't care for await following a promise here, as opposed to regular code, where it precedes the value.;;;;;;;;;;;Current status quo;;;;I kept typing \ by mistake, but that's probably just habit.;This feels like it undoes the syntax readability that was created with async/await, and replaces it with something that's a lot harder to read and a lot more prone to code golf.
428;May 29, 2019 2:49:59 pm;May 29, 2019 3:11:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559166599_5ceefe87b48755.00181732;;;nested vs both;5-10 years;Expert;JavaScript;;97;'number';"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;, 14;189;;;;;;;;;;;;;;;;Line 9;#;111;;;;;;;;;;;;;Line 5;);64;;;;;;;;;;;;;;;;;;;;;276;const kimchi = 'cabbage' |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> await # |> #.takeOne();;;;;;;;;;;;;;;;;The proposal;;pretty straight-forward;"Select another character for the proposal, not ""#"", as it is planned to be used for private members, maybe ""~"""
429;May 29, 2019 2:50:27 pm;May 29, 2019 3:06:33 pm;Complete;;;English;https://hacks.mozilla.org/;1559166626_5ceefea2df66f3.47566512;;;flattened vs proposal 1;3-5 years;Expert;TypeScript;;119;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";90;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar());43;;;;;;;;;;;;;;;;;;;;;299;"const cabbage = ""cabbage""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2)   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);very large if statements;The `else if` condition was pretty large The `return` with the second `pipe` on the next line also tripped me up.;;;;;;;;;;;Other - Write In (Required);|> it => new Jar(it);;;Pretty good, actually.;:+1:
431;May 29, 2019 3:02:04 pm;May 29, 2019 3:28:09 pm;Complete;;;English;;1559167324_5cef015ccad5d2.20023273;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;159;3;"""function""";;;;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;221;;;;;;;;;;;;;;;;Line 1;;137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;100;;;;;;a bowl of jogurt with berries;inconsistent style;;The different code style in line 12 where you need to look up what is passed to the arrow function. Also the long condition in line 10 did interrupt me because I was thinking about that you can shorten it up.;;;;;;;Pipeline with #;;;;I did not type it, as I am using me smartphone right now.;It's really cool that you are asking developers for their opinion. I hope I was able to help.
438;May 29, 2019 3:10:25 pm;May 29, 2019 3:33:44 pm;Complete;;;English;;1559167825_5cef035177afc1.53075037;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;205;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;81;;;;;;;Line 9;add a # to the end of the line;49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;328;"const kimchiJar = ""cabbage""     |> wash(#)     |> cut(#)     |> salt(#)     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir(#)     |> await ferment(#, 2);  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;"The large if statement took me a few re-reads to figure out. My first thought was ""that can be simplified!"".  The double-nested ternary ifs caused me trouble too. It's hard to tell which statements belong to which branch of the if statement. This isn't helped by the lack of the # in fillBowl, which threw me for a loop for a moment while I figured out the inputs & outputs. I'd suggest making the # q requirement to make it more explicit.";;;;;;;Pipeline with #;;;;It was much more natural than I expected. Since both characters require shift on my keyboard and are logically in the right places, it was like a roll from left-to-right on my keyboard.;I'd keep the #. The shorthand is confusing at first glance, because `salt` looks like a variable, but it's actually being called as a function.
439;May 29, 2019 3:10:51 pm;May 29, 2019 4:10:08 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559167851_5cef036b2ec1c9.56542002;;;flattened vs both;more than 10 years;Advanced;TypeScript;;107;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 6;saltyCabbageJar;670;;;;;;;Line 1;I have no idea what or where the bug is;210;;;;;;;;;;;;;Line 5;Add the second ) at the end;92;;;;;;;;;;;;;;;;;;;;;1906;No;;;;;;;;;;;;;;;;;Other - Write In (Required);I want something like this feature, but I have major problems with the concrete proposals ;I took this survey on a phone, so instead of typing it I gave up.  On a real keyboard it's probably fine?;It was really hard to answer survey questions without being allowed to see the relevant information at the same time.
443;May 29, 2019 3:17:11 pm;May 29, 2019 3:42:57 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559168231_5cef04e756e464.71070028;;;nested vs both;more than 10 years;Intermediate;Python;;89;Number;"""error""";;"add.call(null, 10);";;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;add ', 14' before closing parenthesis;128;;;;;;;;;;;;;;;;Line 5;Not sure;93;;;;;;;;;;;;;Line 5;add missing brace to end of line;94;;;;;;;;;;;;;;;;;;;;;671;This is very difficult on mobile...;;;;;;;;;;;;;;;;;The proposal;;Would be natural on a full keyboard (awful on Swype).;The # variant of the proposal appears cleaner and less prone to introduction of missing parentheticals.
446;May 29, 2019 3:22:08 pm;May 29, 2019 4:03:35 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559168528_5cef06106259c3.48409856;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;415;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;"add "",14""";109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"add "")""";63;;;;;;;;;;;;;;;;;;;;;243;"const kimchi = ""cabbage"" | > wash | > cut | > salt | > ( _ => new Jar(_)) | > ( _ => add(""spicy paste"", _)) | > stir | > ( _ => ferment(_,2)) | > await | > ( _ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;Keeping track of the return values. The conditional block inside the pipes switches the pace and forces you to check the identifiers at the top and constantly switch between lines.;;;;;;;;;;;Pipeline;;;;"Feels clunky on QWERTZ keyboard ( ""alt gr + < "" , ""shift + < ""). I would prefer it without the "">"".";
451;May 29, 2019 3:34:39 pm;May 29, 2019 3:49:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559169279_5cef08ff1041f8.38018716;;;nested vs proposal 2;0-2 years;Intermediate;TypeScript;;116;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;81;;;;;;;;;;;;;;;;Line 9;|> await #;68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;237;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;"the # is really ugly all these : && ? || > symbols really distract putting the pipeline inside of a pipelines is an ""interesting"" feature";;;;;;;;;;;it's not that bad, my hand needs to be in that area already for enter/right shift;it's interesting curious how performance will be compared to the status quo, and how ts/babel will port it to older browsers not entirely sure if I can think of a spot where this would be useful 
452;May 29, 2019 3:37:26 pm;May 29, 2019 3:51:56 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559169446_5cef09a6b1a7f5.97260413;;;nested vs both;more than 10 years;Expert;JavaScript;;69;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;, 10;104;;;;;;;;;;;;;;;;Line 9;await #;185;;;;;;;;;;;;;Line 5;(_ => new Jar(_));47;;;;;;;;;;;;;;;;;;;;;215;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;awkward;
453;May 29, 2019 3:37:50 pm;May 29, 2019 4:02:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559169470_5cef09be6cc4f5.15765878;;;nested vs both;3-5 years;Advanced;TypeScript;;131;number;"""object""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;Add second parameter to ferment();115;;;;;;;;;;;;;;;;Line 10;No idea. Also, should wash, cut and pound be wash(#), cut(#) and pound(#)?;304;;;;;;;;;;;;;Line 5;Add the missing parenthesis;35;;;;;;;;;;;;;;;;;;;;;299;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> x => new Jar(x) |> x => add(""spicy paste"", x) |> stir |> x => ferment(x, 2) |> x => x.takeOne() ;";;;;;;;;;;;;;;;;;The proposal;;fine;"The parentheses around the lambdas in the pipeline proposal should not be required if possible.  This makes it a lot easier to read.  Pipeline with # should require calling functions with the #.   e.g. ""cucumber"" |> wash(#) |> cut(#)"
454;May 29, 2019 3:42:18 pm;May 29, 2019 3:59:21 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559169738_5cef0aca903600.54532790;;;flattened vs proposal 1;3-5 years;Advanced;Python;;80;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"fix the typo, or better: reassign a shorter variable, e.g. ""jar = salt(jar)"", or compose ""salt(new Jar(cabbage))"", or refactor to create a fluent interface, e.g. ""jar = jar.salt()""";332;;;;;;;;;;;;;;;;;;;;;;Line 5;add the missing paren;46;;;;;;;;;;;;;;;;;;;;;173;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> ferment  |> await  |> (_ => _.takeOne())";a bowl of jogurt with berries;whitespace formating;;"The formatting of line 15 threw me; the chain of `_` conditionals on line 13 is also hard to follow. Anticipating where fetches are needed is difficult.";;;;;;;;;;;Current status quo;;;;No strong complaints.;
456;May 29, 2019 3:52:13 pm;May 29, 2019 4:16:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559170333_5cef0d1d2405e8.84317418;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;395;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;fix typo saltyCabbageJar;91;;;;;;;Line 9;await #;64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;377;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Mostly just making sure I didn't overlook a condition. This offended my sensibilities at first, but on second glance, it's fairly concise-ish.;;;;;;;Pipeline with #;;;;I mistyped a slash often.;
458;May 29, 2019 3:54:16 pm;May 29, 2019 4:16:10 pm;Complete;;;English;;1559170456_5cef0d98d252e7.46159820;;;nested vs flattened;more than 10 years;Advanced;TypeScript;;65;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;Very often;I like Pattern 2 better;;;;;;Line 10;), 14;307;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";278;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const pipe = (...fns) => fns.reduce((f, g) => (...args) => g(f(...args)));  const kimchiJar = await pipe(   wash,   cut,   salt,   a => new Jar(a),   jar => add(""spicy paste"", jar),   stir,   jar => ferment(jar, 2) );  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Lining up the Parens;If formatted correctly it's obvious what step happens when and you avoid type variables in between steps(and thus also memory manipulation). At worse you need to line up Parens;More developer error(spelling mistakes) possible;It's obvious what steps happen and when;I constantly use Pipe and Compose when possible so it's obvious to see how this could be refactored in either case to make it easier to maintain and less prone to typing errors;;;;;;
460;May 29, 2019 3:55:34 pm;May 29, 2019 4:07:54 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559170533_5cef0de5effe84.35464929;;;nested vs both;5-10 years;Expert;JavaScript;;89;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;Add a second argument for the number of days;102;;;;;;;;;;;;;;;;Line 10;use `.then()` with the promise;128;;;;;;;;;;;;;Line 5;Add missing closing paren;23;;;;;;;;;;;;;;;;;;;;;181;"const kimchiJar = await ferment(   stir (     new Jar (       add(""spicy paste"", salt(         cut (           wash(""cabbage"")         )       )     )   ) )  const kimchi = kimchiJar.takeOne()";;;;;;;;;;;;;;;;;The proposal;;I like it;
461;May 29, 2019 3:57:37 pm;May 29, 2019 4:57:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559170657_5cef0e61b68977.17927280;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;182;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar const;250;;;;;;;Line 9;Add await #;127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;485;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;The conditional statement was hard to read and having pipes inside it, did make it harder;;;;;;;Pipeline with #;;;;Natural;I use pipes everyday, this is really useful
468;May 29, 2019 4:18:44 pm;May 29, 2019 4:34:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559171924_5cef13540b47e0.07751275;;;nested vs both;more than 10 years;Expert;TypeScript;;65;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;add numdays parameter;134;;;;;;;;;;;;;;;;Line 9;Add # after await;216;;;;;;;;;;;;;Line 5;Add another ) at the end.;65;;;;;;;;;;;;;;;;;;;;;243;const spiiiicyKimchi = 'cabbage' |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();;;;;;;;;;;;;;;;;The proposal;;Fine, we use both | and > while programming already.;
470;May 29, 2019 4:22:43 pm;May 29, 2019 4:34:35 pm;Complete;;;English;;1559172163_5cef1443a08ea6.39846588;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;59;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 6;"""cabbage""";73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar());36;;;;;;;;;;;;;;;;;;;;;196;"const kimchiJar = ""cabbage"" |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await";a bowl of jogurt with berries;identifiers;;using _ as a function argument and as the return value of a function. It's almost as bad as using this sometimes except this is more expressive.;;;;;;;;;;;Pipeline with #;;;;A little weird;Pretty intuitive overall
475;May 29, 2019 4:40:53 pm;May 29, 2019 8:46:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559173252_5cef1884f00710.43968749;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;12414;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Frequently, including JSX/Mithril/Mixin composition, but it can be simplified or indented for a bit of clarity...;;;I like the proposal better;Line 10;), 2*7 // days to ferment (2 weeks);197;;;;;;;;;;;;;;;;Line 9;|> await #;137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;657;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> s => new Jar(s)   |> j => add(""spicy paste"", j)   |> stir   |> j => ferment(#, j)   |> await   |> j => j.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);the self-executing function when wine.ready && isDinner took me a few reads. Everything else was fine, the conditionals were bothersome but easy enough to follow.;"the self-executing function when wine.ready && isDinner took me a few reads. Everything else was fine, the conditionals were bothersome but easy enough to follow. I did have to mentally convert the line to add(""berries"", fillBowl(#.jogurt)) but that's mostly due to my unfamiliarity with this particular API/set of functions. I think with normal code, I'd follow it just fine, I certainly did with the await lines at the top, and the # use in conditionals. I actually really like # as a variable for this sort of syntax, but I'd prefer a syntax that takes functions without required wrapper paraentheses and uses # as a suggested variable (but you could change it, if it makes your code clearer)";;;;;;;Other - Write In (Required);I actually really like # as a variable for this sort of syntax, but I'd prefer a syntax that takes functions without required wrapper paraentheses and uses # as a suggested variable (but you could change it, if it makes your code clearer);;;Excellent. Best of all, Fira Code's ligatures made my |> look like an awesome triangle when I typed it in an IDE and though unsupported syntax, the default colouring looks pretty good. https://github.com/tonsky/FiraCode;"It took me a few reads to follow the non-standard use of #, I feel like # => new Jar(#) is more standard if more verbose. I do appreciate the brevity, but I'd only take it if I could do const x = # + 10; and then call x(2) and get 12 as a result. Meaning, I'm okay with the shorthand but I'd love to see it as a standard syntax if we stick with it."
476;May 29, 2019 4:45:23 pm;May 29, 2019 6:24:49 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559173522_5cef1992f0fd15.70780153;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;109;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;Add `14` as an argument to ferment -- also, define the function `wash`;523;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing closing parenthesis;3175;;;;;;;;;;;;;;;;;;;;;844;"const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> ((_) => new Jar(_))   |> ((_) => add('spicy paste', _))   |> stir   |> ((_) => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;"Scanned the general outline of the code, then skimmed the dense inner part, then read line-by-line.  My first reaction was beginning to think ""I bet this can be simplified in a way that nested promises can be flattened."" ";;;;;;;;;;;Pipeline;;;;A little odd, but I think readability is more important than writability.;This was fun! 
479;May 29, 2019 4:52:14 pm;May 29, 2019 5:22:38 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559173934_5cef1b2ece7726.02662837;;;nested vs proposal 2;3-5 years;Advanced;Python;;150;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;, 14;189;;;;;;;;;;;;;;;;Line 10;Move the await code to another line.;232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;229;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;Due to the length of the predicate in the conditional expression, it was hard to anticipate where the code was going. While you start off expecting line 8 to return a bool, you are then thrown into more nested conditionals that require attention to details because of the inconsistent return types for the if vs the else clause.;;;;;;;Pipeline with #;;;;It stood out because it isn't a common key combination. But should not taking much getting used to. The operator should also be easy to auto-fill by IDEs (since the only competitor operator is ||).;
480;May 29, 2019 5:13:39 pm;May 29, 2019 5:31:05 pm;Complete;;;English;https://newsblur.com/site/1529246/mozilla-hacks-the-web-developer-blog;1559175219_5cef20333ba7c1.21304889;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;123;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await fermet(saltyCabbageJar, 14);";127;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));59;;;;;;;;;;;;;;;;;;;;;327;"const cabbage = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;Parsing out the bits where we were checking for an object in the return from the endpoint and the properties. But the first time after I followed it.  I found it a bulky example (I'd had replaced things with helpers) but not too terribly hard to read.;;;;;;;;;;;Other - Write In (Required);pipeline with maybe a different operator?;;;Meh?;
482;May 29, 2019 5:20:22 pm;May 29, 2019 5:57:16 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559175622_5cef21c6a1cf53.46599531;;;nested vs both;more than 10 years;Expert;TypeScript;;1519;'number';"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;provide numdays;157;;;;;;;;;;;;;;;;Line 9;;121;;;;;;;;;;;;;Line 5;add a );23;;;;;;;;;;;;;;;;;;;;;185;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;;;The proposal;;;
483;May 29, 2019 5:34:07 pm;May 29, 2019 6:12:13 pm;Complete;;;English;;1559176446_5cef24fee2e735.74475185;;;nested vs both;more than 10 years;Advanced;TypeScript;;338;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 1;add a second argument to the ferment function;387;;;;;;;;;;;;;;;;Line 9;add a # to line 9;69;;;;;;;;;;;;;Line 5;add a ) to end of line 5;131;;;;;;;;;;;;;;;;;;;;;235;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"",  #) |> stir |> ferment(#, 2) |> await # |> #.takeOne";;;;;;;;;;;;;;;;;The proposal;;;
487;May 29, 2019 5:45:43 pm;May 29, 2019 6:33:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559177143_5cef27b74ab880.85021026;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;309;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));62;;;;;;;;;;;;;;;;;;;;;1378;"const kimchiJar = """"cabbage""   |> wash   |> cut   |> (_ => new Jar(_))   |> salt   |> (_ => add(_, ""spicy paste""))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;It took me some time to process the nested pipeline. Maybe because it is my first time seeing this kind of syntax. But after looking closely, it is quite understandable. The other thing is that I think `_` means parameter, right? If it is replaced with a more meaningful word, it would help me more.;;;;;397;;;;;;Pipeline;;;;I used lodash pipeline before so `|` is familiar to me. But `>` needs some time to get used to.;
489;May 29, 2019 5:55:58 pm;May 29, 2019 6:26:04 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559177758_5cef2a1e3a4702.76124689;;;flattened vs proposal 2;more than 10 years;Advanced;Java;;214;int;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;spell the parameter correctly;187;;;;;;;Line 5;not sure of the meaning of # in this context;113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;362;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Working with all the operators is not naturally intuitive. Also, I hate to force formatting like python, but navigating the whitespace and indentation was tricky.;;;;;;;Pipeline with #;;;;Easy;"I'm not sure the situation would arise much in the code I write to use this type of functionality. As I am using it in this experiment, though, it is quickly sinking in. The trick with JavaScript, in my mind, is that there are a lot of ""little"" details to learn and keep in mind which slow you down when you encounter ""unknown"" operators."
493;May 29, 2019 6:07:29 pm;May 29, 2019 6:32:42 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559178449_5cef2cd180f004.59987075;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;210;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";91;;;;;;;Line 8;await ferment(#, 14);531;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;315;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;Pipeline with #;;;;;
494;May 29, 2019 6:09:58 pm;May 29, 2019 6:39:30 pm;Complete;;;English;https://www.inoreader.com/;1559178598_5cef2d66050528.56458841;;;nested vs proposal 1;3-5 years;Intermediate;TypeScript;;100;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the status quo better;Line 10;provide second parameter for ferment;239;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"add "")"" at the end of line 5";137;;;;;;;;;;;;;;;;;;;;;485;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;too many logic operator;;;;;;;;;;;Pipeline;;;;|>;
496;May 29, 2019 6:10:52 pm;May 29, 2019 6:19:54 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559178652_5cef2d9c492819.24209721;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;105;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;;135;;;;;;;;;36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23;;;;;;;;;;;;;;;;;;;;;
502;May 29, 2019 6:26:15 pm;May 30, 2019 5:46:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559179575_5cef313764ace7.63411848;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;274;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;Fix typo whrn referencing saltyCabbageJar;532;;;;;;;;;;;;;;;;;;;;;;Line 5;Add missing close parenthesis;185;;;;;;;;;;;;;;;;;;;;;642;;a bowl of jogurt with berries;whitespace formating;;;;;;;33;;;;;;Pipeline;;;;OK;
503;May 29, 2019 6:28:09 pm;May 29, 2019 7:07:22 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559179689_5cef31a990ba61.70735713;;;nested vs proposal 1;3-5 years;Intermediate;Other - Write In (Required);php;193;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 1;Pass 14 as second parameter to ferment();159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) at the end of the line;100;;;;;;;;;;;;;;;;;;;;;260;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;Other - Write In (Required);Both;;;It feels good and came naturally. It might be easier to debug depending on the indentation.;
504;May 29, 2019 6:29:22 pm;May 29, 2019 6:51:56 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559179761_5cef31f1e892d6.34935632;;;nested vs proposal 2;5-10 years;Advanced;TypeScript;;82;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;Add a comma and a number of days (I'd put the number of days on the next line with this coding style);99;;;;;;;;;;;;;;;;Line 2;I would define the wash function;77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;194;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;Mixing boolean logic with ternary operators with the pipelining got confusing pretty quickly.  I had to build each piece up in my mind, give it a decent name, then move on to the next bit of logic and repeat.;;;;;;;Other - Write In (Required);Status quo, but pulling things out into variables (ideally consts) with good names.  Alternatively, chained functions (like used in Linq) can work very well in some domains.;;;Slow, but I'd get used to it eventually.  I'd imagine IDEs could be made to auto-add it after the first one, especially if you terminated the last one with a semicolon to let them know they could stop adding them.;"I prefer adding more variables to this pipeline idea.  It's easier to reason about, at least for me.  I also like Linq's style of chained function calls for many cases, though that's not always possible to do well.  Here's how I would write the pickle example: const jar = new Jar(wash(""cucumber"")); const preppedJar = salt(add(""water"", jar)); const pickles = await ferment(preppedJar, 2); const pickle = pickles.takeOne();  Or, using the chained methods idea: const jar = new Jar(""cucumber"".wash()); const pickles = await jar.addWater().addSalt().ferment(2); const pickle = pickles.takeOne();"
506;May 29, 2019 6:32:03 pm;May 29, 2019 6:57:41 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559179923_5cef32933d0649.15580583;;;flattened vs proposal 1;more than 10 years;Intermediate;C++;;128;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Add missing 'y' in 'saltyCabbageJar';134;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ')' at the end;55;;;;;;;;;;;;;;;;;;;;;248;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy taste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;Read top to bottom, read question, went back to see which 'is...' was true, read if statements, saw which one was taken, worked out result. Slow-down at the (jogurt => add(...)), as it seemed to apply to the jogurt but not the bowl.;;;;;;;;;;;Pipeline;;;;Fine;It would be great if there was a shortcut for the common `|> (_ => ...)`. Maybe `|=>` with an implied `_` could do the trick? E.g.: `... |> wash |=> new Jar(_) |=> add(..., _) |> salt ...`.
509;May 29, 2019 6:37:01 pm;May 29, 2019 7:08:10 pm;Complete;;;English;;1559180221_5cef33bd29a0b3.30048786;;;flattened vs both;3-5 years;Advanced;TypeScript;;104;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 5;Replace 'saltCabbageJar' with 'saltyCabbageJar';318;;;;;;;Line 10;Move the 'await' onto the same line as the 'ferment';213;;;;;;;;;;;;;Line 5;Add the missing paren at the end of the line;87;;;;;;;;;;;;;;;;;;;;;489;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar(#) 	|> add(""spicy paste"", #) 	|> stir 	|> await ferment(#, 2) 	|> takeOne";;;;;;;;;;;;;;;;;The proposal;;Felt right I guess;
514;May 29, 2019 6:44:03 pm;May 29, 2019 6:59:38 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559180642_5cef3562e13dd0.89774019;;;nested vs proposal 1;more than 10 years;Advanced;TypeScript;;113;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 11;You need to pass a second argument for `ferment`;147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing parenthesis;41;;;;;;;;;;;;;;;;;;;;;168;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_) => new Jar(_) |> (_) => add(""spicy paste"", _) |> stir |> await |> (_) => ferment(_, 2) |> (_) => _.takeOne()";a bowl of jogurt with berries;too many if statements;;"During the conditionals, having to track back up to the `const` assignments at the top, and the JSON returned from the `fetch` call, took some time. Basically the number of conditionals, coupled with the conditionals being kind of ""condition heavy"", involved a lot of back and forth during the mental evaluation.";;;;;;;;;;;Pipeline;;;;"At first I was just typing "">"" (old habits...), but I adjusted pretty quickly.  On my keyboard both ""|"" and "">"" are close together, so it seems fine. I guess one thing to consider (which you no doubt are) would be where those keys lie on different countries' keyboard layouts?";
516;May 29, 2019 6:50:25 pm;May 29, 2019 7:14:07 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559181025_5cef36e1d32009.33599674;;;flattened vs both;5-10 years;Beginner;Other - Write In (Required);c#;216;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 6;use the right variable name;236;;;;;;;Line 1;I could not see an error in the code;115;;;;;;;;;;;;;Line 5;add the missing close paren;34;;;;;;;;;;;;;;;;;;;;;122;;;;;;;;;;;;;;;;;;The Status quo;;Hardish, but not too bad, due to trying to use the right shift key. With practice, I could retrain myself to use the left shift, which would make it easy.;
518;May 29, 2019 6:52:54 pm;May 29, 2019 7:29:10 pm;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559181174_5cef3776beb807.47537203;;;nested vs proposal 1;3-5 years;Advanced;Other - Write In (Required);C#;128;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;argument 2 of ferment is not specified;244;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;closing bracket is missing;115;;;;;;;;;;;;;;;;;;;;;553;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;The last long `if` block is difficult to read. It is better to extract to a new function. But it seems not to be a language feature problem.;;;;;268;;;;;;Pipeline;;;;good;
521;May 29, 2019 7:03:37 pm;May 29, 2019 7:25:12 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559181817_5cef39f9817345.33286953;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;65;function;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;"add "", numdays"" before line 11";189;;;;;;;;;;;;;;;;Line 9;await in the beginning and make `takeOne` in next line.;174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;198;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;null;Other - Write In (Required);parentheses;"1. await fetch for the endpoint 2. Get `json` from the fetch response 3. Check `jogurt` and if it's ready and `isBreakfast` is true so keep checking the latter condition 4. Check `jogurt` is already `ready` so let's just check `isSnackTime` and it's `false` 5. so jumping to line 11; then check `wine` is `ready` and `isDinner` is false 6. jumping to line 13 for result  While reading line 12 and 13, I checked the parentheses is for which line";;;;;;;Pipeline;;;;Looks like OCaml. I would hope we can have this feature in JS so that I don't need to depend on lodash `pipe` anymore!;I'm not pretty sure if it's good to have `#` for the partial function. Maybe it's better to write other curried functions so that we might not need `#`. But, in the previous page of this survey, I didn't feel it's so hard to read `#` so maybe it's fine to introduce this feature ð¤
524;May 29, 2019 7:05:58 pm;May 29, 2019 7:35:24 pm;Complete;;;English;;1559181958_5cef3a86ca3d70.23825377;;;flattened vs proposal 2;more than 10 years;Beginner;Python;;146;Int;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"Add ""y"" to spell ""saltyCabbageJar""";159;;;;;;;Line 2;"Remove line with ""wash""";160;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321;"Const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> await  |> #.takeOne(); ";;;;;a bowl of jogurt with berries;too many if statements;;Complex if conditions and multiple ternary statements producing functions. ;;;;;;;Other - Write In (Required);I'd change # to _ to mimic Python but pipeline looks interesting. ;;;Hard on phone, so are # (and underbar _) too. Single character would've been better. ;I think it may be better to convert JS into an expression language, kind of like Rust where everything is an expression, but it's probably too late for that. 
525;May 29, 2019 7:12:43 pm;May 29, 2019 7:30:08 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559182363_5cef3c1b134456.29706588;;;flattened vs both;5-10 years;Intermediate;Other - Write In (Required);PHP;101;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";102;;;;;;;Line 9;await #;151;;;;;;;;;;;;;Line 5;(_ => new Jar(_));30;;;;;;;;;;;;;;;;;;;;;254;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;Unusual.;
526;May 29, 2019 7:19:33 pm;May 29, 2019 7:42:12 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559182772_5cef3db4efe617.31596886;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;129;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";207;;;;;;;Line 9;await #;150;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;382;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment (#, 2)   |> #.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;Mixing operators and tracking indentation;;;;;;;Pipeline with #;;;;A bit awkward;
529;May 29, 2019 7:33:32 pm;May 29, 2019 7:54:05 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559183612_5cef40fc3c0f65.16700259;;;flattened vs both;more than 10 years;Intermediate;JavaScript;;224;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;add y to 'salt';141;;;;;;;Line 10;;207;;;;;;;;;;;;;Line 5;add );47;;;;;;;;;;;;;;;;;;;;;311;"const kimchi = ""cabbage""  |> wash  |> cut   |> salt  |> new Jar(#)  |> add(""spicy paste"",#)  |> stir  |> ferment(#,2)  |> await #  |> #.taskeOne()";;;;;;;;;;;;;;;;;The proposal;;Bit of a stretch on the little finger. Took some practice;
531;May 29, 2019 7:46:41 pm;May 29, 2019 8:00:35 pm;Complete;;;English;https://planet.mozilla.org/;1559184401_5cef44116e32c0.00186806;;;nested vs flattened;5-10 years;Advanced;Other - Write In (Required);Swift;52;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 11;at a time argument;73;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"let washedCabbage = wash(""cabbage""); let cutCabbage = cut(washedCabbage); let saltedCabbage = salt(cutCabbage); let jar = new Jar(saltedCabbage); let spicyJar = add(""spicy paste"", jar); let stirredJar = stir(spicyJar); let kimchiKar = await ferment(stirredJar, 2); const kimchi = kimchiJar.takeOne()";;;;;;;;;;hard to find where brackets start and stop, so its hard to follow the order;fewer lines to read;too many lines for small substeps. too many temp variables with long names that you don't need to hold references to;easy to see each step;;;;;;;
532;May 29, 2019 7:47:02 pm;May 29, 2019 8:19:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559184422_5cef44263c8d55.15809305;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;139;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;I'd probably rename BOTH saltyCabbageJar and saltCabbageJar to saltedCabbageJar. ... or rewrite it all with pipelines!;201;;;;;;;;;;;;;;;;;;;;;;Line 5;I'd be putting even single arguments in parentheses, and I'd be putting a space between adjacent parentheses on each line. That said, I don't like wrapping the whole arrow function in parantheses because it feels like it WILL lead to a lot of extra parenthesis-book-keeping;145;;;;;;;;;;;;;;;;;;;;;574;"const kimchiJar = ""cabbage"" |>   |> wash   |> cut   |> salt   |> (     (preparedCabbageSlices) => new Jar(preparedCabbageSlices)   )   |>  (     (plainCabbageJar) => add(       plainCabbageJar,       ""spicy paste""     )   )   |> stir   |>  (     (unfermentedSpicedCabbageJar) => ferment(       unfermentedSpicedCabbageJar,       2     )   );  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;inconsistent style;;The single stage pipeline on 12 seemed like a bad idea to me, wouldn't want that to catch on, just abstracts a dirt simple function call.  The logic on line 13 could be reduced, and to me it would be more legible in reduced form.  Lines 14,15's sloppy and inconsistent indentation bugged me, also the miss-naming on line 15 (should be jogurtBowl or etc.).  Generally, I really don't like the use of _'s in place of arguments. A) lodash is a popular library and it's burnt it's place in to my eyes, I kept reading things like `_.json` as a lodash utility. B) I think well named arguments at each step of a pipeline/chain a very useful for clarifying what the previous step returned/what we're now operating on.;;;;;;;;;;;Pipeline;;;;I'd get used to it.;Really lookin' forward to pipelines, thanks for putting this together and all your work on polishing the spec!
536;May 29, 2019 7:49:39 pm;May 29, 2019 8:05:24 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559184579_5cef44c36df5e7.91640851;;;nested vs proposal 1;0-2 years;Intermediate;Other - Write In (Required);F#;66;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;", new Date());";180;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));69;;;;;;;;;;;;;;;;;;;;;140;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;"Unnamed lambda parameters. The lambda that passes its argument to a giant if statement should have been refactored into another function for more elegant pipelining. The ""return variable |> function |> function"" pattern is confusing.";;;;;;;;;;;Pipeline;;;;Not significantly harder than other operators.;Pipelines are a wonderful feature in languages like F# and Elixir and I'm very excited that JavaScript might add them.
537;May 29, 2019 7:50:30 pm;May 29, 2019 8:01:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559184630_5cef44f620f747.31709502;;;flattened vs both;0-2 years;Intermediate;JavaScript;;195;?;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;123;;;;;;;Line 5;dunno;75;;;;;;;;;;;;;Line 5;add parenthesis;27;;;;;;;;;;;;;;;;;;;;;63;tired of this;;;;;;;;;;;;;;;;;Other - Write In (Required);neither;fine ;
539;May 29, 2019 7:53:55 pm;May 29, 2019 8:24:21 pm;Complete;;;English;;1559184835_5cef45c3ba1fc3.00904159;;;flattened vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);C#;170;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"Replace ""saltCabbageJar"" with ""saltyCabbageJar""";225;;;;;;;Line 10;"Remove the ""#."", leaving ""takeOne()""";367;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;197;"const kicmhiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await";;;;;a bowl of jogurt with berries;too many if statements;;Process: Reading from top-down, filling in variable values by re-reading past lines if not remembered, noting the line numbers whenever backtracking.  Slow down: * Re-reading constants * Nested ternary operators * Frequent placeholder use;;;;;;;Pipeline with #;;;;"It worked well enough, though I may want an easier to press Shift key, or developer tools that automatically continues ""|>"" on pressing Enter after typing a line.";Debugging tools would significantly help, including breaking mid-pipeline and inspecting variables.
541;May 29, 2019 8:12:49 pm;May 29, 2019 8:49:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559185969_5cef4a31086930.35776280;;;flattened vs both;3-5 years;Advanced;TypeScript;;132;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;:s/saltCabbageJar/saltyCabbageJar;207;;;;;;;Line 9;:s/await/await #;417;;;;;;;;;;;;;Line 5;Append ) to the end;72;;;;;;;;;;;;;;;;;;;;;244;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> takeOne();";;;;;;;;;;;;;;;;;The proposal;;A little awkward, but it's not that many characters, it looks nice, and far more time is spend reading code than writing code so it's fine.;I've changed my mind about the proposal: I prefer the streamlined proposal.  Initially I was pretty much divided, but I decided that the streamlined proposal was too inelegant: Functional programming is all about generalisation, and the streamlined proposal introduces a new syntax for a special case of anonymous functions for one specific use case that doesn't generalise to anything else in the language. On the other hand, the F# syntax is more elegant in using anonymous functions, which already exists for purposes like these, at the expense of having a lot of bulk that impairs readability.  But then I realised that the pipeline operator can be thought of as defining an anonymous function, using the |> syntax instead of =>, where the # symbol refers to an implicit argument. That's not actually as inelegant as I thought it was. If there is a potential use case for implicit arguments in other parts of the language, then I'm sold.
543;May 29, 2019 8:22:29 pm;May 29, 2019 8:47:51 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559186549_5cef4c75847243.34943031;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;120;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));124;;;;;;;;;;;;;;;;;;;;;249;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);checking for properties before reading them;Checking properties before accessing sub properties made this is harder to read than anything. Other than that, it wasn't hard to read using the new operator. It doesn't do much so it doesn't take much to understand each usage. ;;;;;;;;;;;Pipeline;;;;The combo is unique enough. I don't expect I will ever get it confused with something else while typing, so that is good.;
548;May 29, 2019 8:32:34 pm;May 29, 2019 8:43:09 pm;Complete;;;English;https://feedly.com/i/entry/dPA20yDKj7MHgyIRjOX2OOk1cb+5A4xCS8qqqclHcbY=_16b04208c9a:3c5da0:5de7e37;1559187154_5cef4ed2caa413.64990987;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;41;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;Add `, 14`;68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add `)` at the end;21;;;;;;;;;;;;;;;;;;;;;118;"const kimchi = ""cabbage""   |> wash   |> cut   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;the outer pipeline was straightforward. while reading the function which was the last stage of the outer pipeline I had to refer back to the mealtime variables as well as to the comment explaining what the fetch returned.;;;;;;;;;;;Pipeline;;;;|> |> |< |> |> | > |> |> |>;"I don't understand what ""pipeline with #"" is"
549;May 29, 2019 8:37:24 pm;May 29, 2019 8:59:15 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559187444_5cef4ff426ec87.21464941;;;flattened vs both;more than 10 years;Advanced;JavaScript;;107;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;92;;;;;;;Line 9;add # after await;272;;;;;;;;;;;;;Line 5;add ) to the end of the line;60;;;;;;;;;;;;;;;;;;;;;218;"const kimchi = ""cabbage""  |> wash(#)  |> cut(#)  |> salt(#)  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir(#)  |> await ferment(#, 2)  |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;I got used to it. It's not that far off typing =>;I prefer to make it explicit how the variable is being passed in. So, for the proposal with #, have # explicitly on every line, rather than leaving it out when it can be inferred.
551;May 29, 2019 8:46:51 pm;May 29, 2019 9:35:23 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559188010_5cef522acd9109.81856290;;;nested vs both;5-10 years;Advanced;C++;;86;;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;Add the number of days to ferment (e.g. , 14);133;;;;;;;;;;;;;;;;Line 9;Change it to await #;198;;;;;;;;;;;;;Line 5;Missing closing ')';21;;;;;;;;;;;;;;;;;;;;;2004;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;Fine;
557;May 29, 2019 8:50:50 pm;May 29, 2019 9:29:56 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559188250_5cef531ac9d034.92679857;;;nested vs both;more than 10 years;Expert;JavaScript;;90;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;Add `, 14` before it. (P.S. washing is not part of the instructions, so I quibble at line 6 too.);172;;;;;;;;;;;;;;;;Line 9;At a guess, `await` should read `await #`;109;;;;;;;;;;;;;Line 5;Add `)` to the end of the line;28;;;;;;;;;;;;;;;;;;;;;605;"const kimchiJar = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar(#) 	|> add(""spicy paste"", #) 	|> stir 	|> ferment(#, 2);  const kimchi = kimchiJar.takeOne();  // Yep, I'm definitely keeping it as two variables. I'm not the sort of guy who buys a jar of pickles, takes one out, and throws the rest away. ð";;;;;;;;;;;;;;;;;The proposal;;Wonky. Difficult key combination placement (standard en-US layout), and I find it takes several times as long to type those two characters as to type just about any other two letters I type, strongly encouraging substantial movement of the hand. I typed a backslash instead of a pipe most of the first few times. Also because it's a start-of-line continuation character it requires vim syntax indent changes to know that it's not the start of a new statement.;I tend to view the whole pattern that makes you want to use the pipeline operator as a code smell. I have a general preference for adding methods to a prototype and using chaining, rather than a bunch of standalone functions and POJOs. (Nonetheless, I do like the dead code removal possibilities of that latter approach.) Naturally this is messy as soon as you get to types you don't control. I don't know yet, there *could* be places where I'd end up using the pipeline operator, and even switching from methods to functions in some places. I far prefer how it is in Rust, where the dot operator involves trait resolution, so that you never need to get fed up with being able to use `x.map(f)` on arrays but `map(f, x)`âor is it `map(x, f)`?âon other types. Unfortunately, something like that isn't feasible in JavaScript, and this pipeline operator is the closest you feasibly get. Still, I'm imagining a hybrid of the two where the pipeline operator would default to passing the left hand side in, not as an argument, but as `this`, so that `foo |> bar` would be a syntax error, and `foo |> bar()` would be equivalent to `bar.call(foo)`. That'd make `foo |> map(x => x + 1)` nicer and more obvious, but it might fight against other cases. Eh, it's a vague thought from someone who has been vaguely aware of the pipeline operator but hasn't thought too much about it.  I'm a tad concerned about order of evaluation with this pipeline operator. Looking at pipeline syntax, I'd expect it to evaluate each pipeline step in order, but the obvious desugaring that people will explain it with, and which BublÃ© will use, would not work that way at all. Then Babel users will get a verbose (and slower) expansion, for strict accuracy.
559;May 29, 2019 8:59:00 pm;May 29, 2019 9:17:24 pm;Complete;;;English;;1559188739_5cef5503e675b3.40430867;;;nested vs both;more than 10 years;Advanced;JavaScript;;141;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 6;remove the wash;176;;;;;;;;;;;;;;;;Line 2;Remove the line;31;;;;;;;;;;;;;Line 2;Remove the line;28;;;;;;;;;;;;;;;;;;;;;577;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(2, _)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;;
561;May 29, 2019 9:02:08 pm;May 29, 2019 9:21:32 pm;Complete;;;English;;1559188928_5cef55c0ae6199.35967382;;;nested vs both;more than 10 years;Intermediate;Java;;117;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;), 2;130;;;;;;;;;;;;;;;;Line 7;|> salt(#);88;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));78;;;;;;;;;;;;;;;;;;;;;275;"const kimchi = ""cabbage"" |> wash |> cut      |> salt |> new Jar(#) |> add(""spicy taste"", #)     |> stir |> ferment(2, #) |> await |> #.takeOne();";;;;;;;;;;;;;;;;;Other - Write In (Required);Proposas seems intersting and reasonably intuitive and easy to read.;"Not dramatically convenient. A ""->>"" or something along those lines would've been more comfortable."; Not a fan of the linebreak-separated sequences in the examples. 
565;May 29, 2019 9:15:46 pm;May 29, 2019 10:04:52 pm;Complete;;;English;;1559189746_5cef58f2cfa905.50968879;;;nested vs proposal 2;more than 10 years;Beginner;Other - Write In (Required);scala;145;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";252;;;;;;;;;;;;;;;;Line 10;|> takeOne(#);157;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;443;"const pickle = ""cabbage"" |> wash |> cut |> salt  |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;several levels of ternary if statements;;;;;;;Pipeline with #;;;;at least they both need shift, so passable;await # was counterintuitive, expected same argument omitting syntax as |> salt
567;May 29, 2019 9:24:42 pm;May 29, 2019 9:36:48 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559190282_5cef5b0ac2e608.38037373;;;nested vs both;more than 10 years;Advanced;Other - Write In (Required);Go;94;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;, 14;90;;;;;;;;;;;;;;;;Line 5;|> new Jar;171;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));20;;;;;;;;;;;;;;;;;;;;;127;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;;
572;May 29, 2019 9:40:27 pm;May 29, 2019 10:11:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559191227_5cef5ebbc3af88.91639216;;;nested vs both;5-10 years;Advanced;JavaScript;;102;Number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 14;635;;;;;;;;;;;;;;;;Line 9;await #;170;;;;;;;;;;;;;Line 5;(_ => new Jar(_));45;;;;;;;;;;;;;;;;;;;;;639;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add ('spicy paste', #) |> stir(#) |> ferment(#,2) |> await # |> #.getOne()";;;;;;;;;;;;;;;;;The proposal;;good, but will take time getting used to press shift with for the pipe operator;
577;May 29, 2019 9:51:49 pm;May 29, 2019 10:13:25 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559191909_5cef6165112c82.70718716;;;nested vs both;5-10 years;Advanced;Python;;90;Float;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;), 14;181;;;;;;;;;;;;;;;;Line 5;It's not clear whether # is supported, if not, like this: (_ => new Jar(_));258;;;;;;;;;;;;;Line 5;(_ => new Jar(_));55;;;;;;;;;;;;;;;;;;;;;305;"const kimshJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2);  const kimchi = kimchJar.takeOne();";;;;;;;;;;;;;;;;;The proposal;;I was on mobile, but on desktop I think it would be fine.;This is a cool feature, one that I have been wishing for in Python, Perl, and other languages I write in. I much prefer pipes to Python's list comprehensions. I also prefer Pipes to Perl 5's grey, map functions. I like how bash pipes list functions in the order that the data passes through them, rather than in reverse order like in other constructs.
578;May 29, 2019 9:53:45 pm;May 29, 2019 10:12:41 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559192025_5cef61d9c4e4c7.04994764;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;89;integer;"""function""";"add.bind(null, 10);";;;;;;;;Never;Sometimes;I like Pattern 2 better;;;;;;Line 11;",14);";126;;;;;;;Line 6;"await ferment(saltyCabbageJar, 14);";67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Ideally I would love to pipe the result of one function to the next, FP style.;;;;;;;;;;It would be better if read from left to right or top to bottom. The first function is encapsulated into the next step which in turn is encapsulated by the next, unnatural to read.;One liner basically.;More verbose, too many temporary variables just for the sake of separating all the operations.;Reads from top to bottom, more readable.;Fun survey.;;;;;;
582;May 29, 2019 10:03:15 pm;May 29, 2019 10:14:31 pm;Complete;;;English;https://theoldreader.com/posts/all;1559192595_5cef6413cb0a60.31447742;;;flattened vs proposal 2;more than 10 years;Advanced;Python;;89;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;fix the variable's name;123;;;;;;;Line 10;;76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;65;;;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;Pipeline;;;;;
583;May 29, 2019 10:09:02 pm;May 29, 2019 10:26:30 pm;Complete;;;English;;1559192942_5cef656e963954.47148692;;;nested vs both;more than 10 years;Advanced;JavaScript;;181;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 11;add numdays argument;152;;;;;;;;;;;;;;;;;;125;;;;;;;;;;;;;Line 5;add closing paren;29;;;;;;;;;;;;;;;;;;;;;268;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;;;The proposal;;pretty easy and intuitive;
587;May 29, 2019 10:28:12 pm;May 29, 2019 11:06:34 pm;Complete;;;English;;1559194092_5cef69ec70bb65.04698223;;;nested vs proposal 1;more than 10 years;Expert;TypeScript;;57;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;259;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));1006;;;;;;;;;;;;;;;;;;;;;135;;a bowl of jogurt with berries;inconsistent style;;Mixed style: pipeline vs if ..else. Would be great to have some kind of pipeline support for the if...else branches ;;;;;8;;;;;;Pipeline;;;;Ok, on a German keyboard;Don't like the smart mix proposal (4), I think it's not intuitive. IMHO readability/understandability will suffer as a consequence
595;May 29, 2019 11:04:23 pm;May 29, 2019 11:34:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559196263_5cef7267727645.02847445;;;nested vs both;3-5 years;Expert;JavaScript;;106;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;Add numdays to the arguments of ferment;380;;;;;;;;;;;;;;;;Line 10;# can only be used to pass as an argument?;181;;;;;;;;;;;;;Line 5;Add the missing ')' to the end of line 5;72;;;;;;;;;;;;;;;;;;;;;477;"// on phone const kimchi = ""cabbage"" |> wash |> cut |> salt  |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;;;The proposal;;"Same as Elixir ;). I would prefer a single character, but I spend more time reading than I do writing code and the |> has a clean look. ";Hope this lands! I actually thing the (_ => func(_, 'other')) is more readable, but all the brackets would be so tedious to write. 
597;May 29, 2019 11:26:04 pm;May 29, 2019 11:52:31 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559197564_5cef777c6eefa2.92898982;;;flattened vs proposal 2;5-10 years;Advanced;Java;;178;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar to saltyCabbageJar;111;;;;;;;Line 9;guessing, await should be await #;127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;184;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment  (#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Mixing the pipeline operators with the if statement shorthand operators meant I had to slow down to ensure I didn't mix something up. Also having nested if statements using only the shorthand operators is always hard to scan.;;;;;;;Pipeline with #;;;;Comes fairly naturally yet unique enough to stand out from other operators.;Nice proposal as the alternatives are verbose with many variables or have several layers of  brackets.  However I'm not sure how frequently I'd actually use this as its not self-explanatory to newer coders and I rarely encounter situations that require more than two levels.  I don't frequently write code like this but the proposal might make it so it's more worthwhile to attempt it since it would no longer be so verbose or ugly 
598;May 29, 2019 11:34:56 pm;May 29, 2019 11:41:40 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559198096_5cef799002fa08.51449631;;;nested vs proposal 1;0-2 years;Intermediate;Java;;175;;;;;;;;;;;;;;;;;;;;;18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7;;;;;;;;;;;;;;;;;;;;;8;;;;;;;;;;;;;;;;;;;;;
601;May 29, 2019 11:54:42 pm;May 30, 2019 12:07:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559199282_5cef7e320f9f21.37237615;;;nested vs proposal 2;3-5 years;Intermediate;Python;;83;int;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 1;Add numdays parameter on line 11;65;;;;;;;;;;;;;;;;Line 2;Adjust return type of wash;148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;190;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> fermet(#, 2)     |> await #     |> #.takeOne";;;;;a bowl of jogurt with berries;too many if statements;;Going up and down to look at the variables evaluated in the conditions.;;;;;;;Pipeline with #;;;;function;
606;May 30, 2019 12:10:08 am;May 30, 2019 12:31:49 am;Complete;;;English;;1559200208_5cef81d07d9b73.55750192;;;flattened vs proposal 1;5-10 years;Intermediate;JavaScript;;67;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 1;Define the wash function;234;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis;76;;;;;;;;;;;;;;;;;;;;;87;Pfft nobody has time for this;a bowl of jogurt with berries;density of operators;;Cross referencing the constant booleans caused backward scanning.  Not knowing what the question was required navigating back to the code to manually issue through it.  Dense unfamiliar operators allowed me down.;;;;;;;;;;;Other - Write In (Required);Pipelines may simplify some code but the ugly function syntax feels unnecessarily and makes it harder to read, particularly with all the underscores.;;;Irritating on a phone but fine on an English keyboard;I'm not convinced adding another syntax to do something we can always do makes the language more readable. Every developer will need to understand multiple syntaxes for any problem this proposal address, making the language more cumbersome to work with overall.
609;May 30, 2019 12:14:33 am;May 30, 2019 12:41:03 am;Complete;;;English;;1559200473_5cef82d947b2e9.18341528;;;nested vs proposal 2;0-2 years;Beginner;TypeScript;;427;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;add 2 days;169;;;;;;;;;;;;;;;;Line 9;add #;141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;274;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;conditional operator;;;;;;;Pipeline with #;;;;fine;
616;May 30, 2019 12:26:39 am;May 30, 2019 12:30:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559201199_5cef85af186128.62226702;;;flattened vs both;0-2 years;Beginner;JavaScript;;85;function;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 7;;45;;;;;;;Line 9;;22;;;;;;;;;;;;;;;5;;;;;;;;;;;;;;;;;;;;;2;;;;;;;;;;;;;;;;;;;;;
618;May 30, 2019 12:21:41 am;May 30, 2019 12:54:47 am;Complete;;;English;;1559200900_5cef8484deea17.84329136;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;86;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;pass saltyCabbageJar to ferment;97;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) after Jar(_);369;;;;;;;;;;;;;;;;;;;;;206;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;looking for function definitions long conditionals;;;;;23;;;;;;Pipeline with #;;;;Just as easy as learning =>  Not in my muscle memory, but feels like it wouldn't take long;
620;May 30, 2019 12:32:20 am;May 30, 2019 1:00:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559201540_5cef8704731eb3.30397526;;;nested vs proposal 2;5-10 years;Advanced;Other - Write In (Required);PHP;203;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;Add second parameter numberDays to ferment;179;;;;;;;;;;;;;;;;Line 9;Add # after await;212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;478;"Const kimchi = wash('cabbage') |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;The trinary operator with nested pipelines was the hardest part to reason with;;;;;;;Pipeline with #;;;;Not too much work;
625;May 30, 2019 12:41:46 am;May 30, 2019 1:09:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559202105_5cef8939e51a17.92980968;;;nested vs proposal 2;3-5 years;Beginner;Java;;283;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;by adding numdays for ferment promise;201;;;;;;;;;;;;;;;;Line 9;await is a keyword, possibly reuires hash reference;159;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;274;"const kimchiJar = ""cabage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Resolution of first if condition is fairly long and looking into wine part resolution is particularly unnatural;;;;;;;Pipeline with #;;;;new, but easy to get used to;
627;May 30, 2019 12:54:22 am;May 30, 2019 1:49:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559202862_5cef8c2e749c22.35173092;;;flattened vs proposal 1;more than 10 years;Advanced;Java;;67;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;169;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ) in line 5;80;;;;;;;;;;;;;;;;;;;;;287;"const kimchi = ""cabbage""    |> wash    |> cut    |> salt    |> (_ => Jar(_))    |> (_ => add(""spicy paste"", _))    |> stir    |> (_ => ferment(_, 2))    |> (_ => _.takeOne());";a bowl of jogurt with berries;identifiers;;First I read the code to get the overall meaning of it was trying to accomplish, then I read it again paying special attention to the if statements. What caused me to slow down the most was having to go back to check the meaning of _ in the current context.;;;;;;;;;;;Current status quo;;;;Normal.;I don't like the _. It can be replaced with a regular name but then it would be almost like the current status quo. I like the idea but think the syntax needs a little refining. Unfortunately I don't have any ideias on who to improve the syntax.
629;May 30, 2019 1:02:32 am;May 30, 2019 1:33:39 am;Complete;;;English;;1559203351_5cef8e17f20509.82528028;;;nested vs flattened;more than 10 years;Expert;JavaScript;;130;Number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 1 better;;;;;;Line 10;, 14;210;;;;;;;Line 6;await ferment(saltyCabbageJar, 14);191;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;It's not as flexible as a traditional imperative style to change steps in between the recipe. As a one liner it can be challenging to know the intention of that line right away - you really have to read through all function calls to understand what's going on;"I think I'm used already, but I wouldn't say it's easy to read. Some of the examples split the onliner into multiple lines to make it easier to read; that's a sing that proof it's not that easy. In the other hand I like it that I have just the two parties involved in the highlighted as const declarations: the jar and the picked item";"Verbosity sometimes can work against us; in this case the final goal is to pick an item from the jar. All the extra const declarations pollute the scope and may distract a bit";"I code a lot with Python, it has its own ethos and in this case ""explicit is better than implicit"" could be applied here. At the cost of verbosity, all the steps of the recipe are explicit, in order and there's not much about to think";Semi-colons? We don't need them and I do think next versions could embrace this and solve some of the caveats at the language level. This can remove the responsibility of the user of the language to keep in mind all possible corner cases. In my daily job it's kinda hardwired which programming styles to avoid, but Juniors get into these traps at least once;;;;;;
630;May 30, 2019 1:02:30 am;May 30, 2019 1:18:23 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559203350_5cef8e165a8b31.01970416;;;flattened vs proposal 1;more than 10 years;Advanced;Other - Write In (Required);PHP;49;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"change variable from ""saltCabbageJar"" to ""saltyCabbageJar""";168;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing parenthesis at the end of the line;48;;;;;;;;;;;;;;;;;;;;;194;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;;;Current status quo;;;;;The big advantage of the current status quo is that it names the intermediate steps, which helps making the code more readable.
632;May 30, 2019 1:18:06 am;May 30, 2019 2:18:03 am;Complete;;;English;https://www.inoreader.com/;1559204286_5cef91be2ad603.45733821;;;nested vs proposal 1;more than 10 years;Intermediate;JavaScript;;202;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;Add 14 to ferment() as the 2nd argument.;329;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));132;;;;;;;;;;;;;;;;;;;;;549;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy taste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;The Status quo;;No problem.;"The status quo version is easier for me to read if indented like this: const pickleJar = await ferment(   salt(add(       [""water""],       new Jar(wash(""cucumber""), 10)   )),   2 ); const pickle = pickleJar.takeOne();"
633;May 30, 2019 1:26:32 am;May 30, 2019 1:51:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559204791_5cef93b7eeb694.74249981;;;flattened vs proposal 2;5-10 years;Expert;TypeScript;;131;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 5;fix the typo in the assigned variable name;161;;;;;;;;;120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;72;;;;;;a bowl of jogurt with berries;identifiers;;I lost track of intermediary results, as early as the second pipe, because of the lack of intermediary named variables.  The first condition could obviously be simplified.  The # references slowed down reading, but it's actually the lack of a hash on a line that felt more confusing, like the await on it's own. I get it, but it's not intuitive.  Why start the pipeline with the endpoint string? It didn't make sense that it would be the start of the pipeline.;;;;;;;;;The Status quo;;Sorry, didn't try, I'm on my phone, but I assume it wouldn't be any more difficult than typing =>;I get the idea, but if people really want to write code like this, they should use a compile-to-JavaScript language like elm... Let's keep JavaScript looking like JavaScript.
636;May 30, 2019 1:29:11 am;May 30, 2019 1:59:57 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559204951_5cef9457bed9e0.03115345;;;nested vs flattened;3-5 years;Advanced;JavaScript;;129;number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Almost never;I like Pattern 1 better;;;;;;Line 11;pass the numdays argument too;300;;;;;;;Line 6;rename saltyCabbageJar to saltyCabbageJar;66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbageJar = new Jar(salt(cut(wash(""cabbage"")));  const kimchiJar = await ferment(   stir(add(""spicy paste"", cabbageJar)),   2 );  const kimchi = kimchiJar.takeOne();";;;;;;;;;;The nesting can be hard to see, newlines would help a lot though.;Everything is in its placed no need to read back and forth.;Very hard to read where variables are used, need to jump around while reading.;None.;;;;;;;
637;May 30, 2019 1:42:45 am;May 30, 2019 1:50:23 am;Complete;;;English;;1559205765_5cef97852da6c8.12081735;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;17;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Change to saltyCabbageJar;37;;;;;;;Line 9;Should it be await #?;81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;89;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2)";;;;;a bowl of jogurt with berries;too many if statements;;Just haven't had time to get used to the syntax;;;;;;;;;The proposal;;Fine!;I prefer the -> operator from ReasonML/BuckleScript, which could in most cases call a function with multiple arguments without the use of a placeholder argument
642;May 30, 2019 1:57:39 am;May 30, 2019 2:16:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559206659_5cef9b03786ae1.84761209;;;nested vs both;3-5 years;Advanced;JavaScript;;88;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Other - Write In (Required);we use `compose` and `pipe` functions;;I like the pipeline with the # better;;Line 11;add `, 1`;129;;;;;;;;;;;;;;;;Line 5;`new Jar`;137;;;;;;;;;;;;;Line 5;add `)` at the end;50;;;;;;;;;;;;;;;;;;;;;453;const kimchi = wash('cabbage') |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;I'm used to it from Elixir and Elm, so I like it :);
645;May 30, 2019 1:52:17 am;May 30, 2019 2:16:35 am;Complete;;;English;;1559206337_5cef99c1d3ab30.49774221;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;34;number;;"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the proposal better;Line 11;Add a numdays;140;;;;;;;;;;;;;;;;Line 9;await #;57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;153;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Parsing # is hard, especially as the value changes  between statements.;;;;;;;;;The proposal;;Not the best. It's quite right hand heavy compared to other JS operators.;The # is very unaesthetically pleasing. Piping to await is confusing
646;May 30, 2019 2:00:40 am;May 30, 2019 2:32:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559206840_5cef9bb878ddc0.58840230;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;130;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Replace 'salt' with 'salty';151;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ')' at the end of the line;84;;;;;;;;;;;;;;;;;;;;;256;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> ( _ => new Jar( _ ) )     |> ( _ => add( ""spicy paste"", _ )     |> stir     |> ferment     |> await     |> ( _ => _.takeOne() )";a bowl of jogurt with berries;inconsistent style;;"The pipeline chain is too long. I have to remember at each start of line what the argument is. This creates cognitive load. If I make a mistake, I have to start from the beginning.  '|> (jogurt => add(""berries"", jogurt));' should be on the previous line.";;;;;;;;;;;;;The Status quo;;Troublesome. My biggest regret on an AZERTY keyboard.;"I have been using the pipeline operator for months with Babel. It has been a blessing. F# is my ideal in terms of syntax.  Then, why did I write I preferred the status quo? Let us look at it. You can notice it is neatly separated by a vertical line of '='. In other words, the left part is _what I want to do_, the right one _how I do it_. The latter only has to be written and read once.  Therefore, I would either  1. name the argument instead of using '_'. However, it decreases legibility. Too much words and symbols. 2. My preferred solution: I use another Babel plugin: https://github.com/rung-tools/babel-plugin-holes They go hand-in-hand like bread and butter.  The second code becomes:  const pickle = ""cucumber""     |> wash     |> new Jar(_)     |> add( [""water""], _)     |> salt     |> fertment( _, 2 )     |> await     |> _.takeOne  Finally, I know '_' is used by some libraries. https://github.com/js-choi/proposal-smart-pipelines proposes alternative symbols."
647;May 30, 2019 2:07:30 am;May 30, 2019 3:13:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559207250_5cef9d52b182d9.68000619;;;nested vs flattened;5-10 years;Advanced;JavaScript;;1638;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 10;provide 14 days as second argument;203;;;;;;;Line 6;s/salt/salty;70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbage = salt(cut(wash('cabbage'))) const spicyCabbageJar = stir(add('spicy paste', new Jar(cabbage))); const kimchiJar = await ferment(spicyCabbageJar, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;To many nested functions, hard to parse visually.;Succinct. Less opportunity for bad names.;Very verbose due to useless intermediate names. Longer to read. ;Very explicit. Reading is very linear. Can easily follow usage of previously declared variable being passed into next line.;;;;;;;
649;May 30, 2019 2:11:36 am;May 31, 2019 1:54:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559207496_5cef9e4847d729.45985621;;;nested vs both;5-10 years;Advanced;JavaScript;;200;;"""object""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 2;run Salt in line 4, push everything else down;179;;;;;;;;;;;;;;;;Line 10;remove line 10;785;;;;;;;;;;;;;Line 5;ad parentheses;32115;;;;;;;;;;;;;;;;;;;;;51361;"const kimchijar = ""cabbage""  |> wash |> cut  |> salt  |> new Jar(#) |> add(""spice"", #) |> ferment(#,2) |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;"I think it is the same effort a typing '(""'.";I like the # syntax. I hope it becomes the standard.
650;May 30, 2019 2:13:41 am;May 30, 2019 2:25:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559207621_5cef9ec57d1e06.86966795;;;nested vs both;5-10 years;Advanced;JavaScript;;66;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;Add a numdays arg;88;;;;;;;;;;;;;;;;Line 9;await #;184;;;;;;;;;;;;;Line 5;(_ => new Jar(_));34;;;;;;;;;;;;;;;;;;;;;144;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not as bad as I'd thought it would be. I think I'd get used to it.;Thank you for all your hard work
652;May 30, 2019 2:12:41 am;May 30, 2019 2:55:25 am;Complete;;;English;;1559207561_5cef9e8955d617.70658036;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;289;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;append `, 14` to line 10;174;;;;;;;;;;;;;;;;Line 9;change line 9 to `|> await #`;188;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;272;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Line 12 caused me to slowdown quite a lot because of the change in style. Line 10 having two |>'s on the same line feels weird but didn't slow me down. Using the conditional operator and inline function feels jarring because it's a lower level of abstraction than having a function such as `serveFermentedFood`;;;;;;;;;The proposal;;Feels OK. (I am using a mac keyboard). Hopefully IDEs will autoinput the |> on a new line when you press enter.;The `await #` threw me. Why not just `await`?
653;May 30, 2019 2:15:52 am;May 30, 2019 2:29:28 am;Complete;;;English;;1559207752_5cef9f488a0243.56060455;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;188;"""function""";"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);114;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));57;;;;;;;;;;;;;;;;;;;;;77;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;;;;;The Status quo;;;
654;May 30, 2019 2:16:45 am;May 30, 2019 2:51:18 am;Complete;;;English;;1559207804_5cef9f7ce2c6f4.93516866;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;285;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;replacing saltCabbageJar with saltyCabbageJar;137;;;;;;;Line 2;Remove the line;137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;485;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Nested ternary operators are not immediate.;;;;;;;;;The proposal;;I'm using Italian keyboard, so it isn't as trivial as one would think. Besides, many ECMAscript symbols aren't trivial on Italian keyboard (` in primis);
656;May 30, 2019 2:20:24 am;May 30, 2019 2:37:44 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559208024_5cefa058171b55.33868532;;;flattened vs both;5-10 years;Expert;JavaScript;;108;3;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;fix the typo - saltCabbageJar => saltyCabbageJar;125;;;;;;;Line 5;rename to new Jar;189;;;;;;;;;;;;;Line 5;add the missing trailing );46;;;;;;;;;;;;;;;;;;;;;283;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_, => add('spicy paste', _))   |> stir;;;;;;;;;;;;;;;Pipeline;;;;simple, straight forward.   ;not a fan of # as its also being used in private class members.  less symbols the better. |> is a nice additional.  # is also a less easy to type imo  # feels less explicit
658;May 30, 2019 2:30:05 am;May 30, 2019 6:23:57 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559208605_5cefa29db43c61.61299125;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;1620;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 11;"add 2nd parameter 2 to ferment function ... and wash is also missing ;-) create the wash with the following prototype function (string) // -> returns string";347;;;;;;;Line 6;"fix the typo of the first parameter... wash is still missing ;-) from the signatures.";94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;var preparedCabbage = [wash, cut, salt].reduce((accumulator, f) => f(accumulator)) var jar = new Jar(preparedCabbage) var kimchiJar = await ferment(stir(jar)) var kimchi = kimchiJar.takeOne();;;;;;;;;;To much level of intricated calls on one line. I would maybe mix synchronous and asynchronous on one line.;visual clutter is quite minimal except for parentesis. The first call could be broken on 3 line yet being the same call logic as folowing: const pickleJar = await ferment(salt(add('water',                                                                  new Jar(wash(cucumber)))),                                                     2);Lots of cross reading to find where the reference parameter is created.;every line is one operation. easy to follow the flow.;;;;;;;
659;May 30, 2019 2:31:54 am;May 30, 2019 3:09:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559208714_5cefa30a1d6a30.25517069;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;110;number;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Depends if the team has a functional approach to programming.;;;I like the proposal better;Line 11;Indent and add 14, the a line break;158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Remove first paranthesis;71;;;;;;;;;;;;;;;;;;;;;398;const kimchJar = 'cabbage'   |> wash,   |> cut   |> salt   |> _ => new Jar(_),   |> _ => add('spicy taste', _)   |> stir  const kimchi = await kimchiJar.takeOne();a bowl of jogurt with berries;inconsistent style;;What slowed me down the most was looking for the values in outside of the pipeline in combination with complex if statements. Having a line break in the middle of the pipeline within the if else block didn't help. Would have been easier to read if the pipe operators continued on the same line or if there where only one operator on each line.;;;;;;;;;;;;;The proposal;;Felt nice.;This examples would bee a lot easier to read and reason about if they where curried.
660;May 30, 2019 2:32:29 am;May 30, 2019 2:41:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559208749_5cefa32dbc8123.11170027;;;nested vs both;more than 10 years;Intermediate;Other - Write In (Required);C#;106;"""number""";"""function""";;;;"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;), 14;99;;;;;;;;;;;;;;;;Line 2;add a wash method;89;;;;;;;;;;;;;Line 5;add ) to end;41;;;;;;;;;;;;;;;;;;;;;38;;;;;;;;;;;;;;;;Pipeline with #;;;;;
662;May 30, 2019 2:35:41 am;May 30, 2019 3:08:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559208941_5cefa3edce3779.23347107;;;flattened vs both;5-10 years;Advanced;Other - Write In (Required);PHP;124;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;"put the ""y"" in ""salty""";74;;;;;;;Line 10;look for documentation on these crazy pipe things;170;;;;;;;;;;;;;Line 5;add closing parenthesis;42;;;;;;;;;;;;;;;;;;;;;226;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await     |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Fine;"Sorry, this proposal attempts to solve a problem I don't personally have.  The new syntax seems to be sugar over a simple helper function like the below, but I've never seen anyone use a function like that. If it's already easy enough to do and no one does it, is there really a demand for additional syntax?  Of course I can only speak from my own experience, so maybe there are people out there who could benefit from this. I just don't think I'm one of them.  Good luck with your study and thank you for exploring these ideas!   function pipeline( functions, input ){     let result = input     for( let fn of functions ){         result= fn( result)     }     return result }  const pickleJar = await pipeline([     wash,     _ => new Jar(_),     _ => add( ""water"", _ ),     salt,     _ => ferment(_, 2) ], ""cucumber"") const pickle = pickles.takeOne()"
663;May 30, 2019 2:39:09 am;May 30, 2019 3:06:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559209149_5cefa4bd96a1c0.91356296;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;181;3;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;"add "", 14""";644;;;;;;;Line 6;saltCabbageJar rename to saltyCabbageJar;108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); const saltedCabbage = salt(cutCabbage); const saltyCabbageJar = jar(saltedCabbage); const spicyCabbageJar = add(""spicy paste"", saltyCabbageJar); const stirredCabbageJar = stir(spicyCabbageJar); const kimchiJar = await ferment(stirredCabbageJar, 2);";;;;;;;;;;Difficult to see if arguments are correct without a type checking, because the return values has to be read inside-out. Too many function calls onto one line.;The code is more terse and related concepts are close to each other.;Lookup of arguments requires reading back to a different line.;Everything between value is named so it is easier to check if the arguments are correct.;;;;;;;
665;May 30, 2019 2:50:33 am;May 30, 2019 3:16:25 am;Complete;;;English;;1559209833_5cefa7695b2ed9.93766925;;;flattened vs both;more than 10 years;Expert;TypeScript;;272;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);158;;;;;;;Line 9;|> await #;261;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));40;;;;;;;;;;;;;;;;;;;;;304;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Intuituive;
672;May 30, 2019 3:04:07 am;May 30, 2019 3:27:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559210647_5cefaa97196578.46480460;;;flattened vs both;more than 10 years;Advanced;Ruby;;125;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";259;;;;;;;Line 5;?;244;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));84;;;;;;;;;;;;;;;;;;;;;205;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;hard to type, a bit;another method chain is welcome 
673;May 30, 2019 3:03:12 am;May 30, 2019 6:00:45 am;Complete;;;English;https://qsurvey.mozilla.com/;1559210592_5cefaa60cd7ea3.20895207;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;171;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;fix typo (hardly ever needed with autocomplete);222;;;;;;;;;;;;;;;;;;;;;;Line 5;use factory function for Jar() instead of lambda + new;155;;;;;;;;;;;;;;;;;;;;;1877;"const add_ = x => y => add(x, y); const Jar_ = x => new Jar(x);  // these two would be excellent candidates to put in a stdlib const flip = f => a => b => f(b, a); const pipe = (x, ...fns) => fns.reduce((acc, f) => f(acc), x);  const kimchiJar = await pipe(   ""cabbage"",   wash,   cut,   salt,   Jar_,   add_(""spicy paste""),   stir,   flip(ferment)(2) );";a bowl of jogurt with berries;Other - Write In (Required);comprehending the state of the program;"Syntax noise and arrangement of the if-conditions were the main reason to slow down. They somewhat concealed the state of the program.  The pipe operator itself is pretty noisy and a fairly unattractive substitute for a simple comma in a call to `pipe(val, f1, f2, f3)` Are the parentheses around the lambdas required? Is something like |> x => x * 2 illegal? Without them it is probably impossible (or at least not reasonably obvious) to handle nesting of the operator. Actually another reason to prefer an ordinary `pipe` function.  The if-conditions would have been easier to comprehend with a different order of arguments and fewer keywords. Like so: if (isLunch && _.pickles.....) {   return ....; } if ((isBreakfast && ....) || (isSnackTime && ....)) {   return ....; } return null;  The line break between lines 14 and 15 was a little off-putting, too.";;;;;;;;;;;;;The Status quo;;Typing was okay.;"Certainly not a feature I am excited about.  As shown in the refactoring example, the effect of this operator can easily be achieved with a one-line `pipe` function. const pipe = (x, ...fns) => fns.reduce((acc, f) => f(acc), x);  A function has the benefit that it literally tells you what it does: ""pipe"". While an operator doesn't mean anything at first. It requires you to consult some documentation before you even have a chance to make a reasonable guess about its effect. This should be particularly important to beginners. The more cryptic syntax there is, the higher the initial learning curve. I have experienced this in Haskell. Yet Haskell has a more complete concept about its operators and it seems part of the language's philosophy to imply a lot of knowledge in users in exchange for a very terse syntax.  Operator precedence is another source of confusion. In that aspect functions are much more predictable.  Adding operators one at a time sounds like it could easily lead to a patchwork language. Especially because we have to get it right first try due to the ""Don't break the Internet"" policy.  To me the potential long-term complications outweigh the little benefit this feature provides. JavaScript would be better off without the pipe operator. "
675;May 30, 2019 3:04:29 am;May 30, 2019 3:23:59 am;Complete;;;English;https://hacks.mozilla.org/;1559210668_5cefaaacee3d75.82554593;;;nested vs flattened;0-2 years;Advanced;TypeScript;;90;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 11;", 14);";192;;;;;;;Line 6;replace saltCabb... with saltyCabb...;97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"let cabbageJar = new Jar(salt(cut(wash(""cabbage""); const kimchiJar = await ferment(     stir(         add(             ""spicy paste"",             cabbageJar         )     ) );";;;;;;;;;;- reading the execution from inside to outside - lot of brackets - add taking two parameters;- no additional variables;- lot of variable names;- easy to follow execution (top to bottom);;;;;;;
676;May 30, 2019 3:09:48 am;May 30, 2019 3:41:00 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559210988_5cefabec551e84.23700173;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;90;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;fix typo: missing y;399;;;;;;;;;;;;;;;;;;;;;;Line 5;add missing ) at the end of line;57;;;;;;;;;;;;;;;;;;;;;276;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy taste"", _)   |> stir   |> (_ => ferment(_, 2))   | await";a bowl of jogurt with berries;whitespace formating;;Read the conditions first, then when through the pipe in order  Pause for thought: does fillBowl return jugurt (Actually, it doesn't matter, or in other words, it only depends on what add() expects as its 2nd argument.);;;;;;;;;;;;;The proposal;;feels a bit unusual. ;The operator does look a little messy in my opinion
680;May 30, 2019 3:10:59 am;May 30, 2019 3:27:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559211059_5cefac339af876.62828563;;;nested vs both;5-10 years;Advanced;JavaScript;;125;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the status quo better;;Line 10;pass 14;188;;;;;;;;;;;;;;;;Line 8;await #;150;;;;;;;;;;;;;Line 5;add ) to send of line;33;;;;;;;;;;;;;;;;;;;;;246;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Resorted to copy/paste due to the odd nature of using it;I feel like the 'current status quo' is represented in a bad light.  It could be written over multiple lines in a much more understandable style.
685;May 30, 2019 3:33:00 am;May 30, 2019 3:49:58 am;Complete;;;English;https://qsurvey.mozilla.com/;1559212380_5cefb15c0a6406.18937127;;;nested vs proposal 1;more than 10 years;Expert;TypeScript;;65;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14);148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));84;;;;;;;;;;;;;;;;;;;;;227;"const kimchi = (""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2)   |> await).takeOne();";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The Status quo;;Fine;
687;May 30, 2019 3:39:02 am;May 30, 2019 5:04:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559212742_5cefb2c61dc923.16855444;;;nested vs proposal 1;more than 10 years;Expert;TypeScript;;51;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;", 14);";87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);77;;;;;;;;;;;;;;;;;;;;;3025;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;The proposal;;ok;the syntax of piping to an arrow function is clumsy. Are the parens mandatory? Does the parameter need to be _? Would be better if the _ was part of the syntax, and if present it will use it, and if not it will treat the pipeline value as the argument. Or maybe even to only have that, even for single-argument functions. So you would write |> salt(_) |> ferment(_, 2)
689;May 30, 2019 3:41:08 am;May 30, 2019 4:11:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559212868_5cefb3447b8a62.90730038;;;nested vs flattened;more than 10 years;Expert;JavaScript;;187;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;Very often;Almost never;I like Pattern 2 better;;;;;;Line 10;), 2*7;250;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);)";68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbage = new Vegetable(""cabbage"").wash().cut().salt(); const jar = new Jar(); jar.add(preparedCabbage, new Ingredient(""spicy paste"")); jar.stir(); await jar.ferment(); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Functional programming (ferment, salt, add, wash) in one line, hard to read;OOP of Jar;Repetition about jar (cucumber, watery, salty) and it's different states;Each steps are separated;;;;;;;
692;May 30, 2019 3:45:35 am;May 30, 2019 3:59:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559213135_5cefb44f907b23.93949220;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;95;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 10;), 2;120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Jar());60;;;;;;;;;;;;;;;;;;;;;122;Too hard ... on mobile;a bowl of jogurt with berries;identifiers;;Had to infer what _ meant but now I know it. Otherwise it seemed ok;;;;;;;;;;;;;The proposal;;It's fine. No worse than arrow function ;Thanks for doing the survey 
695;May 30, 2019 3:55:05 am;May 30, 2019 7:19:51 am;Complete;;;English;;1559213705_5cefb6898d3503.36502209;;;flattened vs both;0-2 years;Advanced;JavaScript;;223;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";10685;;;;;;;Line 9;await #;281;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));73;;;;;;;;;;;;;;;;;;;;;398;"const kimchi = ""cabbage"" |> wash |> cut  |> salt  |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Ok, the pipe requires two helper keys.;
698;May 30, 2019 4:11:10 am;May 30, 2019 4:43:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559214670_5cefba4ec6dd51.52214319;;;nested vs flattened;more than 10 years;Advanced;Other - Write In (Required);RPGLE;421;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;"2nd parm of ferment() is missing. Line 10 should be: ""  ),14""";256;;;;;;;Line 6;Variable name typo. saltCabbageJar should be saltyCabbageJar;128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;385;"const kimchiJar = await ferment(   stir(     add(       ""spicy paste"",       new Jar(         salt(           cut(             wash(""cabbage"")           )         )       )     )   ),2 ); const kimchi = kimchiJar.takeOne();";;;;;;;;;;"Visualising where parameters fit. E.g. the ""2"" parameter, seeing which function it is a parameter of. Visualising bugs relating to brackets. In this one, there is an extra unwanted closing bracket, it is not immediately obvious which one it is (It's either of the last 2). This is not an issue where the nested function calls are indented on new lines, as on the previous page";It is easy to see the logical order and relationship between steps (ferment contains salt contains add etc.) When the nested function calls are indented on new lines, this is even easier;It's not really an issue with this example, but in more complex code where line x may be dependent on more than line x-1 (e.g. x-1, x-5 and x-15), it is difficult to see the relationship;Each line is a single statement, so an error is confined to a single statement which makes bug finding easier.;"I always shied away from nested function calls (var1 = abc(def(ghi(),15),xyz()); ) because I found them hard to visualise, and it could make debugging tricky as most dev tools treat it as one statement so you cannot break in between (until Firefox 67 update). It was only when I did this survey that I realised you could use the same approach as {} for conditionals var1 = abc(          def(            ghi(),15          ),xyz()        );  Now suddenly it makes so much more sense";;;;;;
701;May 30, 2019 4:24:53 am;May 30, 2019 4:38:26 am;Complete;;;English;https://qsurvey.mozilla.com/;1559215493_5cefbd855e03b1.59446054;;;nested vs flattened;more than 10 years;Expert;JavaScript;;115;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 1;Pass a second parameter to ferment();233;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Reading the order of operations from right to left.;It makes it clear that your piping data through a series of transforms - it highlights the data flow.;Keeping hold of the meaning of all the separate variables in your head.;The transforms read naturally, top to bottom.;Can we have a pipe operator, please?;;;;;;
706;May 30, 2019 4:31:44 am;May 30, 2019 4:55:18 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559215904_5cefbf202a3388.27050114;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;183;"""number""";"""function""";;;;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;"Adding "", 2"" for example. The second parameter is missing";100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing parenthesis at the end of line;39;;;;;;;;;;;;;;;;;;;;;255;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2));";a bowl of jogurt with berries;density of operators;;The data request was a bit difficult to read. Adding a new line for every 'await' is not really useful and adds more unnecessary lines of code.  If you're used to see this operator, the rest of the lines are not difficult to read. You will see this use case a lot in other places.;;;;;;;;;;;;;Other - Write In (Required);It's useful for simple functions with just one parameter, but in other cases it's difficult to read.;Typing the operator is easy, just need some practice and routine.;
709;May 30, 2019 4:40:55 am;May 30, 2019 5:16:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559216455_5cefc14745e1f1.27787183;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;146;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const suerkrautJar = await ferment(saltyCabbageJar, 14);";175;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));69;;;;;;;;;;;;;;;;;;;;;241;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);"It was not hard, but name of ""jogurt"" variable was confusing. It should be bowlOfJogurt.";"I read this code. Then I thought for some time what is more correct: add berries to jogurt or to bowl of jogurt. I decided that it's good to put berries to bowl, but ""jogurt"" variable should be changed to ""bowl"" or ""bowlOfJogurt"".  Then, when I was asked to get the result I returned to state variables and checked if conditions.  On the first condition I saw that pickles were not ready, skip it. On the second conditions I wasn't breakfast but it was snackTime, so, let's eat bowl of jogurt with berries.";;;;;;;;;;;;;The Status quo;;"I didn't enjoy it. "":>"" feels better.  ";Status quo is better to read because it explicitly names intermediate state. In you proposal I have the question in the middle: https://take.ms/YUnsj In status quo I have the answer: https://take.ms/Qy5go  You proposal looks better than: f(g(h(i(j(x))))  So I would use the proposal in shorter and simpler chains.
710;May 30, 2019 4:46:22 am;May 30, 2019 5:03:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559216782_5cefc28e603392.94416102;;;nested vs both;5-10 years;Advanced;JavaScript;;57;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;), 14;125;;;;;;;;;;;;;;;;Line 9;await #;419;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));72;;;;;;;;;;;;;;;;;;;;;119;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;felt a little weird at first, but I got used to it after only a few lines;
714;May 30, 2019 5:02:46 am;May 30, 2019 5:20:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559217766_5cefc6664eae49.71242542;;;nested vs flattened;3-5 years;Expert;JavaScript;;140;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Never;Very often;I like Pattern 2 better;;;;;;;;117;;;;;;;Line 6;"Write ""saltyCabbageJar"" instead of ""saltCabbageJar""";100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); // ... const kimchiJar = await ferment(stirredJar);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Just like any cool oneliner it's hard to understand.;If I didn't care about how pickleJar was made then it would make reading the rest of the code easier since it takes less space, but then it could still be extracted to a separate function called makePickleJar() which would be written in Pattern 2.;None;I can follow the flow easier since every operation is on its own line.;;;;;;;
718;May 30, 2019 5:20:29 am;May 30, 2019 5:36:27 am;Complete;;;English;;1559218829_5cefca8d8b18b8.59978371;;;flattened vs both;5-10 years;Beginner;Java;;129;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";146;;;;;;;Line 10;|> takeOne;118;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));37;;;;;;;;;;;;;;;;;;;;;201;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne() ;";;;;;;;;;;;;;;;Pipeline with #;;;;ok;Indentation would look better if the |> would be below the =
721;May 30, 2019 3:32:46 am;May 30, 2019 5:50:15 am;Complete;;;English;;1559212366_5cefb14e0f5043.02810299;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;86;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";94;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));34;;;;;;;;;;;;;;;;;;;;;225;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);Using another arg name for that final nested add() call threw me slightly but otherwise I didn't have any issues.;It was nice, I read it fairly linearly and only had to backtrack when asked what the output would be (hadn't initially noted that isSnackTime was true).;;;;;;;;;;;;;The proposal;;Good! Bit weird compared to other JS syntax but not too far off from arrow functions?;I want this proposal like yesterday, it's awesome. < 3 |>
723;May 30, 2019 5:38:20 am;May 30, 2019 5:52:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559219900_5cefcebc5669b4.73900352;;;nested vs proposal 1;5-10 years;;JavaScript;;149;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;ferment needs a second parameter;77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;remove unnecessary (;38;;;;;;;;;;;;;;;;;;;;;174;"const kimchi = ""cabbage"" |> wash |> cut  |> salt |> _ => new Jar(_) |> _ => add( ""spicy paste"", _ ) |> stir |> _ => ferment(_, 2) |> await  |> _ => _.takeOne()";a bowl of jogurt with berries;too many if statements;;I had to jump back and forth to confirm each value in the if statement. These could have been pulled into their own functions for confirmation.  Also for line 12 there is no benefit to the pipe;;;;;;;;;;;;;The proposal;;It will take some getting used to, but it's not so hard to type. Needing the shift for both keys is much better than only needing it for one key.;Can't wait for |> to go live! You have all done a great job! Thank you!
724;May 30, 2019 5:38:25 am;May 30, 2019 6:34:45 am;Complete;;;English;https://feedly.com/i/collection/content/user/35737d88-bcb3-4afc-9254-a43330549cee/category/Mozilla;1559219905_5cefcec110a315.37852164;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;161;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Rarely, but I often see other patterns which could be refactored into this pattern;;;I like the proposal better;;;;;;;;;;Line 6;rename the first argument of the `ferment` function to `saltyCabbageJar`;433;;;;;;;Line 9;Line 9 is not passing the `#` argument into the `await`, which will in turn return `undefined` and throw in line 10 when attempting to access it;1102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;212;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a glass of wine;too many if statements;;The hardest part for the actual answer was the inner-#, which required a context switch from the json data to the jogurt property, but even that was mostly effortless since it was a simple context-switch without need for backtrack because the `:`-branch is not necessary for the answer.  Slightly more confusing was when, after filling the answer, I went to the first `:`-branch and had to undo the `#` context switch from the `?`-branch. And then! That cursed inline-iife which destructures an argument that is not being called with (the `#` is not being passed to the call), which will cause an error when destructuring.;769;;;;;;;;The proposal;;Weird on a mac pt-PT keyboard layout because the symbols are on opposite ends of the keyboard (`|` above the right shift and `>`to the right of the left shift) (but then again, `{` is `option` + `shift` + `8`), it would be better on windows pt-PT (`|` to the left of `non-numpad-1`, `>` to the right of the left shift). But the same happened with `=>` so it would be fine eventually.;The `wash` function was used in the examples but never defined in the available functions :D
725;May 30, 2019 4:37:31 am;May 30, 2019 6:09:07 am;Complete;;;English;https://reader.arty.name/;1559216251_5cefc07b49fd67.91995641;;;nested vs flattened;more than 10 years;Expert;JavaScript;;81;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 10;), 2;174;;;;;;;Line 6;fix the typo: saltyCabbageJar;145;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;270;The text of the recipe doesn't mention stirring, so I would remove lines 2 and 13.  My personal preference is to avoid such nesting calls so I would rather see this code with step-by-step variables.;;;;;;;;;;It is hard to follow function parameters beyond the first one. Also the order of execution is right-to-left which is unnatural for people speaking languages with left-to-right script.;;When describing the sequence of actions the intermediate results are not strictly necessary for understanding but are required by the language, and their names could easily become too long or ridiculous. ;The sequence is clear as day, and when a function takes more than one parameter the second one is very obvious.;Chained calls avoid some of the problems of both approaches, even though they are not perfect. The proposal with pipes may solve that even better.;;;;;;
728;May 30, 2019 5:53:43 am;May 30, 2019 6:16:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559220822_5cefd256dbd8e3.56513285;;;nested vs both;more than 10 years;Intermediate;Java;;194;int;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;Line 12;0,3;106;;;;;;;;;;;;;;;;Line 1;#;78;;;;;;;;;;;;;Line 5;);562;;;;;;;;;;;;;;;;;;;;;62;Yolo;;;;;;;;;;;;;;;Current status quo;;;;:-);";-)"
732;May 30, 2019 6:05:20 am;May 30, 2019 7:15:03 am;Complete;;;English;;1559221520_5cefd51031bd26.53445358;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;76;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;Add number 14 as the second argument for the ferment function;242;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));60;;;;;;;;;;;;;;;;;;;;;2857;"const Kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;The constant null checking is the main problem in my opinion.;;;;;;;;;;;;;The proposal;;Very nice =];Maybe a partial application operator could be useful? (such as Scala's)
733;May 30, 2019 6:05:31 am;May 30, 2019 6:26:01 am;Complete;;;English;;1559221531_5cefd51b0ee077.37245175;;;nested vs proposal 1;0-2 years;Advanced;JavaScript;;86;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);We usually use ramda's compose for this;;;I like the proposal better;Line 1;pass 14 as second arg to ferment;177;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing bracket after new Jar(_);85;;;;;;;;;;;;;;;;;;;;;319;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;Using _ as param is really confusing;;;;;;;;;;;;;The proposal;;a bit strange since it's not a common operator, but it's easy to understand when reading it  ;
735;May 30, 2019 6:06:49 am;May 30, 2019 6:53:30 am;Complete;;;English;;1559221609_5cefd569c04189.40900937;;;nested vs flattened;5-10 years;Advanced;JavaScript;;95;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Almost never;I like Pattern 1 better;;;;;;Line 10;), 14;470;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";1091;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const jar = new Jar(salt(cut(wash(""cabbage"")))); const stired = stir(add(""spicy paste"", jar)); const kimchiJar = await ferment(stired, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Too much parenthesis, need to take care when typing it, specially when having some outer arguments to pass, just like the 2.;less variables, plus it gives a great cascading view. text editors generally helps with the lots of parenthesis.;It does not give a cascade (pipe) feel in first look.;The parenthesis are clear and easy to understand;;;;;;;
736;May 30, 2019 6:08:24 am;May 30, 2019 6:30:14 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559221704_5cefd5c86e7844.96435856;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;117;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const soueekrautJar = await ferment(saltyCabbageJar, 14);";327;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));90;;;;;;;;;;;;;;;;;;;;;333;"const kimchiJar = wash(""cabbage"")   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicypaste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await; const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The proposal;;Fine;
737;May 30, 2019 6:10:16 am;May 30, 2019 6:26:33 am;Complete;;;English;;1559221816_5cefd638138b63.75932971;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;88;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 10;Pass day length;109;;;;;;;;;;;;;;;;Line 9;await #;62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;137;"const kimchiJar =   ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2);";;;;;a bowl of jogurt with berries;too many if statements;;Pipeline operators are fine. Nested ones are a bit difficult to wrap the mind around, but I think it's just like learning ternary operators again. Sometimes are difficult to understand what the # currently is. but the only bad code will have this problem I think.;;;;;;;;;The proposal;;It's easy, the keys are close and it has an intuitive visual.;
738;May 30, 2019 6:10:58 am;May 30, 2019 6:34:17 am;Complete;;;English;;1559221858_5cefd662894735.21216129;;;flattened vs both;3-5 years;Intermediate;JavaScript;;90;integer;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";284;;;;;;;Line 9;|> await #;395;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));37;;;;;;;;;;;;;;;;;;;;;147;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;i like it, very simple and fast to develop. I'm just don't used so much pipelines on unix but along the time i'm sure that i'll use it and i'll adapt;Good idea!!!
740;May 30, 2019 6:12:50 am;May 30, 2019 6:28:02 am;Complete;;;English;;1559221969_5cefd6d1e7c685.72024917;;;flattened vs proposal 1;5-10 years;Intermediate;JavaScript;;58;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;:6s/tC/tyC;151;;;;;;;;;;;;;;;;;;;;;;Line 5;:5s/$/);120;;;;;;;;;;;;;;;;;;;;;302;"let fermentationDays = 2 let kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (jar => add(""spicy paste"", jar)   |> stir   |> (jar => ferment(jar, fermentationDays))   |> await   |> (jar => jar.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);i don't know. i'm hard in head about it;;;;;;;;;;;;;;The Status quo;;eh;
742;May 30, 2019 6:15:20 am;May 30, 2019 6:53:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559222120_5cefd768caa7c0.26458826;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;222;function;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;rename arg in line 6;234;;;;;;;;;;;;;;;;;;;;;;Line 5;add missing );129;;;;;;;;;;;;;;;;;;;;;518;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""Spicy paste"", _)   |> stir   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;"Re-read variables to internalize which value was true/false; re-read fetch returned value; long line13 long/break in line 14/15";;;;;;;;;;;;;The proposal;;A new operator is always strange, but ok. It is a pity | is not available...;
743;May 30, 2019 6:15:47 am;May 30, 2019 6:31:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559222147_5cefd783d0c966.06486405;;;nested vs proposal 1;5-10 years;Intermediate;Java;;68;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 1;106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));38;;;;;;;;;;;;;;;;;;;;;209;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;The density of the second if condition was rough. Inconsistent line breaking in the pipelines made it weird to look at, and mixing the pipelines with the ifs is also hard to read.;;;;;261;;;;;;;;The proposal;;A little awkward to hit the | character so often, my fingers are not used to it so I couldn't do it quickly.;"Another awkward thing I felt about this was typing out all the anonymous functions and trying to remember their inputs/outputs. It's very nice when you can just refer to a function name like ""wash"", but something like (_ => _.then(pickleJar => pickleJar.takeOne()) is still pretty cumbersome. I think the overall inversion of control flow from top to bottom instead of inside-out is better and worth any syntax wrinkles."
744;May 30, 2019 6:19:19 am;May 30, 2019 6:49:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559222359_5cefd857366a79.68311046;;;nested vs flattened;5-10 years;Advanced;JavaScript;;102;3;"""function""";"add.bind(null, 10);";;;;;;;;Very often;Almost never;I like Pattern 2 better;;;;;;Line 10;), 14;157;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); const saltyCabbage = salt(cutCabbage); const cabbageJar = new Jar(saltyCabbage); const spicyJar = add(""spicy paste"", cabbageJar); const stirredJar = stir(spicyJar); const kimchiJar = await ferment(stirredJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;"The different steps are ""mixed"" together; hard to see which parameter belongs to which function call.";None.;None.;The steps are clearly distinguished. There is no confusion about which parameter belongs to which function call.;;;;;;;
756;May 30, 2019 6:55:54 am;May 30, 2019 7:26:08 am;Complete;;;English;;1559224554_5cefe0ea2b1232.97838391;;;flattened vs proposal 1;more than 10 years;Expert;Java;;82;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Change `saltCabbageJar` to `saltyCabbageJar` (or rename the constant on the previous line);145;;;;;;;;;;;;;;;;;;;;;;Line 5;Add `)` to the end of the line;57;;;;;;;;;;;;;;;;;;;;;615;"const kimchiJar = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> ($ => new Jar($)) 	|> add.bind(null, ""spicy paste"") 	|> stir 	|> ($ => ferment($, 2)) 	|> await;  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);The second `if` statement is inefficient.;I just read it normally.;;;;;;;;;;;;;Other - Write In (Required);I don't really have a preference.;Alright.;I prefer using `$` over `_` because I use `_` in arrow functions to denote unused parameters.  Also, tabs are still better than spaces: http://nickgravgaard.com/elastic-tabstops/
757;May 30, 2019 7:01:49 am;May 30, 2019 7:10:23 am;Complete;;;English;https://planet.mozilla.org/;1559224909_5cefe24d180a97.05965928;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;81;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 10;, 14;95;;;;;;;Line 6;"ferment(saltyCabbageJar, 14);";34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbage = wash(""cabbage""); const cutCabbage = cut(cabbage); const saltedCabbage = salt(cutCabbage); const jarredCabbage = new Jar(saltedCabbage); const spicyPaste = stir(add(""spicy paste"", jarredCabbage)); const kimchiJar = await ferment(spicyPaste, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Too many nested functions.  It makes it hard to understand what is being done where.;If all of the nested functions go together, than it can reduce lines.;None;Makes it obvious what is happening.;;;;;;;
758;May 30, 2019 7:01:57 am;May 30, 2019 7:26:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559224917_5cefe255220cc2.32229182;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;737;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 11;add numdays argument;116;;;;;;;;;;;;;;;;Line 2;remove wash;81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;286;"const kimchijar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne";;;;;a bowl of jogurt with berries;too many if statements;;nested ternary operation having arrow function invoked;;;;;;;;;The proposal;;Easy;|> is more intuitive to see the flow of data
763;May 30, 2019 7:18:35 am;May 30, 2019 7:49:03 am;Complete;;;English;;1559225915_5cefe63bba0b63.68323578;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;240;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";356;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));72;;;;;;;;;;;;;;;;;;;;;476;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> (_ => stir(_)) |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;73;;;;;;;;;;;
769;May 30, 2019 8:08:39 am;May 30, 2019 8:33:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559228919_5ceff1f7caa492.39692190;;;nested vs flattened;5-10 years;Intermediate;C++;;88;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 10;), 14;147;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbage = salt(cut(wash(""cabbage""))); const cabbageJar = jar(preparedCabbage); const fullJar = add(""spicy paste"", cabbageJar); const stirredJar = stir(fullJar); const kimchiJar = await ferment(stirredJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;"Too many operations on one line; it's hard to follow the flow and to parse out what are the actual parameters being passed to each function.";It avoids creating clutter by spreading simple things out across too many lines, but I would still err on the side of causing that problem rather than causing this.;You could argue that Pattern 2 goes too far with breaking up operations that make logical sense together, and so it ends up creating clutter. Personally I would say the clutter is worth it.;It's far easier than with Pattern 1 to read the flow of objects through the various operations, and even to see the order that operations are happening in.;My real first step if I were trying to refactor any of this code would be to refactor the API, assuming I have control of it. It's not helping me write readable code here.;;;;;;
771;May 30, 2019 8:16:55 am;May 30, 2019 8:32:25 am;Complete;;;English;;1559229415_5ceff3e7549891.27075156;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;152;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";149;;;;;;;Line 9;await #;148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;120;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> Jar |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;The density of operators in line 8 took a second. And then the pipelines on line 10 took a bit longer since it was my first time seeing multiple on a line.;;;;;;;;;The proposal;;The pipe operator took a bit of getting used to. But I think once text editors start creating shortcut keys (or we all map our own), it'll be a lot easier.;
773;May 30, 2019 8:19:30 am;May 30, 2019 8:38:48 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559229570_5ceff482279535.95615039;;;nested vs flattened;5-10 years;Expert;JavaScript;;189;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Almost never;I like Pattern 1 better;;;;;;Line 10;Add numdays as arg to `ferment`, but put it on the next line (11);234;;;;;;;Line 6;Use the correct var name in line 6;45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const kimchiJar = await ferment(   stir(add(""spicy paste"", new Jar(salt(cut(wash(""cabbage"")))))),   2 );";;;;;;;;;;Too much nesting to make sense of what's going on - the first thing executed is at the end of the line, so you need to work backwards;Nothing;Nothing - very easy to read;It reads in the correct order (assuming you read top to bottom) - the first thing which happens is the first thing you read.;I personally find the most easy to read/understand is a combination of these - being able to read in the correct direction, but without the need for intermediate variables is ideal. Something similar to using array functions where you can do things like: ``` array.map(...)   .filter(...)   .reduce(...) ```;;;;;;
774;May 30, 2019 8:19:50 am;May 30, 2019 8:44:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559229590_5ceff49632c266.51586275;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;109;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 1;define wash function.;110;;;;;;;;;;;;;;;;;;;;;;Line 1;define wash function.;38;;;;;;;;;;;;;;;;;;;;;500;"const fimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;density of operators;;It was fine until the if statement, but it was difficult to read from if statement.  In particular, the condition of the if statement enclosed in parentheses is difficult.;;;;;;;;;;;;;The proposal;;I like it.;I realy want to use 'Pipeline'!
776;May 30, 2019 8:24:11 am;May 30, 2019 8:45:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559229851_5ceff59b8f7729.37360025;;;nested vs flattened;3-5 years;Intermediate;JavaScript;;258;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Almost never;I like Pattern 1 better;;;;;;Line 10;"need to include numdays: "", 14""";160;;;;;;;Line 6;"typo, alas! used wrong variable name, should be ""saltyCabbageJar""";84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cbbg = salt(cut(wash(""cabbage""))); const cbbgJar = new Jar(cbbg); const readyJar = stir(add(""spicy paste"", cbbgJar));  const kimchiJar = await ferment(readyJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Hard to figure out what is actually going on within the ferment function at first glance.;Easy to see that we are creating a pickleJar by fermenting some stuff.;Too many variables... hard to find out what is actually happening at first glance - where are the important bits?;Easy to parse out the exact details of what is happening (if not the immediate goal).;;;;;;;
782;May 30, 2019 8:52:58 am;May 30, 2019 9:20:05 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559231577_5ceffc59e00320.60292397;;;nested vs both;more than 10 years;Expert;JavaScript;;67;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;Line 10;), 14;241;;;;;;;;;;;;;;;;Line 2;remove the line, wash is not defined;619;;;;;;;;;;;;;Line 5;(_ => new Jar(_));69;;;;;;;;;;;;;;;;;;;;;242;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not bad;It's weird that, if there is no #, it's assumed that you have to call with (#).  So wash becomes wash(#), but await # is still await #.  Not sure there's a good solution here.
785;May 30, 2019 9:00:36 am;May 30, 2019 9:15:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559232036_5ceffe245bc825.88413074;;;nested vs flattened;5-10 years;Expert;TypeScript;;146;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 10;Add 14 as second argument to ferment call;185;;;;;;;Line 6;Fix typo: saltCabbageJar should be saltyCabbageJar;57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preppedCabbage = salt(cut(wash(""cabbage""))); const jar = new Jar(preppedCabbage); const preppedJar = stir(add(""spicyPaste"", jar)); const kimchiJar = await ferment(preppedJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Too much nesting;None;More variables to track (minor);The steps are very clear;Some kind of pattern involving method chaining would probably be preferable to both of the options presented.;;;;;;
791;May 30, 2019 9:37:19 am;May 30, 2019 9:53:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559234239_5cf006bf47d6e8.21946968;;;nested vs proposal 2;more than 10 years;Beginner;C++;;66;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 1);";111;;;;;;;;;;;;;;;;Line 9;#.await;118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;258;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spycy paste"", #) |> stir |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;"especally the first ""if"" is quite complicated.";;;;;;;;;The proposal;;It looked very strange when reading at first. But after typing some it felt quite natural.;
792;May 30, 2019 9:39:02 am;May 30, 2019 10:02:15 am;Complete;;;English;;1559234342_5cf00726945fa1.02079631;;;flattened vs both;0-2 years;Intermediate;Python;;141;3;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";154;;;;;;;Line 9;|> await #;299;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));59;;;;;;;;;;;;;;;;;;;;;182;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;Definitely not worse than type a bunch of nested parentheses.;"I much prefer the ""Pipeline with #"" proposal.  Syntactic sugar is important for this kind of stuff.  The simple ""Pipeline"" proposal does not have a great value proposition, you can relatively easily do something similar with a fluent style.  And while arrow functions are nice, all those repeated arrows in combination with the new |> operator and underscores undermine the concise nature of a pipeline."
793;May 30, 2019 9:40:30 am;May 30, 2019 11:15:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559234429_5cf0077de88fb8.92431447;;;flattened vs proposal 2;more than 10 years;Intermediate;JavaScript;;100;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";108;;;;;;;Line 9;await #;85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;629;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2);  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;nested pipelines;;I was fine until I reached the second operand of the outermost ternary: I was surprised to find the pipeline placeholder (number sign) inside a ternary operand.;;;;;;;;;The Status quo;;"|> is great, but # (the placeholder reference) does my head in. I think I'd find it easier to read a ""functions only"" proposal, which could be coupled with currying and other techniques for handling operators etc.";I found myself wanting to lie and say I prefer the proposal because I really do love the idea of a pipeline operator in JS, but the reference placeholder part of the proposal seems much riskier and could undo the readability improvement of the pipeline itself.
794;May 30, 2019 9:40:55 am;May 30, 2019 10:09:56 am;Complete;;;English;https://qiita.com/;1559234455_5cf00797633b25.44550158;;;flattened vs proposal 2;3-5 years;Advanced;TypeScript;;80;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;fix typo;126;;;;;;;Line 5;use arrow function;363;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;232;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;The proposal;;not good. ;
796;May 30, 2019 9:46:39 am;May 30, 2019 10:08:17 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559234799_5cf008ef6bd4a6.59582631;;;nested vs proposal 1;more than 10 years;Intermediate;Python;;92;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;ferment([...], 14);177;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));47;;;;;;;;;;;;;;;;;;;;;180;"const kimchi = ""cabbage""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2)   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;some pipeline operators not starting on a new line makes it somewhat harder to read.  Also, the code would have been easier to read if a pipeline wasn't used to actually fetch the JSON data, but that may be because I am more used to the conventional way of calling fetch();;;;;;;;;;;;;The proposal;;Works well enough on a Norwegian keyboard layout.;I wish there was a simpler way to call functions with extra arguments in pipelines, though I don't really have a good syntax in mind.
801;May 30, 2019 10:09:22 am;May 30, 2019 1:20:38 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559236162_5cf00e4271fa45.92132256;;;nested vs flattened;5-10 years;Intermediate;Ruby;;295;"""number""";"""function""";;;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 10;), 14;239;;;;;;;Line 6;ferment(saltyCabbageJar, 14);271;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9926;"I think there's extra closing parentheses in the example code and indentation is wrong.  const washedCabbage     = wash(""cabbage""); const cutCabbage        = cut(washedCabbage); const saltedCabbage     = salt(cutCabbage); const cabbageJar        = new Jar(saltedCabbage); const spicedCabbageJar  = add(""spicy paste"", cabbageJar); const stirredCabbageJar = stir(spicedCabbageJar); const kimchiJar         = await ferment(stirredCabbageJar, 2); const kimchi            = kimchiJar.takeOne();";;;;;;;;;;Working my way from inside to outside and keeping track of state in my head.;If it's simple enough it doesn't help much to go full verbose. Consider this:  data = MultiJson.load(File.read('data.json'))  vs  file_path = 'data.json' json = File.read(file_path) data = MultiJson.load(json);Not indenting the equals. Sometimes it's hard to find fitting names for variables.;It's easier to keep track of state of variables.;;;;;;;
802;May 30, 2019 10:12:37 am;May 30, 2019 10:53:54 am;Complete;;;English;;1559236357_5cf00f0587b944.63761726;;;flattened vs proposal 2;5-10 years;Advanced;Python;;238;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";252;;;;;;;Line 9;await # // but I think not requireing # for some keywords like async and await is better;358;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;230;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#)  // why not just ""new Jar"" ? |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await #  // why not just ""await""";;;;;a bowl of jogurt with berries;too many if statements;;It took me few seconds to understand the line 12;;;;;;;;;The proposal;;no issue here;"Some notes: - I think it's better to not require ""#"" for some keywords like await  - can we just write ""new Jar""  instead of ""new Jar(#)"" or is it not compatible with invoking constructors without  parentheses?"
803;May 30, 2019 10:25:31 am;May 30, 2019 3:43:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559237131_5cf0120b20aff0.28564976;;;nested vs both;more than 10 years;Advanced;JavaScript;;18080;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the status quo better;;Line 11;, numdays;214;;;;;;;;;;;;;;;;Line 5;;211;;;;;;;;;;;;;Line 6;(_);78;;;;;;;;;;;;;;;;;;;;;107;;;;;;;;;;;;;;;;Current status quo;;;;;
804;May 30, 2019 10:28:18 am;May 30, 2019 10:48:01 am;Complete;;;English;;1559237298_5cf012b2030005.90286851;;;flattened vs both;5-10 years;Intermediate;Ruby;;140;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;s/saltCabbageJar/saltyCabbageJar;465;;;;;;;Line 10;await.takeOne();143;;;;;;;;;;;;;Line 5;(_ => new Jar());32;;;;;;;;;;;;;;;;;;;;;211;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy_paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline;;;;Fun!;
806;May 30, 2019 10:42:04 am;May 30, 2019 11:04:50 am;Complete;;;English;http://tbehlman.com/hackernews/view/20042441;1559238124_5cf015eca93332.69702470;;;nested vs both;3-5 years;Expert;JavaScript;;132;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;Line 10;), 14;86;;;;;;;;;;;;;;;;Line 2;//  |> wash;148;;;;;;;;;;;;;Line 5;|> (_ => mew Jar(_));71;;;;;;;;;;;;;;;;;;;;;197;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Typing the |> is a bit of a stretch and causes some strain in my right hand.  With practice I may be able to change how I enter it to avoid this.;"I don't like how the pieces of the pipeline are expected to either be functions or expressions depending on whether there's a # character in them.  Furthermore, I don't think we need a language feature to solve them problem of writing too much code in one line.  A new language construct like this would open many new avenues of abuse.  I would much rather see the optional operator ""?"", for example: const obj = { foo: 11 }; console.log(obj.bar?.baz); // ""undefined"""
807;May 30, 2019 10:53:54 am;May 30, 2019 11:13:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559238834_5cf018b2223e44.80430530;;;nested vs both;3-5 years;Advanced;JavaScript;;98;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;"add "", 14""";161;;;;;;;;;;;;;;;;Line 9;Add the '#' symbol after await?;257;;;;;;;;;;;;;Line 5;Add a closing paren at the end of the line;136;;;;;;;;;;;;;;;;;;;;;175;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;The pipe, |, is a bit of a stretch with my pinky but I like the symbol visually;
813;May 30, 2019 11:07:20 am;May 30, 2019 11:22:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559239640_5cf01bd82f4962.71607024;;;nested vs proposal 2;5-10 years;Intermediate;JavaScript;;95;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;",1);";152;;;;;;;;;;;;;;;;Line 9;await #;127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;206;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The proposal;;pretty easy and natural;
817;May 30, 2019 11:11:24 am;May 30, 2019 11:35:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559239884_5cf01cccce9259.04992602;;;flattened vs both;0-2 years;Intermediate;Other - Write In (Required);PHP;314;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14));160;;;;;;;Line 5;;132;;;;;;;;;;;;;Line 5;(_=> new Jar(_));70;;;;;;;;;;;;;;;;;;;;;325;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await |> ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;;;;;Buttons are close;If interpretators can tell us which line the undefined var is, move on with #. If not, stay with status quo.
818;May 30, 2019 11:11:45 am;May 30, 2019 11:32:17 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559239905_5cf01ce17fee24.69666517;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;129;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;fix variable name;130;;;;;;;;;;;;;;;;;;;;;;Line 5;add missing parens;78;;;;;;;;;;;;;;;;;;;;;296;"const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;read each line and noodle about return value. the underscores as var names make it harder to track values.;;;;;;;;;;;;;The proposal;;not terrible. pipe key is just in a place my fingers aren't used to reaching.;i think documentation that more clearly describes data flowing through the code (comments/var names) would help. I'd say most people either don't normally see underscores as var names or if they do its a  throwaway value.
820;May 30, 2019 11:11:48 am;May 30, 2019 11:19:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559239908_5cf01ce4a85e17.15372118;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;114;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"On line 6 change ""saltCabbageJar"" to ""saltyCabbageJar""";180;;;;;;;;;28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10;;;;;;;;;;;;;;;;;;The Status quo;;;
821;May 30, 2019 11:12:14 am;May 30, 2019 11:31:23 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559239934_5cf01cfe758d02.74094407;;;nested vs flattened;more than 10 years;Intermediate;C++;;170;integer;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Sometimes;I like Pattern 2 better;;;;;;Line 10;"Add the second parameter to ferment(), e.g. "", 10""";99;;;;;;;Line 6;salt -> salty;34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"let washedCabbage = wash(""cabbage""); let cabbageStripes = cut(washedCabbage); // missing signature, btw let saltyCabbageStripes = salt(cabbageStripes); let cabbageJar = new Jar(saltyCabbageStripes); let finishedJar = add(""spicy paste"", jar); // the recipe doesn't mention stirring though. const kimchiJar = await ferment(stir(jar), 2).takeOne();";;;;;;;;;;braces are hard to unpack, it is unclear what was achieved with each step as intermediate results are not named, so it takes more time to check;less variables to juggle in short-term memory?;"wall of text (especially the noise of repeating ""const"" for each line)  if I want to apply this stile, why can't just I have something to make each variable assignable only once, like in functional programming languages like Rust or Haskell?  E.g.  let {   washedCucumber = wash(""cucumber"");   cucumberJar = Jar.new(washedCucumber); // ""new"" treated like method   /// ... }";naming each variable descriptively means I need to check only one (shorter) line at a time for correctness;still no strong-typing, makes my life hard;;;;;;
824;May 30, 2019 11:14:12 am;May 30, 2019 11:32:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240052_5cf01d74a56a18.33058598;;;nested vs proposal 2;0-2 years;Intermediate;Python;;112;number;"""object""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;",2);";99;;;;;;;;;;;;;;;;Line 9;|> await #;82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;454;"const kimchiJar = ""cabbage""   |> stir   |> (_ => add(""spicy paste"", _))   |> (_ => new Jar(_))   |> salt   |> cut   |> wash   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;a bowl of jogurt with berries;inconsistent style;;"There are too many ""#""s and indentations are really bad";;;;;;;;;The proposal;;i do not like it;
826;May 30, 2019 11:15:17 am;May 30, 2019 12:11:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240117_5cf01db5b1a8d0.27520592;;;flattened vs both;3-5 years;Intermediate;Other - Write In (Required);c#;831;Number;"""object""";;;;;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;on line 6, saltCabbageJar should be saltyCabbageJar;454;;;;;;;Line 6;im guessing;872;;;;;;;;;;;;;Line 5;add ) to the end;129;;;;;;;;;;;;;;;;;;;;;408;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;no more annoying than typing => ;
830;May 30, 2019 11:18:40 am;May 30, 2019 11:52:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240320_5cf01e804e7315.49490002;;;nested vs proposal 1;5-10 years;Advanced;Ruby;;439;integer;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;Add a number of days;257;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a );39;;;;;;;;;;;;;;;;;;;;;343;"const kimchiJar = ""cabbage""   |> wash   |> (_ => cut(_))   |> (_ => salt(_))   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> (_ => stir(_))   |> (_ => ferment(_ , 2)   |> await   |> (_ => _.takeOne());";;inconsistent style;;It was easy to read until line 12. It's not clear what `_` is and what `_.attribute |> function` does.;;;;;;;;;;;;;The proposal;;Not that bad. I will have to adapt my text editor/keyboard/fingers.;I started to think the Status quo was better at the beginning because I was surprised but after reading and writing codes, the Proposal is much better.
832;May 30, 2019 11:19:23 am;May 30, 2019 11:47:00 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240363_5cf01eab817626.99992455;;;nested vs both;more than 10 years;Advanced;JavaScript;;372;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 14;391;;;;;;;;;;;;;;;;Line 10;|> takeOne();421;;;;;;;;;;;;;Line 5;|> _ => new Jar(_);99;;;;;;;;;;;;;;;;;;;;;73;;;;;;;;;;;;;;;;Pipeline with #;;;;;
836;May 30, 2019 11:19:50 am;May 30, 2019 11:53:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240389_5cf01ec5da0872.35072165;;;flattened vs proposal 2;0-2 years;Intermediate;Java;;234;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;182;;;;;;;Line 10;remove '#.' from line 10 and swap lines 10 and 9;107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;247;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;it felt fine up to line 8 the nested conditional operator didn't feel nice too read, especially going deeper (line 11 and onward);580;;;;;;;;The proposal;;i wish it was just a single character instead of two except for that it felt fine;
840;May 30, 2019 11:23:22 am;May 31, 2019 9:14:59 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240602_5cf01f9a48f759.10992243;;;flattened vs both;more than 10 years;Expert;Other - Write In (Required);php;227;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"Fixed typo(missing ""y"") in saltyCabbageJar";367;;;;;;;Line 9;Fixed missing pipe argument for await pipe;751;;;;;;;;;;;;;Line 5;Fixed missing closing parenthesis for new Jar pipe;188;;;;;;;;;;;;;;;;;;;;;417;"const kimchi = ""cabbage""   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Different but easier than PHP's ->;This is really cool
842;May 30, 2019 11:23:53 am;May 30, 2019 11:39:20 am;Complete;;;English;;1559240632_5cf01fb8efa2d3.02630723;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;95;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;pass a numdays as a second argument to `ferment`;90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing paren at the end of the line;46;;;;;;;;;;;;;;;;;;;;;243;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2)   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;it was pretty readable. I only double-took at the return _.jogurt |> pipeToOtherStuff, which was just a new thing to look at, but it is clear.;;;;;;;;;;;;;The proposal;;it's fine.;"does it work in reverse? as a compose?  are the parens around lamdas with arguments required?  |> wash |> _ => new Jar(_) |> _ => add([""water""], _) etc"
843;May 30, 2019 11:24:13 am;May 30, 2019 11:49:16 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240653_5cf01fcda23c18.35061856;;;flattened vs proposal 2;5-10 years;Expert;TypeScript;;113;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Never.. too many patterns mixed in;;;I like the status quo better;;;;;;;;;;Line 6;There should be a saltyJar not salt...;118;;;;;;;Line 10;Maybe await fermentation on line 9;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;80;Why you do this to me.. im on my phone;;;;;a bowl of jogurt with berries;too many if statements;;Ternary operators in ternary operators... ;;;;;;;;;The Status quo;;Pretty normal.. pipeline operator is great idea .. especially in functional programming.. the use of # is pretty weird but its javascript so there are limitations and its never going to be a pretty language.;I think pipelines would be great in any language but i didnt get why the await statement was just alone and not with await fermentation. Also i hope there are going to be better characters to represent item or maybe a keyword that i could use and set my own variable to be used as my piped result
844;May 30, 2019 11:25:22 am;May 30, 2019 11:41:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559240722_5cf020124539c9.90901431;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;93;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";156;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));39;;;;;;;;;;;;;;;;;;;;;185;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;whitespace formating;;Inconsistently breaking the pipeline operator is confusing. In particular line 14 and 15.;;;;;;;;;;;;;The proposal;;(I'm coding on a Mac) Not that great, first pressing Alt Gr and then Shift is not that easy for consecutive characters.;Wrapping almost everything in a function is pretty tedious. I don't think one would be able to produce long and efficient chains with this new operator as such a linear structure seldom occurs.
848;May 30, 2019 11:28:25 am;May 30, 2019 11:34:34 am;Complete;;;English;;1559240905_5cf020c9d4dd04.51926459;;;nested vs both;5-10 years;Advanced;TypeScript;;8;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;", 14);";15;;;;;;;;;;;;;;;;Line 8;await ferment(#, 14);70;;;;;;;;;;;;;Line 5;(_ => new Jar(_));19;;;;;;;;;;;;;;;;;;;;;141;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline;;;;Cumbersome. My hand had to travel a lot.;I find the pipeline format less readable, but I think it will grow on me.
849;May 30, 2019 11:31:35 am;May 30, 2019 12:32:08 pm;Complete;;;English;;1559241094_5cf02186f34432.68012510;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;158;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";311;;;;;;;Line 9;|> await #;117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;469;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);mixed checks (property existance mixed with program logic);In line 8 there's a repeated property existance check which fills the line of operators and slows down understanding what the program flow has to do. Nested ternary operator also slow down reading the code.;;;;;;;;;The proposal;;Quite easy... in the italian keyboard they both require shift key pressed and both on the same side.;"The pipe operator (|>) is nice but I think that the previous ""yogurt code"" shows the problem about checking object structure which is very often needed and fills the code with checks that distracts from the flow. I hope this problem will be addressed very soon. The sharp notation is nice... I would take in consideration the possibility to split the flow just like the tee command do ( a |2> operator?)."
851;May 30, 2019 11:33:23 am;May 30, 2019 11:55:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559241203_5cf021f38eccc3.06127967;;;flattened vs both;more than 10 years;Advanced;Java;;196;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 1;define the `wash` function;266;;;;;;;Line 2;define the `wash` function;129;;;;;;;;;;;;;Line 2;define the `wash` function;33;;;;;;;;;;;;;;;;;;;;;160;"""cabbage"" |> wash |> cut|> salt |> new Jar(#) |> add(""spicy paste"",#) |> stir |> ferment(#,2) |> await";;;;;;;;;;;;;;;Pipeline with #;;;;Fine;I would actually always explicitly include the `(#)`, so not `... |> wash |> ...` but `... |> wash(#) |> ...`. Since I want to instantly perceive that a function call is happening.
852;May 30, 2019 11:33:48 am;May 30, 2019 11:56:47 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559241228_5cf0220cca4847.45009273;;;nested vs both;3-5 years;Advanced;Other - Write In (Required);Swift;80;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 2;Add missing parameter (numdays) to the ferment call;105;;;;;;;;;;;;;;;;Line 8;Unsure? Guessing that await needs to come before the promise, not afterwards, to make line 10 work? (normally errors also give you a line number);564;;;;;;;;;;;;;Line 5;Missing parenthesis around function expression;26;;;;;;;;;;;;;;;;;;;;;215;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await // ? is this right?  |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;"For a moment I was thinking, ""why not '>>'"", then remembered bitwise operators are a thing. It's not exactly the prettiest syntax, but it does make deeply nested function calls a LOT more readable.";Really like it! The operator |> itself is kinda ugly, but with font ligatures, it would be fine!
856;May 30, 2019 11:36:15 am;May 30, 2019 11:53:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559241374_5cf0229ed7c9b5.02314863;;;nested vs both;0-2 years;Intermediate;TypeScript;;65;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 10;Add 14 as the second parameter to ferment();159;;;;;;;;;;;;;;;;Line 9;"Write ""await #"" instead of ""await"".";88;;;;;;;;;;;;;Line 8;(_ => await _);65;;;;;;;;;;;;;;;;;;;;;310;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> add.bind(null, ""spicy paste"")   |> stir   |> (_ => ferment(_, 2))   |> (_ => await _)   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;It's actually fine, at least on a German keyboard, but it would be cooler to only need one character like composing functions in Haskell.;I don't really like the # as it's not that obvious that it's different after each pipeline operator, but it is obvious using plain functions.
863;May 30, 2019 11:41:46 am;May 30, 2019 12:01:11 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559241706_5cf023eaa08c70.73501577;;;nested vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);CÂ¤;112;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;"insert a line with "", 14""";110;;;;;;;;;;;;;;;;Line 1;define the wash function as wash(string) //returns string;89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;210;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);To lonb parenthesed expression;The long boolean expression with parenthesis required a few reads to understand and anotyher two to look back to the info on the previous line to evaluate. Pipes in one line is no problem at least when there are not extra arguments  Ternary is also easy when indented;;;;;;;;;The proposal;;A bit extra job with a Swedish keyboard, but thats a common problem as many operators require a more complex key combination.  But its pretty self explanatory, at least once you know its pipe;
866;May 30, 2019 11:44:48 am;May 30, 2019 12:04:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559241888_5cf024a0016ce0.12049588;;;flattened vs proposal 2;more than 10 years;Expert;C++;;107;"""number""";"""object""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";115;;;;;;;Line 9;await #;131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;156;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;validating the nesting of the ternary operators to ensure the logic performed.. (also my head was trying to optimize the code as the first ternery expression could be better written as  (#.jogurt && #.jogurt.ready && (isBreakfact || isSnackTime) );;;;;;;;;The Status quo;;awkward.;I feel it adds extra overhead of having to interpret another symbol in figuring out the logic of a program.
868;May 30, 2019 11:47:50 am;May 30, 2019 12:13:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559242070_5cf025569ecca4.10235741;;;nested vs proposal 1;5-10 years;Intermediate;Other - Write In (Required);C#;123;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;",14);";101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));78;;;;;;;;;;;;;;;;;;;;;474;"const kimchi = ""cucumber""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""water"", _))   |> (_ => add(""spicy taste"", _))   |> stir   |> (_ => ferment(_, 2)   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);confused with that _ means in every usage;Well I found this code quite OK to read :)) As I mentioned hard part is to keep in mind if the functions arguments are of the right type - e.g. fillBowl it's confusing since output of fillBowl is named jogurt - am I allowed to call add on it?;;;;;;;;;;;;;The proposal;;It's fast to type but maybe two letters are more than enough (I guess it's inpired by F# so it's understandable on the other hand);The new proposal reads better than the status quo. It reminds me reactive programming or LINQ from C# which both I like since are readable and without side effects.
870;May 30, 2019 11:52:18 am;May 30, 2019 11:59:36 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559242338_5cf02662a89fc3.78332212;;;flattened vs both;3-5 years;Intermediate;JavaScript;;49;;"""function""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);)";79;;;;;;;;;22;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));29;;;;;;;;;;;;;;;;;;;;;132;;;;;;;;;;;;;;;;Pipeline with #;;;;Uncomfortable at first.;
873;May 30, 2019 11:55:01 am;May 30, 2019 12:17:29 pm;Complete;;;English;;1559242501_5cf027053c5990.16473636;;;flattened vs both;0-2 years;Advanced;JavaScript;;372;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;add a y to saltCabbageJar;313;;;;;;;Line 9;add #;186;;;;;;;;;;;;;Line 5;add a closing );23;;;;;;;;;;;;;;;;;;;;;244;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not bad since I can hold down the left shift button for both.;I changed my mind and now prefer the pipeline with # even though it doesn't look very JavaScriptural.
875;May 30, 2019 11:55:29 am;May 30, 2019 12:13:52 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559242529_5cf02721150454.71575835;;;nested vs flattened;0-2 years;Intermediate;TypeScript;;237;number;"""function""";;"add.call(null, 10);";;;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 10;add the numdays argument;155;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"let cabbage = wash(""cabbage""); cabbage = cut(cabbage); cabbage = salt(cabbage); let jar = new Jar(cabbage); jar = add(""spicy paste"", jar); jar = stir(jar); const kimchiJar = await ferment(jar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Many nested functions makes it difficult to tell which argument goes to which function. ;None;None;The result of each function is clear because of the variable names. It's clear what the arguments for each function are and the order in which the calls are made. ;;;;;;;
878;May 30, 2019 11:58:04 am;May 30, 2019 12:13:10 pm;Complete;;;English;;1559242684_5cf027bc116930.91247677;;;nested vs both;more than 10 years;Advanced;Python;;188;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;", 14);";206;;;;;;;;;;;;;;;;Line 2;;35;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));39;;;;;;;;;;;;;;;;;;;;;270;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;If/when this is accepted, I will immediately quick-key that;
883;May 30, 2019 12:03:49 pm;May 30, 2019 12:27:30 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243029_5cf02915b35874.86387871;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;265;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 10;, 14;160;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add missing closing parenthese;67;;;;;;;;;;;;;;;;;;;;;85;;a bowl of jogurt with berries;Other - Write In (Required);Combination of nested piping and cluttered branching logic;Sequential, top -> down until the last branching logic;;;;;;;;;;;;;Other - Write In (Required);I see some point in the pipeline, however I would rather favour functional composition using a higher order function still;Works fine on a swedish keyboard :);
887;May 30, 2019 12:05:02 pm;May 30, 2019 12:47:24 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559243102_5cf0295e60adb3.23276032;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;206;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;, 14 (add numDays as second arg, either on L10 or newline);160;;;;;;;;;;;;;;;;Line 2;cut(#);487;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;255;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Definitely the density of operators slowed me down. I also hadn't seen multiple pipelines inline before.;;;;;;;;;The proposal;;I'm typing on an ortholinear keyboard and, while strange at first, I found typing the |> to be simple. I got very comfortable with it over the course of the survey :) ;The design of this survey was super interesting, and it was fun to complete!
891;May 30, 2019 12:10:51 pm;May 30, 2019 12:35:26 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243451_5cf02abb6b8eb7.25172448;;;nested vs proposal 1;more than 10 years;Intermediate;JavaScript;;246;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;change line 10 by `  ), 2 * 7) // wait for 2 weeks `;197;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a `)` at the end of the line;47;;;;;;;;;;;;;;;;;;;;;204;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);several in fact, identifiers, formatting and nested pipelines;Maybe because I'm not used to, but : * the fact we write a function inside the pipeline (would prefer use a function previously defined / declared) * the use of const inside the function, so I need to refer to the real value for knowing which exit was the right one * the long condition line 13, not easy to read with `_` variable, I would prefer an easy-to-understable variable name  But seems not so bad finally to read & understand !! surprising !;;;;;;;;;;;;;Other - Write In (Required);proposal, but with the use of `await` instead of `then`;sorry, but I don't understand the question ?  not english, so maybe I'm making a misunderstanding with typing as TypeScript or typing as write with the keyboard.  if it's just writing, well it's ok for me ! I'm used to the `|` key, so the `>` is not so hard to enter after. sounds great for me !;Well, I like really the survey !! It's a really good option (I think) to make us (dev's) discover new features. Thank you for making this survey, I'm curious of your results ! 
892;May 30, 2019 12:11:01 pm;May 30, 2019 12:40:18 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243461_5cf02ac5027b67.99771391;;;nested vs both;3-5 years;Intermediate;JavaScript;;449;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 6;define wash;345;;;;;;;;;;;;;;;;Line 8;the await should be on the same line as ferment;217;;;;;;;;;;;;;Line 5;there's a missing paranthesis;76;;;;;;;;;;;;;;;;;;;;;379;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Nice, as the fingers are close.;The pipe |> is easier to read.
893;May 30, 2019 12:11:10 pm;May 30, 2019 12:17:51 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243470_5cf02ace7a1182.55710490;;;nested vs proposal 1;0-2 years;Beginner;Other - Write In (Required);None;217;23;"""error""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;;;;;;;;;;;;;;5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4;;;;;;;;;;;;;;;;;;;;;3;;;;;;;;;;;;;;;;;;;;;I gave up.
894;May 30, 2019 11:33:28 am;May 30, 2019 12:52:59 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559241208_5cf021f8baf2f6.83579417;;;flattened vs both;5-10 years;Beginner;Other - Write In (Required);c#;125;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabageJar, 14);";299;;;;;;;Line 2;define wash function;168;;;;;;;;;;;;;Line 2;define wash function;85;;;;;;;;;;;;;;;;;;;;;531;"const kimchiJar = ""kopÅ«sts""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""aÅ¡trus patarmasas"", #)   |> stir   |> ferment(#, 2)  // Error: wash is not a function";;;;;;;;;;;;;;;Pipeline with #;;;;Has some exposure to Haskell and functional stuff so felt right at home. Ergonomically speaking keyboard characters are really close to each other and it was easy to type them.;
896;May 30, 2019 12:13:11 pm;May 30, 2019 12:36:24 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559243590_5cf02b46ec9e92.33780070;;;flattened vs both;more than 10 years;Expert;JavaScript;;130;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";150;;;;;;;Line 9;await is not a function, it's a keyword. I don't think the error would be about the #, but about the standalone await keyword;388;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));58;;;;;;;;;;;;;;;;;;;;;218;"const kimchi = ""cabbage""   |> wash   |> cut   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment;";;;;;;;;;;;;;;;Pipeline with #;;;;Fine. Got used to it quickly.;await is not a function, it's a keyword.   |> await  should not be valid syntax, regardless of with/without #.
897;May 30, 2019 12:12:42 pm;May 30, 2019 2:55:01 pm;Complete;;;English;;1559243562_5cf02b2ad5c717.70424796;;;flattened vs proposal 2;3-5 years;Expert;JavaScript;;152;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;fix name from saltCabbageJar to saltyCabbageJar;409;;;;;;;Line 10;x => x.takeOne();7744;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;316;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await";;;;;a bowl of jogurt with berries;Other - Write In (Required);bad condition in line 8, it could be just #.jogurt && #.jogurt.ready && (isBreakfast || isSnackTime);Line 12 is very dense. But it can be understood.;;;;;;;;;The proposal;;Not nice. But OK.;"I think a easier symbol to write would be ""->"".  Like:  const pickle = cucumber""   -> wash   -> new Jar(#) ..."
898;May 30, 2019 12:14:25 pm;May 30, 2019 12:42:55 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243665_5cf02b9182a2c8.35616674;;;nested vs proposal 1;more than 10 years;Intermediate;Python;;351;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;", 2);";88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));112;;;;;;;;;;;;;;;;;;;;;398;"const kimchiJar = ""cucumber"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";null;inconsistent style;;I did not find more or less readable then previous examples since correctly indented but I am a stickler for consistency and found the use of jogurt instead of _ on line15 briefly confusing (I started looking for a jogurt assignment) and then irritating.;;;;;;;;;;;;;Other - Write In (Required);might cotton up to the proposal bt not as-is.;meh. I don't like but this is not APL and we are constrained by the paucity of symbols.;I hate |> (_ => new Jar(_)). Why can't we have |> Jar#new as in Java? More generally how about skipping the _ => everywhere. You don't write, e.g., (_ => wash(_)), so this is both inconsistent and annoying.
899;May 30, 2019 12:15:37 pm;May 30, 2019 12:31:19 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559243737_5cf02bd95d90a9.34649194;;;nested vs proposal 2;3-5 years;Intermediate;Python;;71;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";118;;;;;;;;;;;;;;;;Line 9;|> #.takeOne();109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;167;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);ternary operator;"Large conditionals take a while for my brain to process. I have to re-read the code many times and eliminate the stuff that I know I can ""eliminate"" to figure out what the code will actually do. Eg. if I know a big inner conditional will be false, I can ""eliminate"" it, depending on the circumstance. I hope that makes sense.";;;;;;;;;The proposal;;Fine. These symbols are already used elsewhere. It feels natural to me,;Be careful adding too many operators and patterns... But I'm sure that's why you're doing this survey :)
900;May 30, 2019 12:15:01 pm;May 30, 2019 12:31:15 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243701_5cf02bb52d6594.51565821;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;46;function;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;91;;;;;;;;;;;;;;;;;;;;;;Line 5;add parenthesis at the end;89;;;;;;;;;;;;;;;;;;;;;174;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> (_ => new Jar(_)) 	|> (_ => add(""spicy paste"", _)) 	|> stir 	|> (_ => ferment(_, 2)) 	|> await 	|> (_ => _.takeOne())";a bowl of jogurt with berries;identifiers;;almost missed the second half of the long if statement on line 13. I'm finding the underscore confusing because it's hard to reason about what exactly that value should be, and the _ identifier doesn't imply any sort of meaning;;;;;;;;;;;;;The Status quo;;like the experience of typing the characters? I mean the keys are hard to reach but I didn't have an issue with that;I don't like the use of underscore in the examples, I think a more descriptive name would be easier to understand. I now get that each line has to have a one argument function, but I feel that could be better explained. also, I don't like how await has to be its own line, it isn't immediately clear that it applies to the line above and not the one below
901;May 30, 2019 12:15:52 pm;May 30, 2019 12:26:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243752_5cf02be86b75f9.16936314;;;nested vs flattened;more than 10 years;Advanced;Java;;85;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 10;), 14;179;;;;;;;Line 5;Use await;59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Missing await frequently.;Type annotations;More number of unnecessary variables;Nothing. Avoid this altogether;Nothing;;;;;;
905;May 30, 2019 12:19:30 pm;May 30, 2019 12:55:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559243970_5cf02cc2b14430.58892420;;;flattened vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);PHP;290;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;Add missing y;233;;;;;;;Line 6;unsure;1277;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;130;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> Jar(#)  |> add(""spicy paste"", #)  |> stir  |> await #  |> #.takeOne();";;;;;a bowl of jogurt with berries;whitespace formating;;hating the ternery operator;;;;;;;;;The proposal;;Good;Using # is muich clearer than an _ - which brings to mind t he popular lodash and underscore.js which leads to confusion
906;May 30, 2019 12:20:06 pm;May 30, 2019 12:49:15 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559244006_5cf02ce6861124.50166293;;;nested vs both;5-10 years;Advanced;JavaScript;;112;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 2;326;;;;;;;;;;;;;;;;Line 9;await #;143;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));96;;;;;;;;;;;;;;;;;;;;;289;"const kimchi = ""cabbage""    |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;ok;
909;May 30, 2019 12:28:25 pm;May 30, 2019 12:57:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559244504_5cf02ed8e56821.86091609;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;198;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 1;Add the argument, or build a factory that memoizes the missing argument;165;;;;;;;;;;;;;;;;Line 10;await is a keyword and not a function, so it doesn't get passed the #.  Needs the #;331;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;309;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy taste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);nested ternaries are a bummer;I read it / internalized it before I checked the values of the json and maybe that helped a bit;;;;;;;;;The proposal;;Felt reallll nice :);This needs to be a thing
912;May 30, 2019 12:27:54 pm;May 30, 2019 1:29:44 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559244474_5cf02ebaa1a981.80698420;;;nested vs proposal 2;0-2 years;Advanced;JavaScript;;504;"""number""";"""error""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"Appending a "", 14"" to the round bracket";463;;;;;;;;;;;;;;;;Line 9;"""await #"", otherwise await is thought to be a function";104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;340;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;I am actually well-trained with reading overly complicated ternary operations (Because I have often sinned this way, lol) which made the understanding generally a bit easier for me. Otherwise I went from top to bottom which went quite well, the pipeline operators really helping as opposed to the default Javascript functions syntax. The indented ternaries also helped to have a good oversight quite a bit as well. I have not really become acquainted with ES6 destructuring and arrow functions, so line 12 was the greatest struggle for me;;;;;;;;;The proposal;;It takes a bit getting used to, but after a while it works acceptably. From the typing and workflow perspective however, writing a (from the editor auto-completed) `()` is still a faster and more comfortable way. Adding to that, there's probably no way an editor can safely make writing `|>` easier I am using a german QWERTZ layout, so the `|`, `< ` and `>` characters are all on the same key;
914;May 30, 2019 12:31:07 pm;May 30, 2019 12:49:02 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559244667_5cf02f7b4c8193.10568655;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;66;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;add the missing letter;112;;;;;;;;;;;;;;;;;;;;;;Line 5;add the missing parenthesis;36;;;;;;;;;;;;;;;;;;;;;373;"const kimchi = wash(""cabbage"") |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;The evaluation of the predicates of the if statement was show because I was going back to the booleans at the top and at the result of fetch.;;;;;;;;;;;;;The proposal;;I am already familiar with this operator from other languages so I am probably biased. I believe that it is definitely an improvement couple make that cold compact and more readable.;
917;May 30, 2019 12:34:05 pm;May 30, 2019 2:33:26 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559244845_5cf0302dac9599.15531281;;;flattened vs proposal 1;3-5 years;Intermediate;TypeScript;;100;number;"""object""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 4;const cabbageJar = Jar(crushedCabbage);226;;;;;;;;;;;;;;;;;;;;;;Line 5;|> Jar;91;;;;;;;;;;;;;;;;;;;;;6186;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |>(_ => ferment(_, 2)) |> await |>(_ => _takeOne())";a bowl of jogurt with berries;density of operators;;Conditional statements.;;;;;;;;;;;;;The proposal;;Ok.;No.
919;May 30, 2019 12:34:52 pm;May 30, 2019 12:47:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559244892_5cf0305cd03a31.23807935;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;19;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;spell salty correctly;16;;;;;;;;;;;;;;;;;;;;;;Line 5;missing close bracket;50;;;;;;;;;;;;;;;;;;;;;363;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(_, ""spicy paste""))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;whitespace formating;;checking the if statements Checking the return statement and the indenting;;;;;;;;;;;;;The proposal;;Pretty east;It's like the arrow notation - once you get used to it it is second nature
923;May 30, 2019 12:39:18 pm;May 30, 2019 1:03:23 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559245158_5cf03166c74511.85037028;;;nested vs flattened;3-5 years;Advanced;JavaScript;;133;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 11;add day length;217;;;;;;;Line 6;"fix variable name (add ""y"")";73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cuttedCabbage = cut(washedCabbage); const saltedCabbage = salt(cuttedCabbage); const cabbageJar = new Jar(saltedCabbage); const spicedCabbage = add(""spicy taste"", cabbageJar); const stiredCabbeg = stir(spicedCabbage); const kimchiJar = await ferment(stiredCabbage, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;To see which parameters are belonging to which function;Compact;This one is OK, but it could be difficult to follow the path if the lines are mixed, or if it is many parameters for each function.;Easy to verify which parameters goes into which function.;Piping would have been preferred over both of these.;;;;;;
925;May 30, 2019 12:40:51 pm;May 30, 2019 1:02:44 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559245251_5cf031c3261900.98669657;;;nested vs proposal 2;more than 10 years;Expert;TypeScript;;112;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;", 14);";172;;;;;;;;;;;;;;;;Line 9;await #;191;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;204;"const KimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Referencing the consts and some other functions which weren't defined anywhere such as fillBowl and fillGlass;;;;;;;;;The proposal;;I am used to it due to Scala pipe operator which is the same as this.;Add under score syntax sugar for functions. IE: foo.map(_.propOnFoo) instead of foo.map(x => x.propOnFoo)
928;May 30, 2019 12:45:25 pm;May 30, 2019 1:15:39 pm;Complete;;;English;;1559245525_5cf032d57b3e85.71143921;;;flattened vs proposal 2;3-5 years;Advanced;Other - Write In (Required);C#;164;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 5;fix resulting variable name;254;;;;;;;Line 9;put await in a previous line;109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;341;"""cabbage""|>wash|>cut|>new Jar(#) |>add(""spicy paste"", #) |>stir|>await ferment(#, 2)";;;;;a bowl of jogurt with berries;nested pipelines;;"Looking up for ""free"" variables took a time. Nested ?: operators lloks ugly ";;;;;;;;;Other - Write In (Required);Wile piping are good for sequential calls it is not so common in my code;Ok;
932;May 30, 2019 12:57:17 pm;Jun 3, 2019 8:26:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559246236_5cf0359cef3b40.69280637;;;nested vs both;5-10 years;Advanced;TypeScript;;2189;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;", 14);";25;;;;;;;;;;;;;;;;Line 9;await #;198;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));40;;;;;;;;;;;;;;;;;;;;;305;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""water"", #)   |> stir(#)   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;First couple times were brand new and felt a little different, but it made sense to me and I was getting used to it by the end of writing the refactored code.;I've been writing JS long enough to understand the current status quo and use it without too many problems, but one of my biggest dislikes of it is how far away arguments of the same function need to be placed sometimes (i.e. seeing several lines of code between one argument and the next).  I like the pipeline proposals, but I prefer the # syntax because it seemed easier to read, with less visual noise than the wrapper functions version.
936;May 30, 2019 12:58:11 pm;May 30, 2019 2:21:32 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559246290_5cf035d2e360e9.01095529;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;80;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;rename salty to salt (or vice versa);580;;;;;;;Line 10;put the await in the same line as ferment;247;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;256;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> await ferment(#, 2)";;;;;a bowl of jogurt with berries;too many if statements;;I tend to read two lines at a time, always re-reading the previous line for better context.  A single line of (unfamiliar) code on it's own generally doesn't give a lot of information, only when combining it with a context it makes more sense, and the context for each line is the previous line where variables were declared, functions were invoked, etc.  what slowed me down was the fact the ternary statements were very long and so reading a couple of lines each time was harder.   the pipe operator itself made things easier though, context was clear and was easy to follow.;;;;;;;;;The proposal;;was on a mobile, so probably doesn't really matter since most people don't develop on mobile ð;can the SyntaxError be clearer about # symbol? being more explicit about a missing #, instead of saying it's not defined or something.
938;May 30, 2019 1:02:20 pm;May 30, 2019 1:15:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559246540_5cf036cc595ab9.65493733;;;flattened vs proposal 1;3-5 years;Advanced;TypeScript;;94;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Change to saltyCabbageJar;107;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis;42;;;;;;;;;;;;;;;;;;;;;163;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;The values being decoupled from the actual calls is confusing, such that understanding the fetch requires knowing the previous line. The dense code at the end  of the top pipeline was also difficult to understand because of it's formatting;;;;;;;;;;;;;The Status quo;;A little awkward;
939;May 30, 2019 1:02:48 pm;May 30, 2019 1:39:46 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559246568_5cf036e82cc4d7.58119547;;;flattened vs proposal 2;5-10 years;Intermediate;Java;;172;integer;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;I like the proposal better;;;;;;;;;;Line 6;Add y to variable name;230;;;;;;;Line 9;await #;187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;446;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Unnecessary inner function in line 12;;;;;;;;;The proposal;;;"It's confusing that you sometimes need to use the #, even if it seems like there is no additional argument present, e.g. ""new Jar(#)"" or ""await #"""
940;May 30, 2019 1:02:55 pm;Jun 6, 2019 11:39:01 am;Complete;;;English;;1559246575_5cf036ef68cea8.57326109;;;flattened vs both;more than 10 years;Expert;JavaScript;;111;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;saltCabbageJar ===> saltyCabbageJar;103;;;;;;;;I have no idea;187;;;;;;;;;;;;;Line 5;Add ) to the end;65;;;;;;;;;;;;;;;;;;;;;225;"const kimchiJar = ""cabbage""  |> wash |> cut |>salt |> (_=>new Jar(_)) |> (_=>add(""spicy paste"", _) |> stir |> (_=>ferment(_, 2) |> await  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Current status quo;;;;Not good. I have limited mobility, and it extensively uses characters that have been placed out of the way on a US keyboard.;This seems much better handled by userland chaining libraries. 
941;May 30, 2019 1:04:01 pm;May 30, 2019 1:28:43 pm;Complete;;;English;;1559246641_5cf03731cf57d7.25449774;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;81;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"pass 14 as the second parameter to ferment. Add "", 14"" after the close-paren on line 10.";196;;;;;;;;;;;;;;;;Line 9;"write ""await #"" on line 9 so the code knows to await the Promise";278;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;184;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;the anonymous function on line 12 was inconsistent with the style of the rest of the code snippet. I felt it would have been easier to simply write:    ? #.wine |> fillGlass  or even:     ? fillGlass(#.wine);;;;;;;;;The proposal;;Not too difficult. Just have to get used to holding shift for two characters in a row. And I imagine it will be even easier when the feature is adopted by the big IDEs like VS Code and Atom.;
944;May 30, 2019 1:07:09 pm;May 30, 2019 1:27:46 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559246829_5cf037edb3e2a6.35101395;;;flattened vs both;0-2 years;Intermediate;Python;;139;function;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 1;Define wash?;137;;;;;;;Line 1;Define wash?;146;;;;;;;;;;;;;Line 5;Add a parenthesis to the end of the line;142;;;;;;;;;;;;;;;;;;;;;308;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await |> ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;Pipeline;;;;It sucked on mobile. I don't think it would be that bad on PC though. It would be a good thing for intellisense to do.;The pipeline format is more easily understandable, but the # method looks very clean.
947;May 30, 2019 1:15:37 pm;May 30, 2019 2:26:09 pm;Complete;;;English;;1559247337_5cf039e9d6b505.25725306;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;90;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;3376;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));27;;;;;;;;;;;;;;;;;;;;;204;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => takeOne(_));";a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;Other - Write In (Required);Depends on the situation.  Longer chained events of single arguments of the same time look cleaner with new proposal;Awkward;
957;May 30, 2019 1:33:00 pm;May 30, 2019 1:56:54 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559248380_5cf03dfc96a867.10869915;;;flattened vs both;more than 10 years;Expert;Other - Write In (Required);C#;125;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;using the correct name saltyCabbageJar;200;;;;;;;Line 10;await #;153;;;;;;;;;;;;;Line 5;add missing );83;;;;;;;;;;;;;;;;;;;;;499;"why not add helper functions for currying ?  const kmchi = ""cabbage""     |> wash     |> cut     |> salt     |> (salted => new Jar(salted))     |> curryr(add, ""spicy paste"")     |> stir     |> curryl(ferment, 2)     |> await";;;;;;;;;;;;;;;Pipeline;;;;like home;im fine with the lambdas requiring the parameter names, the _ seems fine. but i think the # is just too much.    easy to read > easy to write.
959;May 30, 2019 1:37:35 pm;May 30, 2019 1:51:49 pm;Complete;;;English;;1559248655_5cf03f0f0d58e7.62868964;;;nested vs both;3-5 years;Intermediate;Java;;104;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;", 14);";100;;;;;;;;;;;;;;;;Line 9;await #;94;;;;;;;;;;;;;Line 5;(_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;196;"const kimchi = ""cabbage""  |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> takeOne";;;;;;;;;;;;;;;Pipeline with #;;;;felt oky after a few uses;I think its better to write just `await` and not `await #`
960;May 30, 2019 1:38:58 pm;May 30, 2019 2:01:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559248738_5cf03f6238faf9.53067962;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;85;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 2);";118;;;;;;;;;;;;;;;;Line 9;|> await #;154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;383;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;Recognising the context of each statement as I delved into a single expression but had to retreat back up in context to remember which portion of the overall statement I was in and what would come next;;;;;;;;;The proposal;;On mobile, difficult but not crazy since you shouldn't code on mobile anyways;I think this is much more clear than the status quo, and I also like being explicit about where the pipe would lead to without needing to create wrapper functions with no purpose other than direction.
961;May 30, 2019 1:40:20 pm;May 30, 2019 2:47:01 pm;Complete;;;English;;1559248820_5cf03fb41519d9.17128484;;;flattened vs proposal 2;5-10 years;Expert;TypeScript;;126;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"Fix typo such as salt""y""CabbageJar";403;;;;;;;Line 9;"Add ""#"" at the end of line";554;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;279;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);matching parentheses;"Read lines from the beginning. At the line 8, check matching parentheses and determine ""#.jogurt && #.jogurt.ready && isBreakfast"" is true then this line is true. At the line 9, appear the ternary operator, thus I understand to enable to skip this line 11-13. Finally I read ""#.jogurt |> fillBowl |> add(""barries"", #)"".";;;;;;;;;The Status quo;;No problem.;The pipeline operator is poor for parallel processing that use `Promise.all`, and this approach is broken when it need to hold the values ââof multiple arguments. IMO, the pipeline operator is unnecessary.
962;May 30, 2019 1:40:20 pm;May 30, 2019 2:00:32 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559248820_5cf03fb49e1235.43198484;;;flattened vs proposal 1;5-10 years;Intermediate;Other - Write In (Required);PL/SQL;103;"""number""";"""error""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";360;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));60;;;;;;;;;;;;;;;;;;;;;94;;a bowl of jogurt with berries;whitespace formating;;;;;;;;;;;;;;;The proposal;;Kind interesting.;Add that to ES.
968;May 30, 2019 1:47:22 pm;May 30, 2019 2:15:05 pm;Complete;;;English;;1559249241_5cf04159e85ce1.38986480;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;168;3;"""function""";;;;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;184;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a paren (This didn't take me as much time, as I didn't realize the error was a syntax error on the previous question);51;;;;;;;;;;;;;;;;;;;;;256;"const kimchiJar = ""cabbage""  |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"",_)) |> stir |> (_ => ferment(_, ""2"")) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;I usually use prettier so I'm very accustomed to a specific format so not having the if statements lined up and parenthesized the same way as I normally read code made it a bit slower.  The nested pipelines were really what slowed me down in reading it as well as not having a definition or fake definition for fillBowl, add etc.  If it was formatted properly I don't think I would have a difficult time with this statement.;;;;;;;;;;;;;The proposal;;It was fine, I've used it in other languages like Elm and it's reasonably useable I'll build muscle memory for it;"At first I didn't like this but after seeing it in use with the fetch API I appreciated it a lot more, I was surprised to discover I liked await being on different lines, but I would probably add whitespace to the pipeline statement if possible to break things up logically ie.   const result = ""url""  |> (_ => fetch(_, options)  |>await |> (_ => (_.ok ? _.json() : _.text()))  |> await |> more stuff"
969;May 30, 2019 1:44:00 pm;May 30, 2019 2:12:29 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559249040_5cf04090c90a81.99515691;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;142;3;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;131;;;;;;;;;;;;;;;;Line 9;|> await #;126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;323;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;"Multiline/nested ternaries are always a terrible idea. The whole point of a ternary is to handle SIMPLE conditional logic on a SINGLE LINE. I would refactor the final pipeline to live in it's own function, and use traditional ""if"" statements for clarity.";;;;;;;;;The proposal;;It will take some getting used to, since I would need to develop the muscle memory, but it's as intuitive an operator as I can imagine for this functionality. There aren't many left to choose from!;"The only parts of the proposal above that stuck out as strange are 1) the ""await"" workflow and 2) the rules around omitting a function's arguments.  1) Though I can clearly understand that ""await"" is being called on the Promise returned by ""ferment"", I would still expect that it can/should be combined into a single line like: ""|> await ferment(#, 2)"".  2) It's unclear to me when a function which takes and argument can be called while omitting #, like ""wash"" and ""salt"" in the above proposal. Are we expected to assume that a function taking a single argument will receive # as the argument if you omit all arguments?"
972;May 30, 2019 1:56:53 pm;May 30, 2019 3:49:26 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559249813_5cf04395234460.56503683;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;467;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;2065;;;;;;;;;;;;;;;;Line 9;await #;537;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;370;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Assuming no errors in the first 7 lines. Evaluate boolean operators in first if statement (== true), this took the most time. Second if statement ignored as the first evaluated to true.;;;;;;;;;The proposal;;|> is an unfamiliar set of keystrokes. I'd get used to it with practice.;There is a definite readability advantage to the proposed structure. But, like most things, that could/will be abused. I'm sure there will be use cases for both styles.
975;May 30, 2019 2:10:42 pm;May 30, 2019 2:39:46 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559250642_5cf046d2bd8d10.39876938;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;161;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Change  salt to salty;169;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ) to end of line;65;;;;;;;;;;;;;;;;;;;;;672;"const kimchiJar  = ""cabbage""  |> cut  |> salt  |> (_ => new Jar (_))  |> (_ => add (""spicy paste"", _)  |> stir  |> (_ => ferment (_, 2))  |> await  ; const kimchi = kimchiJar.takeOne ()";null;Other - Write In (Required);_ identifiers;_ identifiers;;;;;;;;;;;;;The Status quo;;I'm using a phone so Im dying;I don't  like taking upa whole line for await.  But this can be done on one line  I hate the wrapper functions.  Especially just to use the new keyword
976;May 30, 2019 2:11:29 pm;May 30, 2019 2:41:26 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559250689_5cf04701b7d501.32175750;;;flattened vs proposal 1;more than 10 years;Intermediate;Other - Write In (Required);Julia;221;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";78;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));32;;;;;;;;;;;;;;;;;;;;;241;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.take_one());";a bowl of jogurt with berries;identifiers;;"I thought the code was pretty readable and I was able to step through it line by line. Keeping track of variable names in the nested anonymous functions seems to be the messiest part to me (two different uses of ""jogurt""; use of ""_"" without semantic meaning in rather long function).";;;;;;;;;;;;;The Status quo;;"I like the ""|>"" operator, I just find that the definitions of the anonymous functions create quite a bit of visual noise.";"I would definitely use the pipe operator for one-argument functions (e.g. ""wash"" and ""salt""). For more complex cases that require anonymous functions, I would probably define variables for intermediate results, unless these are hard to name."
981;May 30, 2019 2:15:47 pm;May 30, 2019 2:32:01 pm;Complete;;;English;;1559250947_5cf048035792c7.41155337;;;nested vs flattened;5-10 years;Intermediate;Other - Write In (Required);Go;159;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 1;Add an additional argument to the call to ferment;100;;;;;;;Line 6;Correct the invalid variable to saltyCabbageJar;140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbage = salt(cut(wash(""cabbage""))); const preparedKimchi = stir(add(""spicy paste"", new Jar(preparedCabbage))); const fermentedKimchi = await ferment(preparedKimchi, 2);  const kimchi = fermentedKimchi.takeOne();";;;;;;;;;;Multiple arguments in multiple nested function calls.;Splitting pieces of functionality into multiple steps, the first step of creating and fermenting the jar, and the second step of getting a pickle from the jar.;Too many splits of the functionality, nothing is gained from splitting the washing of the cucumber with creation of the jar. And it's not any easier to read with half of them only containing a single argument.;The function calls with more than one argument being split into different steps makes things easier to comprehend.;;;;;;;
982;May 30, 2019 2:16:17 pm;May 30, 2019 2:27:50 pm;Complete;;;English;;1559250977_5cf048219d3ea7.63063325;;;nested vs both;3-5 years;Beginner;Python;;175;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;Line 8;;100;;;;;;;;;;;;;;;;Line 8;;66;;;;;;;;;;;;;Line 8;;26;;;;;;;;;;;;;;;;;;;;;46;;;;;;;;;;;;;;;;Current status quo;;;;;
984;May 30, 2019 2:20:11 pm;May 30, 2019 3:37:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559251211_5cf0490bc5e648.41407078;;;flattened vs proposal 1;5-10 years;Intermediate;JavaScript;;4446;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;;34;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) at the end;31;;;;;;;;;;;;;;;;;;;;;20;;null;;;;;;;;;;;;;;;;;;;
985;May 30, 2019 2:24:52 pm;May 30, 2019 2:54:51 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559251492_5cf04a2448c933.06460966;;;flattened vs proposal 2;5-10 years;Intermediate;JavaScript;;373;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const suerkrautJar = await ferment(saltyCabbageJar, 14);";85;;;;;;;Line 9;await #;152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;239;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #)  |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;ifs and ternary evaluation took the most cognitive load.;;;;;;;;;The proposal;;slightly cumbersome due to both characters involving a shift. Only slightly moreso than the fat arrow;
986;May 30, 2019 2:31:57 pm;May 31, 2019 8:44:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559251916_5cf04bccd76888.58024040;;;nested vs both;0-2 years;Intermediate;JavaScript;;69;"""number""";"""error""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;add numdays param;163;;;;;;;;;;;;;;;;;;63626;;;;;;;;;;;;;Line 5;add ) at end;51;;;;;;;;;;;;;;;;;;;;;303;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Made a few backslashes on accident at first, after then no issue;I enjoy the pipeline proposal, and would write my javascript this way given the choice
987;May 30, 2019 2:19:20 pm;May 30, 2019 3:26:38 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559251160_5cf048d8b6de61.25979821;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;267;"""number";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"change ""saltCabbageJar"" to ""saltyCabbageJar""";196;;;;;;;;;;;;;;;;;;;;;;Line 5;"add an extra "")"" to the end of line 5";64;;;;;;;;;;;;;;;;;;;;;97;In the new pipe syntax? nah. Shit is serious garbage. ;a bowl of jogurt with berries;Other - Write In (Required);underscores everyhwere, super hard to read;"I read top to bottom (obviously?), tried to look at what the if statements were trying to convey. All the underscores, awaits, and ""|>"" pipes slowed me down. Why would we need something like this in js?";;;;;547;;;;;;;;The Status quo;;"Kinda hard, harder than ""=>"" which I already think is kind of a dumb js operator.";I really hope this doens't get adopted in a future ES version lol.
989;May 30, 2019 2:26:36 pm;May 30, 2019 10:21:41 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559251596_5cf04a8cbb6ed4.61758713;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;196;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;, numDays;339;;;;;;;;;;;;;;;;Line 9;await #;136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;270;const kimchiJar = 'cabbage' |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();;;;;a bowl of jogurt with berries;nested pipelines;;line 12;;;;;;;;;The proposal;;it's okay;
990;May 30, 2019 2:46:31 pm;May 30, 2019 3:30:05 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559252791_5cf04f37771968.11296603;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;277;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;There is a typo in variable name;135;;;;;;;Line 2;"there is no func called ""wash""";321;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;372;"const pickle = ""cucumber"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne();";;;;;a bowl of jogurt with berries;identifiers;;The most slow and inconvenient part is to understand what variable equals to.  I see #.jogurt, but I need to search the value. I see #jogurt.ready, but I need to search the value. I see isBreakfast, but I don't remember the value and again need to search. Everything else is quite easy.;;;;;;;;;The proposal;;I like it;Not sure if # is simply readable. Maybe smth like $item (an actual word) would be better.
991;May 30, 2019 2:46:53 pm;May 30, 2019 4:02:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559252813_5cf04f4db15b50.67311219;;;nested vs proposal 1;more than 10 years;Advanced;Other - Write In (Required);PHP (come on, Clojure and Haskell make the primary list, really?);2091;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Never in my current work - we're not nearly this advanced yet.;;;I like the proposal better;Line 11;""", 14"" - the ferment() call needs number of days, 2 weeks = 14 days";499;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Close the function expression with "")""";52;;;;;;;;;;;;;;;;;;;;;511;"const kimchi = ""cabbage"" |> wash |> (_ => cut(_)) |> (_ => salt(_)) |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> (_ => stir(_)) |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);"compound conditions - evaluating each one to its result, moving to the next, figuring out which will come out ""true""";"The one-at-a-time style of the Pipeline is handy to reduce the nested-call deciphering normally needed (or the pyramid effect of breaking & indenting lines).  i'm still getting used to arrow functions, but the vertical stack makes it a little easier to go with the flow: ""the thing from this line gets passed to the thing on the next line, just enjoy the ride.""  The condition blocks are normal, but long lines with compound conditions and groupings slow down determination of the result. i tend to break groups into separate lines, and long groups into semi-logical lines that align to each other. It helps move top-down a little faster, more like an elementary school math problem.";;;;;;;;;;;;;The proposal;;"The characters are a little awkwardly placed, but it's not too bad. Not nearly as tedious as ""dash/equal then shift plus ."" for -> or => in PHP. All other nastiness of PHP aside, it's accessor syntax is the worst.";"It's an interesting operator idea, and visually representative of its purpose. i haven't seen that exact symbology in other languages, so it might be hard to get people accustomed to it (especially since i also can't think of other languages other than CLI that have a ""pipeline"" syntax at all).  But i definitely like the idea of inverting the order of operations from inward-out to left-to-right. It's far more natural to read."
994;May 30, 2019 2:53:28 pm;May 30, 2019 4:59:55 pm;Complete;;;English;;1559253207_5cf050d7ee2df2.99413172;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;5145;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrauJar = await ferment(saltyCabbageJar, 14);";1010;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));166;;;;;;;;;;;;;;;;;;;;;508;"const pickle = ""kimchi"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ =>add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;Quickly eliminate the false statements to narrow down to the true condition but reading the return on line 14 was confusing;;;;;;;;;;;;;Other - Write In (Required);Not sure, but I want to like it;Awkward since I usually do not use my pinky to stretch to the | key followed by index down to >.;
997;May 30, 2019 2:58:29 pm;May 30, 2019 3:10:26 pm;Complete;;;English;;1559253509_5cf052059b5229.12949883;;;flattened vs proposal 2;more than 10 years;Advanced;TypeScript;;56;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;variable was named saltyCabbageJar;146;;;;;;;Line 9;await # OR combine 8/9 await ferment(#, 14);77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;99;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#) const kimchi = kimchiJar.takeOne() ";;;;;a bowl of jogurt with berries;Other - Write In (Required);nested conditionals;slowed down parsing which condition evaluated true on lines 8/9;;;;;;;;;Other - Write In (Required);fairly neutral;Somewhat awkward, but probably would learn it;
999;May 30, 2019 3:02:37 pm;May 30, 2019 4:45:49 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559253757_5cf052fd49fc78.78079993;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;255;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;line 6 typo fix: change saltCabbageJar to saltyCabbageJar;289;;;;;;;;;;;;;;;;;;;;;;Line 5;line 5: append a close parenthesis to end of line;126;;;;;;;;;;;;;;;;;;;;;1215;"const kimich = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste""))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;"1. Nested pipelines are a bit tricky if not ""pretty"" styled (esp at the return statement). 2. Many ""&&""s with ""||"" not easy on the eye.";;;;;;;;;;;;;The proposal;;Easy;Ja... comparing the two again... It's going to take some getting used to the shortcut syntax. Less to type but maybe it is harder to follow than the original but, over time it'll get easier. And maybe it is more likely to introduce poor coding practises? Thanks
1003;May 30, 2019 3:14:30 pm;May 30, 2019 3:26:22 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559254470_5cf055c63c8b50.96662455;;;flattened vs proposal 2;more than 10 years;Intermediate;Ruby;;81;"""Integer""";"""function""";;;;;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;add a y to salt-Y-CabbageJar;136;;;;;;;Line 5;I haven't a clue;48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;69;Sorry, due to constant need for coding for IE11, my await/async skills are lousy.;;;;;a bowl of jogurt with berries;Other - Write In (Required);too many ternary statements.;The code wans't too bad, until I got to line 11.  Then I had to go back and dis-entangle the ()'s and figure why someone compacted a if-then-else (if then else). YUCK.;;;;;;;;;The proposal;;;I didn't quite get the # operator, but after reading the second part of the code, I got it.  May want to use $1 instead.  Long history of being a positional operator. :), also very bash(ish)
1004;May 30, 2019 3:15:37 pm;May 30, 2019 3:34:47 pm;Complete;;;English;;1559254537_5cf05609466640.98656882;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;117;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";160;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) at the end;91;;;;;;;;;;;;;;;;;;;;;88;;a bowl of jogurt with berries;nested pipelines;;Bare awaits in the pipeline, return statements that kind of start a block of code making one have to read ahead adding things to the working memory;;;;;;;;;;;;;The proposal;;Weird but I could get used to it ;
1007;May 30, 2019 3:25:54 pm;May 30, 2019 3:42:58 pm;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559255154_5cf058726ff9c9.22937761;;;flattened vs proposal 2;0-2 years;Intermediate;TypeScript;;71;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Salty instead of salt;197;;;;;;;Line 2;I don't know;73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;77;I can't on mobile;;;;;null;density of operators;;;;;;;;;;;Other - Write In (Required);Other;;
1013;May 30, 2019 4:01:14 pm;May 30, 2019 4:18:23 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559257274_5cf060ba727945.79736200;;;nested vs proposal 1;0-2 years;Intermediate;Python;;65;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;provide `numdays` parameter;114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;close paranthesis;123;;;;;;;;;;;;;;;;;;;;;333;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste, _))   |> stir   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;;;;;The proposal;;Probably my least favorite part of the proposal. I would create a macro in vim so I wouldn't have to type it, it's not a convenient section of the keyboard even if it looks nice to read!;
1014;May 30, 2019 4:01:26 pm;May 30, 2019 4:30:04 pm;Complete;;;English;;1559257286_5cf060c6ad49d5.33839688;;;flattened vs both;more than 10 years;Expert;JavaScript;;80;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";230;;;;;;;Line 10;I don't know.;318;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));102;;;;;;;;;;;;;;;;;;;;;376;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;It is fine.;"More explicit seems less error prone. It was easiest to find the error in the status quo, and harder in the pipeline. However, the number sign seems to make it even harder than the normal pipeline, since the function expressions are standardized in the ""pipeline"" version. This is the same class of problems that the ""async"" and ""await"" keywords introduced (i prefer using promises directly since it becomes much harder to understand what is going on using async and await)."
1017;May 30, 2019 4:25:36 pm;May 30, 2019 4:48:20 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559258736_5cf06670d84673.10255603;;;flattened vs proposal 1;5-10 years;Intermediate;JavaScript;;64;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;add async or remove await and use promises then put the rest of the code after await inside the then block;258;;;;;;;;;;;;;;;;;;;;;;Line 9;remove the function and just keep takeOne;98;;;;;;;;;;;;;;;;;;;;;150;;null;whitespace formating;;i had trouble reading pipes operator that go on a next line;;;;;;;;;;;;;The proposal;;I didn't knew I had to actually try it;
1018;May 30, 2019 4:36:19 pm;May 30, 2019 4:53:52 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559259379_5cf068f39f24f2.91974301;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;116;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;Rename;150;;;;;;;;;;;;;;;;;;;;;;Line 5;Add parent;98;;;;;;;;;;;;;;;;;;;;;150;No;null;nested pipelines;;Nested pipelines ;;;;;;;;;;;;;The proposal;;Not hard;
1019;May 30, 2019 4:39:31 pm;May 30, 2019 5:09:17 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559259571_5cf069b34f5d18.36649610;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;229;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 11;"Add 14 as an argument for ""ferment""";112;;;;;;;;;;;;;;;;Line 9;"This was tough. I think ""await #"" ?";162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;402;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne();  // Although, I might break this up in smaller pipelines for clarity's sake. I.e. differentiate the synchronous composition from the asynchronous evaluation. // Also, I think the use of unary functions would make it easier to compose these pipelines, especially when using currying to allow partial application.";;;;;a bowl of jogurt with berries;Other - Write In (Required);Nested ternary combined with too many boolean operators. Extract to functions with readable names.;"I think it was not that bad, actually.  The pipeline makes it easier to read from top to bottom and from left to right (compared to traditional nested function calls or some sort of composition operator).  Therefore, I started reading from left to right, top to bottom. The ternary operators + boolean operators made it slightly more difficult, but I knew I could stop reading when one of the ""or"" operands was met. The code formatting helped understanding the ternaries a lot!";;;;;;;;;The proposal;;It was OK. There's some prior art for it (Elixir, F#, OCaml, Julia).;I like how the language is evolving and the documentation is getting better (especially through MDN)! However, I would like it if 'more official' sources would guide newcomers towards better design principles.  I expect the pipeline operator to be abused to the extent that a single pipelined function will be  difficult to read because of its length or lack of clarity regarding each step. One recommendation would be to give each step a clear name, combine them into composable sub-pipelines and to prefer unary functions over more complex functions. 
1020;May 30, 2019 4:42:22 pm;May 30, 2019 5:06:24 pm;Complete;;;English;;1559259742_5cf06a5ecd7cf3.61587497;;;nested vs proposal 2;5-10 years;Intermediate;Ruby;;76;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;,2);197;;;;;;;;;;;;;;;;Line 2;;709;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49;;;;;;a bowl of jogurt with berries;inconsistent style;;Different types of return values;;;;;;;;;The proposal;;Just fine;
1021;May 30, 2019 4:43:43 pm;May 30, 2019 5:18:20 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559259823_5cf06aafc37897.54208595;;;nested vs both;more than 10 years;Beginner;Python;;1039;int;"""error""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);not sure because of await, but it's difficult to read;;I like the pipeline with the # better;;Line 10;), 14;205;;;;;;;;;;;;;;;;Line 2;define the wash function. It is not defined at all.;131;;;;;;;;;;;;;Line 5;new Jar(_));47;;;;;;;;;;;;;;;;;;;;;315;const pickle = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;I wish it would be one char only. And the same than in bash. aka just |  but definitely a zillion better than the paranthesis.;
1024;May 30, 2019 5:07:23 pm;May 30, 2019 5:23:28 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559261242_5cf0703ade46b2.76768800;;;flattened vs both;5-10 years;Intermediate;C++;;201;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;fix typo;74;;;;;;;Line 10;wrap in a function;66;;;;;;;;;;;;;Line 5;add missing parenthesis;25;;;;;;;;;;;;;;;;;;;;;210;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (x => new Jar(x))   |> (x => add(""spicy paste, x))   |> stir   |> (x => ferment(x, 2))   |> await   |> (x => x.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;not bad;I noticed that making it lower priority than => could save a lot of () (meaning you please more of the lisp haters)
1025;May 30, 2019 5:15:18 pm;May 30, 2019 5:39:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559261718_5cf072167bbe30.62391570;;;nested vs both;3-5 years;Advanced;JavaScript;;183;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;Line 1;"write "", 2"" to the end of line 10";285;;;;;;;;;;;;;;;;Line 9;add #;83;;;;;;;;;;;;;Line 5;add );55;;;;;;;;;;;;;;;;;;;;;174;Not on mobile!;;;;;;;;;;;;;;;Current status quo;;;;Probably fine;Dislike the # syntax. It's completely unlike anything already in JS.  The regular pipeline syntax would be preferable using bound functions maybe, or writing the wrapper functions above.
1026;May 30, 2019 5:18:07 pm;May 30, 2019 5:34:45 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559261887_5cf072bfb3dca0.05744944;;;flattened vs proposal 1;more than 10 years;Expert;TypeScript;;78;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Sometimes;;;I like the proposal better;;;;;;;;;;Line 6;await ferment(saltyCabbageJar, 14);137;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));45;;;;;;;;;;;;;;;;;;;;;124;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> (_ => stir(_, 2))";a bowl of jogurt with berries;whitespace formating;;The new line after `fillBowl` almost caused me to miss the last step in the pipeline. ;;;;;;;;;;;;;The proposal;;Harder than I expected, and this was actually going to be my primary piece of feedback (so I'm glad to see this question). I'd still use the feature, since readability trumps writeability, but it'd be awesome if there was another good syntax option;
1028;May 30, 2019 4:59:20 pm;May 30, 2019 5:51:24 pm;Complete;;;English;;1559260760_5cf06e588645c4.65125900;;;flattened vs proposal 2;0-2 years;Intermediate;TypeScript;;83;3;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;80;;;;;;;Line 9;place # after await;87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;331;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> #.takeOne();";;;;;a bowl of jogurt with berries;nested pipelines;;Considering the operation precedence of pipes;;;;;;;;;The proposal;;Fine;
1030;May 30, 2019 5:44:32 pm;May 30, 2019 6:08:40 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559263471_5cf078efc768c0.60206499;;;nested vs flattened;3-5 years;Intermediate;Other - Write In (Required);PHP;207;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 11;the call to ferment() only provides the first variable. A number of days (14 it sounds like) must be passed as a second argument;150;;;;;;;Line 6;"pass the correct variable name, ""saltyCabbageJar"" with a y";46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""),       cutCabbage = cut(washedCabbage),       saltedCabbage = salt(cutCabbage),       jarredCabbage = new Jar(saltedCabbage),       pastedCabbage = add(""spicy paste"", jarredCabbage),       stirredCabbage = stir(pastedCabbage),       kimchiJar = await ferment(stirredCabbage, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;What makes this truly impossible for me to decipher is all the nested functions and their parentheses being on one line. I literally can't understand it without copy-pasting it into an editor and adding line breaks and indentation to help differentiate each new nested function.  The sheer number of function calls nested one in the other is challenging too, but that's only the second most challenging thing. With line breaks and indentation it would be a lot clearer, without actually changing the pattern.;"Directly passing variables from one function into another, without assignment, cuts down on the number of ""in play"" variables I have to note and think about while skimming the code.";Each step is not particularly in context. The variable names have to be chosen with some care, or else this kind of pattern can require several read-throughs before things can start to make sense.;"One action is taken per line, leading to a vertical rhythym of ""step 1, step 2, step 3..."" It makes the process that this code implements very easy to follow.";;;;;;;
1031;May 30, 2019 5:47:03 pm;May 30, 2019 5:59:22 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559263623_5cf07987c75854.28843947;;;nested vs both;5-10 years;Intermediate;JavaScript;;177;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;"Add "",14""";69;;;;;;;;;;;;;;;;Line 9;Add #;87;;;;;;;;;;;;;Line 5;"Add "")""";22;;;;;;;;;;;;;;;;;;;;;166;"const kimchiJar = ""cabbage"" |> ((_) => wash(_)) |> ((_) => cut(_)) |> ((_) => salt(_)) |> ((_) => new Jar(_)) |> ((_) => add(""spicy paste"", _)) |> ((_) => stir(_))";;;;;;;;;;;;;;;Pipeline;;;;a little verbose;
1035;May 30, 2019 6:23:51 pm;May 30, 2019 7:14:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559265831_5cf08227c5e432.42017815;;;nested vs both;5-10 years;Advanced;JavaScript;;371;number;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);The pattern often, but using variables to hold the values of the inner functions. Making the function much easier to read.;;I like the status quo better;;Line 9;put some number in there;632;;;;;;;;;;;;;;;;Line 7;Return the data to it, |> salt #;216;;;;;;;;;;;;;Line 3;Pass the returned value from cut into pound;79;;;;;;;;;;;;;;;;;;;;;629;"const kimchiJar = ""cabbage"" |> wash |> cut # |> salt # |> new Jar(#) |> add(""spicy paste"", #) |> stir # |> await ferment# |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;It takes a little getting used to. It does look *nix command line functions.;"While I prefer the current ""status quo"" way of writing the functions, the new option using # is easier to read and understand than the pipeline only one."
1038;May 30, 2019 6:41:51 pm;May 30, 2019 7:05:00 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559266911_5cf0865fbbc8b4.88401068;;;flattened vs both;3-5 years;Intermediate;JavaScript;;67;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;await ferment(saltyCabbageJar, 14);440;;;;;;;Line 9;await #;206;;;;;;;;;;;;;Line 5;(_ => new Jar(_));49;;;;;;;;;;;;;;;;;;;;;232;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It's intuitive and simple enough.;Pipeline code may turn really ugly when long function call is used or when there's a need to return a multiple line function.
1040;May 30, 2019 7:01:59 pm;May 30, 2019 7:19:12 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559268119_5cf08b174cc163.36740807;;;nested vs flattened;more than 10 years;Expert;JavaScript;;151;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 1 better;;;;;;Line 11;", 14);";166;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const saltedCabbage = salt(cut(wash(""cabbage""))) const jar = new Jar(saltedCabbage) const stired = stir(add('spicy paste', jar)) const kimchiJar = await ferment(stired) ";;;;;;;;;;;add method to Jar class and add class of vegetable with wash();;alining with = use method in class;;;;;;;
1041;May 30, 2019 7:03:55 pm;May 30, 2019 7:52:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559268234_5cf08b8af002a7.88145627;;;nested vs proposal 1;more than 10 years;Intermediate;TypeScript;;647;"""function""";"""error""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 11;I would add the comma and the lost numdays;406;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;I would add the missing comma and parenthesis;191;;;;;;;;;;;;;;;;;;;;;868;"const kimchijar = ""kimchi"" |> stir |> cut |> salt |> (_ => new Jar(_)) |> (_ add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> _ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;;;;;The proposal;;it was not difficult;Maybe with more practice I can get used to writing code with the proposal
1042;May 30, 2019 7:05:59 pm;May 30, 2019 7:45:13 pm;Complete;;;English;;1559268359_5cf08c0767dd49.00026130;;;nested vs proposal 2;3-5 years;Advanced;Python;;187;number;"""object""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 10;, 14;94;;;;;;;;;;;;;;;;Line 9;await #;37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;365;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> stir |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Nested ternary operators caused me to double check the code flow. I was very able to read the pipeline code, top-to-bottom, without a significant reread. After getting the flow in my head, I checked the variables and answered the question.  The placeholder helped me move MORE QUICKLY. The nested object destructuring slowed be down the most.;;;;;;;;;The proposal;;It's great with my keyboard layout (Programmer Dvorak) because I use two hands, but I could see it being annoying on QWERTY as a single-handed thing. Then again, maybe that's ideal, because you only want to use one hand for an operator;"Seems like the proposal has a typo: line 3 should be ""new Jar(#, 10)"".  I really like the proposal, but I wish we had a better placeholder. '#' is pretty easy to get at, but for many it has the notion of quantity and that's distracting for people not used to code."
1043;May 30, 2019 7:14:27 pm;Jun 26, 2019 2:12:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559268867_5cf08e03603d17.30739573;;;flattened vs proposal 1;0-2 years;Intermediate;JavaScript;;546;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;line6 line7 should in a function;303;;;;;;;;;;;;;;;;;;;;;;Line 8;In a function;116;;;;;;;;;;;;;;;;;;;;;2269830;;null;too many if statements;;;;;;;;;;;;;;;The proposal;;;
1045;May 30, 2019 7:20:09 pm;May 30, 2019 7:59:52 pm;Complete;;;English;https://www.google.com/url?q=https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment&sa=D&source=hangouts&ust=1559355567814000&usg=AFQjCNHJ9Tkq4t3UjTIJpLXpu80X59X7Zg;1559269209_5cf08f5902c202.59314660;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;115;3;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 4;Jar(crushedCabbage);260;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;559;"const kimchi =""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2))   |> await";a bowl of jogurt with berries;too many if statements;;To understand the second if statement, I had to check two previous sections: const values and json contents. This is the most annoying part to read in this code.;;;;;;;;;;;;;The Status quo;;It's unusual but ok.;
1050;May 30, 2019 8:09:46 pm;May 30, 2019 8:26:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559272186_5cf09afaaaa9d2.34794481;;;nested vs proposal 1;0-2 years;Intermediate;Python;;92;integer;"""object""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 11;Add a second argument days. (Assuming wash(string) returns a string.);177;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis at end of line.;54;;;;;;;;;;;;;;;;;;;;;280;"const kimchi = ""cabbage""    |> wash    |> cut    |> salt    |> (_ => new Jar(_))    |> (_ => add(""spicy paste"", _))    |> stir    |> (_ => ferment(_, 2))    |> await    |> (_ => _.takeOne())";a bowl of jogurt with berries;whitespace formating;;No comments! Would normally read those first and see if the code makes high-level sense...  Otherwise, jus sounding it out: luckily most variable names were semantic, so it made sense.;;;;;;;;;;;;;The proposal;;Okay, but awkward.;"It doesn't look pretty.  Maybe try a ""."" like in Haskell for function composition? Or maybe even ""==>"" or something that actually looks like the idea of piping ""~>""."
1052;May 30, 2019 8:26:53 pm;May 30, 2019 8:38:17 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559273212_5cf09efcd4aae8.67895153;;;nested vs flattened;3-5 years;Intermediate;Python;;91;number;;;;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 11;", 2);";47;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5;"const w = wash(""cabbage""); const c = cut(w); const s = salt(c); const j = new Jar(s); const a = add(""spicy paste"", j); const s = stir(a); const f = await ferment(s, 2); const kimichi = f.takeOne();";;;;;;;;;;You have to read it in reverse order, and the parentheses are stacked, which makes it difficult to see what parameters belong to what function.;Indenting and putting on new lines helps.;The names that are assigned have to be written twice every time, even though they aren't useful.;Using short names helps.;;;;;;;
1053;May 30, 2019 8:30:24 pm;May 30, 2019 8:55:05 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559273423_5cf09fcfeb6821.78197893;;;nested vs proposal 2;more than 10 years;Expert;TypeScript;;87;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;, 14;103;;;;;;;;;;;;;;;;Line 2;define wash;192;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;313;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add( ""spicy paste"", #) |> stir |> ferment(#, 2);";;;;;a bowl of jogurt with berries;density of operators;;reading quite well if you keep in mind that left goes into #/argument of right side of |> comlex logical statements  slowing me;;;;;;;;;The proposal;;ok;"- would prefer underscore (_) instead of (#) to keep it consistent with functional language tradition -  in functions with multiple operators implicitly assume # is added to improve readability, e.g. |> add([""water""]) shall be enough in above example - new Jar(#) would prefer to be just new Jar; or  new Jar() and implicit adition of # "
1055;May 30, 2019 8:48:19 pm;May 30, 2019 9:16:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559274499_5cf0a4033afe77.62833904;;;nested vs flattened;5-10 years;Advanced;TypeScript;;53;"""number""";"""function""";;;"y => add(10, y);";;;;;;Very often;Sometimes;I like Pattern 1 better;;;;;;Line 11;),  14;120;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbageJar = new Jar(salt(cut(wash(""cabbage"")));  const kimchiJar = await ferement(add(""spicy paste"", cabbageJar), 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Which open bracket is paired with which closed bracket. In other words, a function application satisfies the called function's signature.;It is easy for me to understand pickle's ingredients;"relationship between pickle and other constants; i.e. causality";Each function is called with proper arguments.;;;;;;;
1059;May 30, 2019 9:09:07 pm;May 30, 2019 9:13:05 pm;Complete;;;English;;1559275747_5cf0a8e32da8a3.07226507;;;nested vs flattened;more than 10 years;;JavaScript;;196;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;;;;;;;;6;;;;;;;;;3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1064;May 30, 2019 9:31:24 pm;May 30, 2019 10:00:02 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559277084_5cf0ae1cd2d137.06961625;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;90;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;const sauerkrautjart = saltCabbageJar && wait ferment(saltCabbageJar, 14);414;;;;;;;Line 5;# && |> new Jar(#);174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;465;"add([""spicy paste"", ""water""], Jar)";;;;;a bowl of jogurt with berries;density of operators;;PIpeline inside short hand;231;;;;;;;;The proposal;;Good;
1065;May 30, 2019 9:33:28 pm;May 30, 2019 11:24:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559277208_5cf0ae983ff474.26876325;;;nested vs proposal 1;3-5 years;Expert;TypeScript;;58;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;add 2 weeks.;285;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add );14;;;;;;;;;;;;;;;;;;;;;5422;"(await ferment(   salt(add(""water"", new Jar(wash(""cucumber"")))),   2 )).takeOne();";null;inconsistent style;;mixed normal function calling and pipelines;;;;;;;;;;;;;The proposal;;fine;
1069;May 30, 2019 9:54:00 pm;May 31, 2019 1:04:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559278440_5cf0b368ca2987.02468794;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;111;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;Add a day integer as the second parameter of ferment function;8030;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing bracket to the end;82;;;;;;;;;;;;;;;;;;;;;271;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;* await in a separate line. * Optional Chaining would be useful to shorten the line. ;;;;;;;;;;;;;Other - Write In (Required);either;clunky. Shift \ for pipe, then Shift . for >;
1070;May 30, 2019 10:00:53 pm;May 30, 2019 10:38:44 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559278853_5cf0b5054fc569.33138399;;;flattened vs proposal 1;0-2 years;Intermediate;JavaScript;;261;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);306;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));101;;;;;;;;;;;;;;;;;;;;;702;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;evaluating the result of if statements took the longest time.;;;;;;;;;;;;;The proposal;;takes getting used to but still better than the verbose status quo;
1074;May 30, 2019 10:19:41 pm;May 30, 2019 11:08:32 pm;Complete;;;English;;1559279980_5cf0b96cd767f3.82628558;;;flattened vs proposal 1;3-5 years;Expert;JavaScript;;83;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;use the correct variable name of `saltyCabbageJar` as the first argument to `ferment`;133;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing parenthesis to the end of the line;40;;;;;;;;;;;;;;;;;;;;;168;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;identifiers;;the use of `_` as a variable name is difficult to read, especially as I am used to `_` being a throwaway variable (here it is more of a pseudo-`this`)  the use of an arrow function which simply calls another function feels needlessly sigiled (too many parens and >Ê¼s lol). the arrow function at the end is actually more readable to me than just `(_ => _.json())` because it is clear what is being tested and what the result will be.;;;;;;;;;;;;;Other - Write In (Required);"The status quo for the example; the proposal may be useful in other situations";fine :P  the similarity with `=>` is interesting;"i feel like the value of the proposal is small for the examples given, since they would be much better served by just writing a wrapper function, and within such a wrapper, i would value verbosity (the status quo) over succinctness.  alternatively, proper function composition would serve these examples well; e.g.,  const pickle = (   (_ => _.then(n => n.takeOne()))   â (_ => ferment(_, 2))   â salt   â add.bind(null, [""water""])   â (_ => new Jar(_))   â wash )(""cucumber"")  i get that this is functionally the same thing as the proposal in reverse, but the fact that after each operation you get a reusable function (e.g., `const prepped = salt â cut â wash`) rather than a value is *much* more useful in the case of building factories/constructors, in my opinion. with this proposal there is no way to easily store and reuse a sequence of function calls short of justâ¦ writing a wrapper function, at which point the utility of the proposal is diminished.  however, there are other use-cases (when one is not just doing simple object-construction) when this proposal might be useful."
1080;May 30, 2019 10:50:34 pm;May 30, 2019 11:45:27 pm;Complete;;;English;;1559281834_5cf0c0aa6a66c8.33051531;;;flattened vs both;more than 10 years;Intermediate;Python;;106;int;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";228;;;;;;;Line 9;await #;276;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));161;;;;;;;;;;;;;;;;;;;;;408;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;Other - Write In (Required);status quo but simply mutate a variable 'x'. While arguably a poor variable name it is as concise as the pipeline;;;JavaScript is typically a syntactically conservative language, and using |> seemed contrived. It felt like Haskell or Perl had suddenly appeared. ;How will developers Google for this unfamiliar operator? Is # a general lambda syntax or is it only valid in a pipeline? Interaction with await is pretty unclear and even the example code appears to be inconsistent. The builder and command pattern are obvious alternatives. How do they compare? How would pipelines and builder pattern compose with each other? |> feels kind of like >>= in Haskell. 
1082;May 30, 2019 11:00:21 pm;May 30, 2019 11:21:51 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559282421_5cf0c2f5594df1.70976216;;;nested vs proposal 2;more than 10 years;Intermediate;Other - Write In (Required);C#;404;"""number""";"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 10;), numberofDays;313;;;;;;;;;;;;;;;;;;113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;80;;;;;;;density of operators;;;;;;;;;;;The proposal;;;
1085;May 30, 2019 11:20:08 pm;May 30, 2019 11:45:59 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559283608_5cf0c7980083f8.58417666;;;nested vs proposal 2;3-5 years;Advanced;Other - Write In (Required);PHP;244;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), numOfDays;152;;;;;;;;;;;;;;;;Line 9;await #;52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;294;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> ferment(#, 2)  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;The only feature that slowed me down was the line 12, I had to reread that line 2 or 3 times.;;;;;;;;;The proposal;;It feels good, I think it's improvement in reading and writing of the code.;
1086;May 30, 2019 11:22:27 pm;May 30, 2019 11:39:29 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559283747_5cf0c823184f31.50369985;;;nested vs proposal 1;more than 10 years;Advanced;Other - Write In (Required);PHP;136;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;"append "", 14""";109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"append "")""";99;;;;;;;;;;;;;;;;;;;;;180;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;Missing the PHP empty() function (for checking _.X.ready in one expression). Also, I think pipelines should either all be in one line or each on its own â mixing the two was weird.;;;;;;;;;;;;;The proposal;;Pretty good.;
1087;May 30, 2019 9:19:40 pm;May 31, 2019 4:49:57 pm;Complete;;;English;https://qiita.com/;1559276380_5cf0ab5cc86b71.34477631;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;140;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 6;;35435;;;;;;;;;;;;;;;;Line 9;;141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42;;;;;;null;too many if statements;;;;;;;;;;;The Status quo;;;
1090;May 30, 2019 11:45:14 pm;May 31, 2019 12:17:14 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559285114_5cf0cd7a3d36a4.54739657;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;78;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;", 14);";96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;196;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);too long pipeline;"It's hard to track the current type in the pipeline, i.e. do I have a promise I have to call await first, or something I can work on immediately? In traditional code, I would combine the awaits with the previous statement instead of having them separate. The other advantage of traditional code is that you can (and should) have descriptive variable names for intermediate results, i.e. for the above code we would have something like  bowlOfJogurt = fillBowl(jogurt); bowlOfJogurtWithBerries = add(""berries"", bowlOfJogurt); return bowlOfJogurtWithBerries;  The pipeline encourages you to omit these descriptive variable names, and use _ instead, if you need a variable at all. (So the one inconsistently named variable `jogurt` in the code is actually helpful, though not much.)";;;;;;;;;;;;;The Status quo;;Very easy (on a German keyboard);"The status quo example has a strange `, 10` in it which probably doesn't belong there. Actually my preferred variant would be something like  const jarOfCucumber = new Jar(wash(""cucumber"")); const saltedCucumber = salt(add([""water""], jarOfCucumber)); const pickleJar = await ferment(saltedCucumber, 2); const pickle = pickleJar.takeOne();  The fact that there are people who try to stuff more code into one statement than they should is no excuse for giving them syntax to encourage them stuffing even more."
1091;May 30, 2019 11:44:06 pm;May 31, 2019 12:40:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559285046_5cf0cd362a8d15.43821391;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;163;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 14);";204;;;;;;;;;;;;;;;;Line 9;|> await #;166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;335;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);line 8;the line 8 is hard to read. because is has too many condition, and i cant remember the value of `isBreakfast` and `isSnackTime`, so i back to line 1-2;;;;;;;;;The proposal;;i think its ok;
1093;May 30, 2019 11:56:34 pm;May 31, 2019 12:21:18 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559285794_5cf0d02227a599.84776968;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;325;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 10;), 14;124;;;;;;;;;;;;;;;;Line 9;|> await #;110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;233;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar(#) 	|> add(""spicy paste"", #) 	|> stir 	|> ferment(#, 2) 	|> await # 	|> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;The self invoking function for filling the glass of wine stumbled my brain a bit;;;;;;;;;The proposal;;"It was my first time typing in pipelines using the ""|>"" symbols, and I was already getting used to it";Looking forward to being able to actually use this.
1094;May 30, 2019 11:58:05 pm;May 31, 2019 12:06:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559285885_5cf0d07d237290.54414496;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;134;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;spell saltyCabbageJar correctly;132;;;;;;;;;70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;67;;;;;;;;;;;;;;;;;;;;;
1095;May 30, 2019 11:58:25 pm;May 31, 2019 12:23:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559285905_5cf0d0919fd6a7.74000509;;;flattened vs proposal 1;3-5 years;Advanced;TypeScript;;91;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar must be renamed to saltyCaabbageJar;108;;;;;;;;;;;;;;;;;;;;;;Line 5;"add "")"" at the end";40;;;;;;;;;;;;;;;;;;;;;179;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await Â Â |> (_ => _.takeOne());a bowl of jogurt with berries;inconsistent style;;"- New Pipeline operator is nice, but requires more thoughts than the ""old"" syntax, especially with async/await, I find this new proposal more difficult - Instead of ""_"", the variable should have a speaking name, i.e ""result"", ""json"" - line 15: it should be ""bowl"" instead of ""jogurt""";;;;;;;;;;;;;The Status quo;;Typing is no problem, we are used to type both chars regularly. But the new operator just looks really ugly IMO. ;"const pickle = ""cucumber""   => wash($?)  In bash scripting, the variable $? exists and represents the result of the last command (or something like that).  It would be easier for developers to use the existing => operator and instead provide a new keyword for the result of the last called function. This would allow the new features of the pipeline operator with the known (and loved) syntax of =>.  IMO, it should be a new keyword and not $?, but I am still unsure about the best name."
1096;May 30, 2019 11:58:35 pm;May 31, 2019 12:17:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559285915_5cf0d09b0c0545.27348989;;;nested vs both;5-10 years;Intermediate;Other - Write In (Required);PHP;345;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;Line 11;",14);";112;;;;;;;;;;;;;;;;;;145;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));34;;;;;;;;;;;;;;;;;;;;;246;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar())   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;It was neat.;"I was surprised that the ""Pipeline with #"" was actually harder to read than the other Pipeline variant."
1097;May 30, 2019 11:58:55 pm;May 31, 2019 12:14:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559285935_5cf0d0af66abd3.13929015;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;295;number;"""function""";;;;;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;;166;;;;;;;;;21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31;;;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;Looks good.;
1099;May 31, 2019 12:02:55 am;May 31, 2019 12:22:18 am;Complete;;;English;;1559286175_5cf0d19fb5cef9.10122707;;;nested vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);Ionic, Jquery Mobile, Angular, IBM MobileFirst, Javascript;233;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Other - Write In (Required);I believe this is similar to javascript currying  design pattern, in which function accepts single arg and return new function which accept another param. same could be done using rest or spread operator i guess.;;;I like the proposal better;Line 1;ferment should be defined first;242;;;;;;;;;;;;;;;;Line 5;;39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;288;"const pickle = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The proposal;;;Easy to read and write
1104;May 31, 2019 12:11:32 am;May 31, 2019 1:04:52 am;Complete;;;English;;1559286692_5cf0d3a44d2d04.48181522;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;521;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;;294;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));252;;;;;;;;;;;;;;;;;;;;;1276;"const kimchi = ""cabbage"" |> wash |> cut |> (_ => new JAR(_)) |> salt |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The Status quo;;It is confusing at times but helps to write lesser code.;
1105;May 31, 2019 12:14:33 am;May 31, 2019 12:26:51 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559286873_5cf0d459c45735.73934251;;;flattened vs both;more than 10 years;Advanced;JavaScript;;86;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;const sauetkrautJar = await ferment(saltyCabbageJar, 14));150;;;;;;;Line 10;??;180;;;;;;;;;;;;;Line 5;(_ => new Jar(_));28;;;;;;;;;;;;;;;;;;;;;154;"const kimchiJar = ""cabbaje""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;ÐÐº;
1106;May 30, 2019 11:59:59 am;May 31, 2019 12:47:42 am;Complete;;;English;;1559242799_5cf0282faed287.97768617;;;nested vs flattened;5-10 years;Advanced;JavaScript;;192;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 11;Add the missing parameter to the function call.;178;;;;;;;Line 6;Change the parameter to match the variable name defined above.;75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"// look ma, no keyboard! const kimchiJar = await ferment(stir(     add(""spicy paste"", new Jar(         salt(cut(wash(""cabbage"")))     )) ), 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;The lack of visual structure makes determining which parameter is for which function an exercise in parenthesis counting.;It is condensed and doesn't introduce a bunch of variable names which are never used except on the very next line, so I don't have to remember them just in case they actually do get used somewhere in the same scope far below.;None. Only (minor) drawback is that I have to keep track of more variable names in case they get used further down the function. But for a small scope that doesn't really matter.;It is verbose. That makes it easier to read for others. The only minor drawback is that is it perhaps a bit too needlessly verbose, increasing the time to read and write it.;;;;;;;
1107;May 31, 2019 12:18:07 am;May 31, 2019 1:05:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559287086_5cf0d52ee6ce18.74740386;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;105;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";361;;;;;;;Line 9;|> await # // based on previous pickle example;488;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;747;"// first of all, this ""direct-passing"" pattern is what I usually see in practice  // and did you know that there's one more closing parenthesis in lines 9-13 than it should be, resulting a syntax error?  const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy taste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;I had a bit hard time deciding which expression belongs to which operator - but once I could notice the logic behind, it was no more a hard to read code. Using pipelines was indeed a great help, because they separate the steps in the code logic just like the ?: ternary operator does in a conditional expression.;22;;;;;;;;Other - Write In (Required);"I dont mind using the ""direct-passing"" pattern as long as Notepad++ highlights the matching parenthesis.";|> |> |> |> Quick. :);
1112;May 31, 2019 12:23:10 am;May 31, 2019 12:57:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559287390_5cf0d65e411038.41841705;;;nested vs proposal 1;3-5 years;Advanced;C++;;436;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;"add the ""numdbys"" parameter to `ferment`";125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add closing `)` at EOL;47;;;;;;;;;;;;;;;;;;;;;172;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());a bowl of jogurt with berries;Other - Write In (Required);JSON path testing;"The test on line 11 slowed me down because it doesn't represent what is tested well. There are two main problems here: the first part of the test is something that doesn't really bring meaning (only here for technical reasons); the piped variable should really not have such a meaningless name in long contexts (it is acceptable in one-line functions, not in longer).  The second point that slowed me down is line 15 where indentation is inconsistent, and required me to actually read all tokens to understand, being unable to use the apparent structure.  (I had to jump back to the comment line 6 too, but it's not really related to the question.)";;;;;5;;;;;;;;The proposal;;I'm using the BÃPO keyboard, where it is neither hard nor easy. I could get used to it without too much effort.;"I assumed ""equivalence"" for the `addTen` question to mean ""same result"", but the first proposition would obviously not work for an asymmetric function."
1118;May 31, 2019 12:37:13 am;May 31, 2019 4:06:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559288233_5cf0d9a906f033.81499960;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;138;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 10;I would add the required value for the numDays param, smth like 10: ), 14;235;;;;;;;;;;;;;;;;Line 9;await should be followed by #, like so 9: await #;283;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;216;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);inconsistent style + white space formatting + nested pipelines;it actually wasnt so bad, mainly the unwieldy if statements in combination with a lack of consistent white space formatting for the pipelines (especially considering they were nested, eg. couldn't line 10 have been split into two lines like lines 6, 7, & 8?), is what made it a little difficult to follow.;216;;;;;;;;The proposal;;it's a little awkward for me personally (probably just because i'm not used to it), as it kind of breaks the flow of how i type to hit the < shift>-pipe key. but i feel like that's something i could get used to rather quickly / easily.;overall i like the proposal, it reminds me of writing compose / pipe expressions. it also kinda reminded me of OCam's syntax with all the pipes. Maybe something else could be used instead of the # for the placeholder, as the hash can be kind of be distracting.. but that's also probably something that just takes a little getting used to. plus, the amount of placeholder token options seem slim. anyway, all in all good job & keep it up! :)
1119;May 31, 2019 12:37:36 am;May 31, 2019 1:15:47 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559288256_5cf0d9c0034c23.40553391;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;245;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 2);";133;;;;;;;;;;;;;;;;Line 9;await #;288;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;377;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2);";;;;;a bowl of jogurt with berries;inconsistent style;;Using ternary operators in this scenario makes it very hard to follow the code. My personal opinion is ternary operators should only be used when it is a single line and when both options are written as primitive types. However in this example, ternary operators are executing a function and then returning a result.  Also, the wine part doesn't follow the same style with jogurt. And reading the fillGlass section is hard too.;;;;;;;;;The proposal;;It was OK, I liked it.;1 - The final Status Quo vs Pipeline functions seems to be having different signatures. (e.g. new Jar, the constructor) 2 - The signature of 'wash' was not given in the previous steps.
1121;May 31, 2019 12:41:08 am;May 31, 2019 12:59:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559288468_5cf0da94a20115.73038958;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;120;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;", 14);";140;;;;;;;;;;;;;;;;Line 9;await #;166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;333;"const kimchiJar = ""cabbage""   |> wash #   |> cut #   |> salt #   |> new Jar(#)   |> add('spicy paste', #)   |> stir(#)   |> ferment(# 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The proposal;;A bit annoying on a German keyboard since it requires the Alt Gr modifier key and it's in a different place than most other operator symbols;
1122;May 31, 2019 12:47:15 am;May 31, 2019 12:58:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559288835_5cf0dc0311d182.23288061;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;88;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Change the name to saltyCabbageJar;46;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing parenthesis to line 5;38;;;;;;;;;;;;;;;;;;;;;190;"const jar = ""cabbage"" |> wash |> cut |> salt |> (i => new Jar(i)) |> (i => add(""spicy paste"", i) |> stir |> ferment |> await;";a bowl of jogurt with berries;too many if statements;;Javascript needs currying, so we can just pipeline the last argument.;;;;;;;;;;;;;The proposal;;The pipeline is fine. Ocaml uses it as well :);Javascript needs currying first before the pipeline operator.
1125;May 31, 2019 12:52:53 am;May 31, 2019 1:03:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559289173_5cf0dd55d17447.38246861;;;nested vs proposal 2;5-10 years;Advanced;Other - Write In (Required);PHP;77;int;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;;199;;;;;;;;;;;;;;;;Line 10;;20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24;;;;;;;;;;;;;;;;;;The Status quo;;;
1127;May 31, 2019 12:59:20 am;May 31, 2019 1:24:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559289560_5cf0ded83ddb41.14741962;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;70;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;", 14);";250;;;;;;;;;;;;;;;;Line 9;await #;434;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;whitespace formating;;Switching between inline pipe, and newline pipe;;;;;;;;;The proposal;;Fine with me (on Mac);Debugging could be an issue if the tools are not up to scratch
1130;May 31, 2019 1:01:18 am;May 31, 2019 1:29:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559289678_5cf0df4e85aae9.76314482;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;139;Integer;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the proposal better;Line 11;Add second ferment parameter between lines 10 and 11.;223;;;;;;;;;;;;;;;;Line 9;"change line 9 to ""|> await #""";130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;320;"const kimchJar = ""cabbage""   |> wash(#)   |> cut(#)   |> salt(#)   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#)   |> ferment(#)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;Assuming I am correct, I did not find the above code too hard to comprehend.  The dense boolean statements were easy to read because they depended on a fixed value. If these variables werent expressed explicitly in the code, this would be harder. The nested pipelines threw me off the most, but I guess there's a sense to the madness.;;;;;;;;;The proposal;;"The proposal syntax is cumbersome to type on a nordic-layout keyboard, especially the ""|"", which requires three concurrent key presses.";I am a student programmer and not full time employed, but I've been studying a software engineering degree for the past two years. Or though I consider JavaScript my primary language, I've only used it for hobby projects and haven't been taught it in school. Hope this was useful!
1131;May 31, 2019 1:11:15 am;May 31, 2019 1:32:06 am;Complete;;;English;;1559290275_5cf0e1a36d1373.08023781;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;85;number;"""object""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";172;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));45;;;;;;;;;;;;;;;;;;;;;250;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _)  |> stir  |> (_ => ferment, 2)  |> await  |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;Would perfer `fillPlate(_.pickles)`. Checking conditions takes a lot of time. `return ... |> jogurt => ...` is a bit riddling: 1/ the line break, 2/ suddenly not using underline as shorthand.;;;;;;;;;;;;;The proposal;;I feel OK about it.;
1132;May 31, 2019 1:11:52 am;May 31, 2019 2:43:24 am;Complete;;;English;https://qiita.com/;1559290312_5cf0e1c847c694.70042591;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;489;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;457;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> ( _ => new Jar(_) );208;;;;;;;;;;;;;;;;;;;;;624;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> ( _ => new Jar( _ ) )   |> ( _ => add(""spicy paste"", _) )   |> stir   |> ( _ => ferment( _, 2) )   |> await   |> ( _ => _.takeOne() )";a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;The proposal;;;
1133;May 31, 2019 1:09:55 am;May 31, 2019 1:25:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559290195_5cf0e1532949f5.14826146;;;nested vs proposal 1;3-5 years;Intermediate;Other - Write In (Required);Dart;303;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 4;;69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;12;;;;;;;;;;;;;;;;;;;;;49;;a plate of pickles;whitespace formating;;;;;;;;;;;;;;;The proposal;;;
1134;May 31, 2019 1:05:44 am;May 31, 2019 1:51:40 am;Complete;;;English;https://hacks.mozilla.org/;1559289944_5cf0e058210989.49986493;;;nested vs flattened;more than 10 years;Intermediate;JavaScript;;152;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;), 14;543;;;;;;;Line 6;"const sauerkarutJar = await ferment(saltyCabbageJar,14);";115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const salted = salt(cut(wash(""cabbage""))); const saltedJar = new Jar(salted); const stirredJar = add(""spicy paste"", saltedJar); const kimchiJar = await ferment(stirredJar,2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Single functional style expression. Very convinient in REPL environmnt.;single line case. add some spaces between ( ) and arguments in functions with more then 1 arg. Remove spaces in functions with one arg. multiline case. Rewrite in multiple lines.  May be use pattern 2 for multiple arguments functions;You can not see typos in variable names;Its better to see if all arguments are passed.;;;;;;;
1135;May 31, 2019 1:20:29 am;May 31, 2019 1:48:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559290829_5cf0e3cd9e80e8.64339027;;;nested vs flattened;more than 10 years;Advanced;Python;;200;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Almost never;I like Pattern 1 better;;;;;;Line 11;", 14);";164;;;;;;;Line 6;"couns sauerkrautJar = await ferment(saltyCabbageJar, 14);";287;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbageJar = new Jar(salt(cut(wash(""cabbage"")))) const kimchiJar = await ferment(stir(add( ""spicy paste"",  cabbageJar), 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;It's hard to see which parameter is for which function.;Chained transformation like a sentence : Fermented salted water added Jar of washed cucumber.;you have to link the variable with it's content. You have to read backward sometimes. Also it's really verbose.;each intermediate variable can have a name that is sufficient to understand what it contains.;I think we shouldn't be so extreme. The truth must be between this two patterns. Some intermediate variable and some functional lines.;;;;;;
1139;May 31, 2019 1:22:19 am;May 31, 2019 1:36:55 am;Complete;;;English;https://hacks.mozilla.org/;1559290939_5cf0e43b68a7c8.28013965;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;89;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;replace saltCabbagejar with saltyCabbageJar;128;;;;;;;;;;;;;;;;;;;;;;Line 5;append );29;;;;;;;;;;;;;;;;;;;;;156;;null;nested pipelines;;;;;;;;;;;;;;;Other - Write In (Required);not wrapping the arrow functions in brackets is something i would like better;alright;
1142;May 31, 2019 1:38:48 am;May 31, 2019 2:41:05 am;Complete;;;English;;1559291928_5cf0e8184d3f59.55553276;;;nested vs both;5-10 years;Advanced;JavaScript;;228;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;by adding the number of days parameter;168;;;;;;;;;;;;;;;;Line 9;should be await #;159;;;;;;;;;;;;;Line 5;add the closing paren;40;;;;;;;;;;;;;;;;;;;;;286;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Not nice;The pipeline in this last page is not a fair comparison with the Pipeline with #. The latter is using await, the former for some reason is using .then instead of await.
1147;May 31, 2019 1:59:19 am;May 31, 2019 2:09:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559293158_5cf0ece6dd7679.57655659;;;nested vs both;5-10 years;Intermediate;Ruby;;108;"""number""";"""function""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the status quo better;;Line 11;Add a second argument to the ferment call;53;;;;;;;;;;;;;;;;Line 10;Don't know;76;;;;;;;;;;;;;Line 5;Add a close-parenthesis at the end of the line.;41;;;;;;;;;;;;;;;;;;;;;107;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Satisfying. Reminds me of the old hashrocket in Ruby =>;This seems like a way to encourage developers to write procedural spaghetti code, rather than using well-factored objects. ð¤
1149;May 31, 2019 2:04:21 am;May 31, 2019 2:23:44 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559293461_5cf0ee155b0d72.43914557;;;nested vs proposal 2;more than 10 years;Expert;TypeScript;;136;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;Append `, 14`;161;;;;;;;;;;;;;;;;Line 9;Append ` #`;91;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;187;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;Absolutely fine, used to it from Elm.;
1152;May 31, 2019 2:11:38 am;May 31, 2019 2:45:44 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559293898_5cf0efca19e855.44293144;;;flattened vs both;more than 10 years;Advanced;Ruby;;248;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"add a ""y""";88;;;;;;;Line 10;add a function wrapper, ie |> (x) => x.takeOne();600;;;;;;;;;;;;;Line 5;add the missing closing paren at end of line 5;58;;;;;;;;;;;;;;;;;;;;;614;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await // as proposed aboev this implies the # is required, but I'd love a special case for await as the earlier broken example illustrated   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Fine;
1155;May 31, 2019 2:18:23 am;May 31, 2019 2:36:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559294302_5cf0f15eebb2a0.02041407;;;nested vs both;more than 10 years;Advanced;JavaScript;;132;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;Add day length as second attribute to ferment(). First, define wash() though.;189;;;;;;;;;;;;;;;;;;103;;;;;;;;;;;;;Line 7;remove last ) after ferment();29;;;;;;;;;;;;;;;;;;;;;188;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add('spicy paste', #)     |> stir     |> await     |> ferment(#, 2)     |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;"It's alright, though not intuitive (only "">"" would probably be more straightforward).";
1158;May 31, 2019 2:33:41 am;May 31, 2019 3:28:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559295221_5cf0f4f5213546.50233705;;;nested vs both;3-5 years;Advanced;JavaScript;;178;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;After salt() I'd pass 14 as the second argument to ferment().;389;;;;;;;;;;;;;;;;Line 9;By adding await #, although I didn't see that and had to go to the previous page. I thought await would just take the result of the previous function call without the need for #.;1280;;;;;;;;;;;;;Line 5;By adding ) to the end of the line.;200;;;;;;;;;;;;;;;;;;;;;350;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A bit annoying, but automating this with a text editor/IDE could ease the pain.;I like the idea of _.then(), but I find it a bit confusing and the syntax looks messy, mainly because the expression is all in one line.
1160;May 31, 2019 2:48:39 am;May 31, 2019 2:59:45 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559296119_5cf0f877c4c0e6.54882366;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;75;function;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;", 30);";82;;;;;;;;;;;;;;;;Line 8;await ferment(#, 14);84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;166;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;It was hard to grok that   `(({wine}) => wine |> fillGlass)()` is an IIFE.;;;;;;;;;The Status quo;;;
1161;May 31, 2019 2:53:01 am;May 31, 2019 3:09:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559296380_5cf0f97cdbefe6.23010691;;;flattened vs both;more than 10 years;Advanced;JavaScript;;87;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";200;;;;;;;Line 9;|> await #;161;;;;;;;;;;;;;Line 5;(_ => new Jar(_));52;;;;;;;;;;;;;;;;;;;;;199;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #;  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;"A bit annoying, but less than writing code in the ""current status quo"" manner.";
1163;May 31, 2019 1:13:59 am;May 31, 2019 4:39:21 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559290439_5cf0e2473fbf67.58384524;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;100;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));59;;;;;;;;;;;;;;;;;;;;;199;"const pickle = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;In line 11, the response started to get nested. So it first checks whether the response was successful before checking a flag. Line 12 was okay to understand. Like 13 caused me to re-read, since the conditions were linked with Boolean-OR. So I went back to check for the brackets. Line 15 made me look for what its input might be. To be found in line 14. Otherwise it could have been unreachable code. Line 16 made me go back and check, which was the positive condition.  I'd have factored out the conditions and the responses to separate functions instead.  After reading the question, I first scanned for the flag. Next, I moved to see, on which product it refers. Then I checked the signature in line 6 before moving down to check the actual response.;;;;;;;;;;;;;Other - Write In (Required);Neither nor. I'd clean up the status quo to make it more readable (assigning steps to variables, for example);Awkward. My German keyboard has it as third layer on < and >. So I have to reach for AltGr to enter it.;"You have a mistake in the Pipeline proposal (the â10"" got lost). Check the Jar constructor line."
1164;May 31, 2019 3:18:37 am;May 31, 2019 3:31:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559297917_5cf0ff7d2d6203.73873108;;;flattened vs both;5-10 years;Advanced;JavaScript;;67;3;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";146;;;;;;;Line 7;salt(#);215;;;;;;;;;;;;;Line 5;(_ => new Jar(_));29;;;;;;;;;;;;;;;;;;;;;129;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy pasta"", #)   |> stir   |> ferment   |> await   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;I really like it. Looks a lot like functional languages like Elixir. ;The # feels really unnatural. I would like to suggest the $ which is more often used in JS.
1165;May 31, 2019 3:32:26 am;May 31, 2019 3:57:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559298746_5cf102ba3e5de9.89124248;;;flattened vs proposal 2;3-5 years;Intermediate;Other - Write In (Required);SQL;342;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";143;;;;;;;Line 8;|> await ferment(#, 14);117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;249;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;I have never used the piping pattern, so I need to wrap my head around that. But I think that was fairly OK to skim through. What confused me most was the share number of operators, and of course, nested ternaries.  I'm not even sure that I was right about the result.. ;8;;;;;;;;The proposal;;OK;
1171;May 31, 2019 3:53:20 am;May 31, 2019 4:03:59 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559300000_5cf107a09b25e7.64351493;;;flattened vs both;5-10 years;Advanced;Java;;77;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";123;;;;;;;Line 10;;193;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));50;;;;;;;;;;;;;;;;;;;;;30;;;;;;;;;;;;;;;;Current status quo;;;;;
1173;May 31, 2019 4:09:25 am;May 31, 2019 4:47:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559300965_5cf10b659b3fe2.19249568;;;flattened vs proposal 1;3-5 years;Beginner;Java;;81;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 1;Add the function;138;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing );64;;;;;;;;;;;;;;;;;;;;;57;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The proposal;;It was difficult;
1174;May 31, 2019 4:12:55 am;May 31, 2019 4:53:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559301175_5cf10c37230362.51954405;;;flattened vs both;3-5 years;Advanced;TypeScript;;179;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const saurkrautJar = await ferment(saltyCabbageJar, 14);";442;;;;;;;Line 9;await #;490;;;;;;;;;;;;;Line 5;(_ => new Jar(_));62;;;;;;;;;;;;;;;;;;;;;393;"const kimchiJar = 'cabbage'     |> wash      |> cut      |> salt     |> new Jar(#)     |> add('spice paste', #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Not easy to type, but maybe with some practice is ok;"The second one  ""pipeline with #"" seems cleaner with no extra parenthesis, however, I would prefer to use '_' instead of '#'. "
1176;May 31, 2019 4:20:35 am;May 31, 2019 4:56:48 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559301635_5cf10e034e3951.54215573;;;nested vs both;more than 10 years;Advanced;Other - Write In (Required);PHP;356;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 14;327;;;;;;;;;;;;;;;;Line 9;await # ... not defined isn't obvious, feels backwards, had to go back to proposal.;394;;;;;;;;;;;;;Line 5;(_ => new Jar()) ... easier to find as that's just pattern matching.;89;;;;;;;;;;;;;;;;;;;;;376;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();  const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Fine;I changed my mind, I know the non-# version is more verbose, but after writing the examples, it was easier to understand... each step calls a function with 1 argument (the return value from the last step), if you want to call something that takes more than 1 argument, you do it yourself with a wrapping function (something developers will already be familiar with)... the # version introduces a second change that's only useful in this context, and I'm not aware of any other language that does this... I'd be tempted to think that anyone who wants extra complexity (just to save a few keystrokes) might be getting a bit of a kick out of thinking how smart they are.
1180;May 31, 2019 4:52:50 am;May 31, 2019 4:57:02 am;Complete;;;English;;1559303569_5cf11591dbc8f9.15811384;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;50;function;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 5;;22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 1;Too small can't read;22;;;;;;;;;;;;;;;;;;;;;25;;null;nested pipelines;;;;;;;;;;;;;;;The Status quo;;;
1183;May 31, 2019 4:57:37 am;May 31, 2019 5:50:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559303857_5cf116b1939906.50649478;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;218;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;replace saltCabbageJar with  saltyCabbage;389;;;;;;;Line 10;just call takeOne();669;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;473;"const kimichi = ""cabbage""  |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;identifiers;;Character # is not usual, i have tried to avoid reading it. ;;;;;;;;;The proposal;;I think it is better to avoid >, just use |;Use # in fewer cases as possible, like use only with func with more than 1 param.
1185;May 31, 2019 5:30:56 am;May 31, 2019 6:36:43 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559305855_5cf11e7fefc5d9.98596299;;;flattened vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);C#;165;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;fix typo in var name;256;;;;;;;Line 10;replace #.takeOne() by takeOne;584;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;254;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2) |> takeOne";;;;;a bowl of jogurt with berries;identifiers;;"The need to pass a special character to reference the current value in the pipeline makes it hard to read.  The value should be implicit. Using anonymous function could help to simplify the code. eg.  const result = '....' |> url => await fetch(url, { mode: 'cors' }) |> result => await result.json() |> meal => meal.jogurt && meal.jogurt.ready && (isBreakfast || isSnackTime)     ? meal.jogurt |> fillBowl |> add ""berries""     : .... ";;;;;;;;;Other - Write In (Required);the proposal with implicit reference to the current value (without the #);fine;"Get rid of the special ""#"" reference. (should be implicit)  "
1186;May 31, 2019 5:31:12 am;May 31, 2019 5:56:10 am;Complete;;;English;https://qsurvey.mozilla.com/;1559305872_5cf11e90d02bf0.90586752;;;flattened vs both;5-10 years;Intermediate;TypeScript;;217;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 5;Rename saltyCabbageJar to SaltCabbageJar;193;;;;;;;Line 2;Implement wash;67;;;;;;;;;;;;;Line 5;"Implement wash that is missing in the helper function list and add the missing "")"" to the end of line 5";118;;;;;;;;;;;;;;;;;;;;;489;"wash(string) // -> returns string.  const kimchiJar = ""cucumber""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy pasta"", _))  |> stir  |> (_ => ferment(_, 2))  |> await;  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline;;;;I like it a lot and font ligatures makes it even more awesome to use and the code feels a lot less nested.;The weather is great here in Sweden and I'm enjoying this quiz.  I really hope we get the pipeline syntax in an near future. :)   BR Mike 
1189;May 31, 2019 5:40:01 am;May 31, 2019 5:50:58 am;Complete;;;English;;1559306401_5cf120a11041f4.26301057;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;87;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Fix the typo, there is also no definition for the wash method;248;;;;;;;Line 8;;71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37;;;;;;a bowl of jogurt with berries;nested pipelines;;Nested ternaries within nested pipelines are not easy to read;;;;;;;;;The Status quo;;;
1190;May 31, 2019 5:44:50 am;May 31, 2019 6:03:17 am;Complete;;;English;https://qiita.com/;1559306690_5cf121c2896b07.82869310;;;flattened vs both;0-2 years;Intermediate;JavaScript;;119;Number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 6;"const saurkrautJar = await ferment(saltyCabbageJar, 14);";115;;;;;;;Line 10;takeOne;127;;;;;;;;;;;;;Line 5;(_ => new Jar(_));28;;;;;;;;;;;;;;;;;;;;;142;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment |> await |> takeOne";;;;;;;;;;;;;;;Pipeline with #;;;;I feel easily when it typed :D;
1197;May 31, 2019 6:07:35 am;May 31, 2019 6:21:46 am;Complete;;;English;;1559308055_5cf12717839950.43997652;;;nested vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);C#;135;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;", 14);";102;;;;;;;;;;;;;;;;;;66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;236;"const pickle = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Following ternary statements (not that bad);;;;;;;;;The Status quo;;Bit awkward;I'd rather have the status quo code broken up over several lines. Bit of a false comparison when the proposal is multi-line while the status quo code is packed into one line.
1198;May 31, 2019 6:12:05 am;May 31, 2019 6:40:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559308325_5cf12825bbf818.83253580;;;nested vs flattened;3-5 years;Advanced;JavaScript;;409;"""number""";"""function""";;;;"add.apply(null, [10]);";;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 10;, 14;249;;;;;;;Line 6;"await ferment(saltyCabbageJar, 14);";151;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbage = salt(     cut(         wash(""cabbage"")     ) );  let jar = new Jar(preparedCabbage); jar = add(""spicy paste"", jar); jar = stir(jar); const kimchiJar = await ferment(jar, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Difficult to determine what function call is using which parameter.;Makes it clear that all of these calls combined creates a single item: a pickle jar.;The number of lines to read in order to get to the pickle jar.;Each step is clearly outlined, and it is easy to figure out which parameter is used for which function call. This makes debugging much easier.;;;;;;;
1199;May 31, 2019 6:12:18 am;May 31, 2019 6:45:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559308338_5cf128329a1e29.18233351;;;nested vs proposal 1;3-5 years;Advanced;Other - Write In (Required);PHP;93;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 1;I would add a comma after the closing parenthesis on line 10, and insert a new line after it containing the number 2. Technically that isn't modifying what I called the line with the bug (line 1, since that's where the ferment function is called) but that's how I would correct the bug itself.;384;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;I would add a closing parenthesis at the end of line 5.;127;;;;;;;;;;;;;;;;;;;;;301;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (cbg => new Jar(cbg))   |> (jar => add(""spicy paste"", jar))   |> stir   |> (jar => ferment(jar, 2))   |> await   |> (jar => jar.takeOne());";a bowl of jogurt with berries;identifiers;;All the arrow functions use an underscore to reference their argument, instead of a descriptive variable name. You have to continuously look back to confirm what exactly is in the underscore variable. Otherwise it was pretty readable. I would also refactor the final arrow function in the pipeline out into its own function with a descriptive name so that the pipeline is more readable.;;;;;;;;;;;;;The proposal;;"Not hard. Probably it might be hard at first if you're not already used to typing the ""|"", but I am.";"The ""status quo"" is kind of contrived, and you could write it in a more imperative style by setting the results of each function to separate variables, but even then it would be nice to have the proposal. I'm converted! I really just don't like the use of the underscores, but that has nothing to do with the proposal itself."
1202;May 31, 2019 6:35:21 am;May 31, 2019 6:58:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559309721_5cf12d994a3706.82117188;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;118;number;"""object""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";191;;;;;;;Line 10;takeOne();282;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;303;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;bit awkward, with AltGr and then Shift - but ok.;
1206;May 31, 2019 7:04:08 am;May 31, 2019 7:18:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559311447_5cf13457d324e6.43937610;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;51;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;", 2);";84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));28;;;;;;;;;;;;;;;;;;;;;198;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> _ => new Jar(_)   |> _ => add('spicy paste', _)   |> stir   |> _ => ferment(_, 2)   |> await   |> _ => _.takeOne();a bowl of jogurt with berries;Other - Write In (Required);multi line arrow function scope;Curve out multi line arrow function to single function. ;;;;;;;;;;;;;The proposal;;difficult slightly...;I wanna use pipeline operator in my development!
1207;May 31, 2019 7:06:26 am;May 31, 2019 7:25:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559311586_5cf134e22b5a92.65299666;;;flattened vs both;0-2 years;Advanced;Other - Write In (Required);C#;292;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 4;remove the 'new' keyword;163;;;;;;;Line 5;remove the 'new' keyword;65;;;;;;;;;;;;;Line 5;remove the 'new' keyword;28;;;;;;;;;;;;;;;;;;;;;267;"const kimchi = ""cabbage"" |> wash(#) |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;I'm already familiar with the symbol from other languages like F# and Elixir.;"The syntax will be cleaner if the '#'s are eliminated. IMO it'd be better if it looked like it does in F#. ""potato"" |> cut |> boil |> mash"
1208;May 31, 2019 7:07:05 am;May 31, 2019 7:24:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559311625_5cf13509231c36.98937631;;;nested vs proposal 1;more than 10 years;Advanced;Haskell;;200;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 6;"wash(""cabbage"") => ""cabbage"" or define ""wash"" function";172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing parenthesis.;49;;;;;;;;;;;;;;;;;;;;;231;"const kimchiJar = await ferment(   stir(     add(        ""spicy paste""      , new Jar(                   salt(                     cut(                        wash(""cabbage"")                     )                  )               )     )   ), 2 ); const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;density of operators;;Top to the bottom.;;;;;;;;;;;;;The proposal;;(a, function (a) => b) => b;
1209;May 31, 2019 7:13:07 am;May 31, 2019 7:32:48 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559311987_5cf13673aa5349.90931430;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;121;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;use the correct salty variable;84;;;;;;;;;;;;;;;;;;;;;;Line 5;Append a closing );38;;;;;;;;;;;;;;;;;;;;;376;"// Syntax error in the given snippet! // One too many closing )  const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2)) // probably   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;;;;;;;;;;;;;;The proposal;;German keyboard: 1. AltGr + <   =>   | 2. Shift + <    =>    <   AltGr and Shift are on different places on the keyboard, so it's rather distracting the flow, but I think it's something to get used to.;
1210;May 31, 2019 7:14:50 am;May 31, 2019 7:47:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559312090_5cf136da178fd2.43132589;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;137;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;add 14 as 2nd argument to ferment function;257;;;;;;;;;;;;;;;;Line 2;create wash function;115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;388;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy_paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;a bowl of jogurt with berries;inconsistent style;;I try to read this code like I read promise code. That is line by line trying to keep in mind what is the return of the previous one. In this example, the comment help a lot (of course). Overuse of ternary operator slow me down a way lot. The preparation of the arrow to pass it to fillGlass function in line 12  is not obvious neither and I think that this part is the worst of this example.;;;;;;;;;Other - Write In (Required);I like the 2nd proposal with explicit arrow and underscore arg;The use of pipe character is a great idea but the less thant character is quite odd.;Thanks for you work!
1217;May 31, 2019 7:50:58 am;May 31, 2019 8:04:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559314257_5cf13f51e510f6.73897750;;;nested vs flattened;5-10 years;Advanced;JavaScript;;75;3;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 10;Add numdays at that line;174;;;;;;;Line 6;Typo, modify salt to salty;46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbage = salt(cut(wash(""cabbage""))); const preparedJar = stir(add(""spicy paste"", new Jar(preparedCabbage)))l const kimchiJar = await ferment(preparedJar, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;The order of function excuted;Make the order of execution same as how people read the code.;Lots of variable which makes it looks like more complete than pattern 1;The reading order is same as how it executes;;;;;;;
1218;May 31, 2019 7:51:00 am;May 31, 2019 8:20:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559314259_5cf13f53d09e24.52254828;;;flattened vs proposal 2;3-5 years;Intermediate;TypeScript;;113;3;"""error""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 5;"add(""salt"", cabbageJar)";256;;;;;;;Line 1;remove wash method;67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;443;"function kimchiJar() {      const washedCabbage = wash(""cabbage"");      const choppedCabbage = cut(washedCabbage);      const saltedCabbage = salt(choppedCabbage);      const jarredCabbage = new Jar(saltedCabbage);      const spicyCabbage = add(""spicy paste"", jarredCabbage);      const stirredSpicyCabbage = stir(spicyCabbage);      return await ferment(stirredSpicyCabbage, 2) }  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);fillBowl line, if you do #.jogurt, the result is {ready: true} which is passed in to fillBowl?? that's confusing;#.jogurt slow me because then the return is {ready: true} which is the piped to the next two which confuses me.;;;;;;;;;Other - Write In (Required);it would take something to get used to, I feel like the status quo is easier for beginnings to understand;|> not bad, you can do a lot of copy pasting;
1224;May 31, 2019 8:29:00 am;May 31, 2019 8:38:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559316540_5cf1483c568f66.23938915;;;flattened vs both;0-2 years;Beginner;Python;;82;Function;"""error""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 4;;87;;;;;;;Line 1;;112;;;;;;;;;;;;;Line 1;"Tip: you include ""don't know"" when asking which line the bug is on ...";41;;;;;;;;;;;;;;;;;;;;;61;;;;;;;;;;;;;;;;Current status quo;;;;;
1225;May 31, 2019 8:41:30 am;May 31, 2019 8:48:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559317290_5cf14b2aa745b0.76296335;;;nested vs flattened;3-5 years;Advanced;JavaScript;;60;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 11;",10);";112;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1231;May 31, 2019 9:01:01 am;May 31, 2019 9:18:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559318461_5cf14fbd1e1c85.53368516;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;186;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 1;"wash(cabbage); //no quotes needed";89;;;;;;;Line 5;no # needed;57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;427;"const kimchiJar = ""kimchi"" |> wash |> add (""spicy paste"", #) |> new Jar(#) |> salt |> cut(""kimchi"") |> wash (""cabbage"",#) |> await # |> #, takeOne{}";;;;;a bowl of jogurt with berries;inconsistent style;;I wasn't sure what the # referred to and when it was and wasn't needed, why doesn't the fillGlass need # ?;;;;;;;;;The proposal;;a bit much but it does add structure;
1232;May 31, 2019 9:31:35 am;May 31, 2019 9:50:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559320295_5cf156e7722745.03717291;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;79;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkraautJar = await ferment(saltyCabbageJar, 14);";121;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));36;;;;;;;;;;;;;;;;;;;;;124;no time sorry;a bowl of jogurt with berries;inconsistent style;;"I was expecting (_ => add(""berries"", _)) ";;;;;;;;;;;;;Other - Write In (Required);I think I prefer the current status quo because it feels familiar. I'm a bit worried by the worst code you could write with the pipe operator. At least, the current status quo forces you to name things. ;;
1233;May 31, 2019 9:34:18 am;May 31, 2019 9:47:58 am;Complete;;;English;;1559320458_5cf1578a3eb7d0.96366790;;;flattened vs proposal 2;5-10 years;Expert;TypeScript;;71;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"await fermet(saltyCabbageJar, 14);";152;;;;;;;Line 9;await #;104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;141;"const kimchiJav = wash(""cabbage"") |> cut |> salt |> new Jar(#) |> add (""spicy paste"", #) |> stir |> await #";;;;;a bowl of jogurt with berries;too many if statements;;The long/nested ternaries are pretty ugly. The long conditionals are also a pain to read. ;;;;;;;;;The proposal;;Fine.;
1234;May 31, 2019 9:34:49 am;May 31, 2019 10:07:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559320489_5cf157a96c50e6.39295495;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;189;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;157;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));123;;;;;;;;;;;;;;;;;;;;;674;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (saltedCabbage => new Jar(saltedCabbage)) |> (jar => add(""spicy paste"", jar)) |> stir |> (jar => ferment(jar, 2) |> await |> (jar => jar.takeOne())";a bowl of jogurt with berries;identifiers;;Adapting to the unfamiliar pipeline syntax takes a little extra thought, but it's not bad. For me, the worst thing is the use of _. As a long time fan of descriptive variable names, I really dislike _. Visually, it looks more like an operator than an identifier. I realize this is just a variable name, but example code quickly becomes standard habits and production code, so I would much prefer that examples use descriptive variable names, or at worst, an alphabetic character like 'x'.;;;;;;;;;;;;;The Status quo;;Pretty straightforward;It's hard to compare status quo to proposal since I so detest _ as an identifier. I automatically prefer status quo over the underscore-ridden code.  I dislike the introduction of numerous bound wrapper functions and wonder about the performance impact.
1235;May 31, 2019 9:38:47 am;May 31, 2019 9:48:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559320727_5cf15897ccf9e6.52496173;;;nested vs proposal 2;more than 10 years;Intermediate;Python;;167;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;, 2);130;;;;;;;;;;;;;;;;;;30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26;;;;;;;;;;;;;;;;;;;;;
1236;May 31, 2019 9:39:03 am;May 31, 2019 9:53:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559320743_5cf158a7712c65.20697349;;;nested vs flattened;more than 10 years;Expert;JavaScript;;192;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;Very often;Very often;I like Pattern 1 better;;;;;;Line 11;Add numdays value;112;;;;;;;Line 5;rename const to SaltCabbageJar;26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbage = new Jar(   salt(     cut(       wash(""cabbage"")     )   ) );  const kimchiJar = await ferment(   stir(     add(""spicy paste"", cabbage)   ), 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Honestly it's not challenging at all.;Very concise and quick to scan.;So many variables, trying to work back from the outside in would take a lot longer.;Seeing which property fit into which function is easier to read like this. In Pattern 1 you run the risk of losing track of which function you are in.;;;;;;;
1242;May 31, 2019 9:46:06 am;May 31, 2019 10:06:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559321166_5cf15a4ea08707.23071311;;;flattened vs both;more than 10 years;Expert;TypeScript;;116;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar  = await fement(saltyCabbageJar, 14);";188;;;;;;;Line 5;new Jar;120;;;;;;;;;;;;;Line 5;(_ => new Jar(_));60;;;;;;;;;;;;;;;;;;;;;308;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await # |> #,take(1)";;;;;;;;;;;;;;;Pipeline with #;;;;No problem!;"Not sure why await requires the ""#""?"
1243;May 31, 2019 9:47:25 am;May 31, 2019 10:15:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559321245_5cf15a9d73f149.08187952;;;nested vs proposal 1;5-10 years;Intermediate;Java;;134;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));92;;;;;;;;;;;;;;;;;;;;;606;"cont putInJar => stuff => new Jar(stuff); const addSpicyPaste = jar => add(""spicy paste"", jar); const ferment2Days => jar => ferment(jar, 2); cont takeOne => jar => jar.takeOne();  const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> putInJar   |> addSpicyPaste   |> stir   |> ferment2Days   |> await   |> takeOne;";a bowl of jogurt with berries;inconsistent style;;the underscore in the multi line arrow function making it less readable. dont mind the underscore on lines 6 and 8, but on the big one it's not great.   going back to check the constants (isLunch & etc) was a hassle  the big condition on the else if  found the nested pipelines more readable than i thought i would, though the spacing on 14 and 15 gave me pause;;;;;6;;;;;;;;The proposal;;unfamiliar, but not more than => was originally;
1249;May 31, 2019 9:50:43 am;May 31, 2019 10:14:33 am;Complete;;;English;https://qsurvey.mozilla.com/;1559321443_5cf15b63a4ece9.49981477;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;232;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;134;;;;;;;;;;;;;;;;;;;;;;Line 5;"add a "")"" to the end of the line";51;;;;;;;;;;;;;;;;;;;;;266;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;the else_if statement and needing to review the produced JSON and review the is state flags to see where the logic may flip;;;;;;;;;;;;;Other - Write In (Required);both are fine;not a problem;"I dislike the (_ => fn(_, ....)) as it looks messy. Perhaps the pipeline can create a special variable to use instead?   something like:  |> wash |> new Jar(::_)  where `::_` is the passed result? Obviously `::_` is ugly but it would be nice to not have to do the anon function call  how would you go about addressing methods in the same object. is it:  const kimchi = ""cabbage""     |> this.wash     |> this.cut     |> this.salt     ...  Thanks!"
1250;May 31, 2019 9:51:13 am;May 31, 2019 10:41:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559321473_5cf15b81a70342.26481899;;;nested vs both;0-2 years;Beginner;JavaScript;;515;number;"""function""";;;;"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 12;no idea;936;;;;;;;;;;;;;;;;Line 9;await should be on line 7 ???;326;;;;;;;;;;;;;Line 5;(_=> new Jar(_));140;;;;;;;;;;;;;;;;;;;;;536;"const cabbage = """"kimchi""; wash cut new Jar(#) add (""spicy paste"", #) salt stir ferment(#, 2) await # #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;"I will tell you when i find it on the keyboard. ( ;";
1252;May 31, 2019 9:54:15 am;May 31, 2019 10:01:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559321655_5cf15c37bd8036.55929338;;;nested vs proposal 1;5-10 years;Intermediate;Java;;59;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;;99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 6;;26;;;;;;;;;;;;;;;;;;;;;20;;null;too many if statements;;;;;;;;;;;;;;;The proposal;;;
1254;May 31, 2019 9:54:41 am;May 31, 2019 10:11:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559321681_5cf15c51253819.51031689;;;flattened vs both;more than 10 years;Intermediate;JavaScript;;134;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;salty.. instead of salt..;203;;;;;;;Line 10;;126;;;;;;;;;;;;;Line 5;add );43;;;;;;;;;;;;;;;;;;;;;300;"const kimchi= ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"",#) |> stir |> ferment(#,2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;ok;
1257;May 31, 2019 9:57:19 am;May 31, 2019 10:24:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559321838_5cf15ceee68f83.04601139;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;158;"""number""'";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 11;Pass numdays argument to ferment;89;;;;;;;;;;;;;;;;Line 9;Not quite sure, but await isn't a function so I assume you can't pass an argument to it like this? Maybe change line 9 to be `(await #)`;187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> _ => new Jar(_) |> _ => add(""spicy paste"", _) |> stir |> _ => ferment(_, 2) |> await |> _ => _.takeone()";;;;;a bowl of jogurt with berries;density of operators;;An expression of that length is a little dense no matter what. Line 12 in particular was difficult to parse, I think in part because of the similarity visually between the arrow fn and the pipeline operator.;;;;;;;;;Other - Write In (Required);Pipeline that takes functions;Didn't feel difficult or strange, actually!;I liked the function notation over the placeholder notation. To me it made more sense to have the right side of the operator always be a function!
1259;May 31, 2019 10:00:22 am;May 31, 2019 10:50:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322022_5cf15da6830c11.84702014;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;114;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", {number});";140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;end line in );25;;;;;;;;;;;;;;;;;;;;;830;const kimchi = 'cabbage' |> wash |> cut |> salt |>( _ =>  new Jar(_)) |> (_ => add('spicy paste', _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());a bowl of jogurt with berries;nested pipelines;;Switching between ifs and pipelines was a bit difficult.;;;;;;;;;;;;;The proposal;;arguably the worst part about the spec, if there was a more ergonomic way to pipe, then I think we'd have a winner;good job! #mozilla4lyfe
1262;May 31, 2019 10:01:19 am;May 31, 2019 10:23:44 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322079_5cf15ddf4c5567.00810015;;;nested vs proposal 1;more than 10 years;Advanced;Other - Write In (Required);coffeescript;173;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;, 14;92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;append `)`;128;;;;;;;;;;;;;;;;;;;;;386;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _) // or add(""spicy paste"", _) would be neato   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);what is `fillBowl`?  why named argument on line 15? `jogurt` instead of the placeholder underscrore?;having to jump up to the top to look at `is*` variables.  since they are constants there is deadcode.  Also, the fomatting on line 14 was a little sad, i like it with the indented `|>` on a new line;;;;;;;;;;;;;The proposal;;not used to it yet, felt weird;would be neat to skip the lambda and just do stuff like `|> ferment(_, 2)` as a special shorthand when the pipe operator is used and the underscore is present hmhm
1263;May 31, 2019 10:01:48 am;May 31, 2019 10:30:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322108_5cf15dfc923ff3.31040670;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;89;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;Replace saltCabbageJar with saltyCabbageJar;183;;;;;;;;;;;;;;;;;;;;;;Line 5;Add missing end parenthesis to end of line 5;137;;;;;;;;;;;;;;;;;;;;;273;"const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await;  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);Evaluating the conditional operators in line 13;It was easy reading until line 10.  Then I had to make note that _ was the JSON result.  At this point I was unaware I would have to evaluate the result, so I wasn't memorizing the boolean values.  I looked at the form of the JSON response, but not the values it held.  The first condition made sense, and so did the corresponding body.  The next line (13) was a bit long, so it took a good second to parse, but clear enough.  The next line had an unnecessary line break before the second pipe operator on line 14, and line 14 wasn't indented extra.  Now I realized I had to evaluate the result, so I went back up to the top to see the values of the booleans and went back down into the large if-else-if block to evaluate each branch.  It led me to realize it's not lunch time but snack time, and the jogurt is ready, so the result would be a jogurt bowl with berries.;;;;;;;;;;;;;The proposal;;It was alright.;I don't think I like the idea of piping to the await keyword.  I think I prefer the idea of awaiting an expression.  The final example just used the then callback for the promise instead of the await keyword anyway.
1264;May 31, 2019 10:01:43 am;May 31, 2019 5:20:52 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322103_5cf15df71eaa84.77960000;;;nested vs both;more than 10 years;Advanced;JavaScript;;17104;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 1;;235;;;;;;;;;;;;;;;;Line 5;;181;;;;;;;;;;;;;Line 5;Add missing parenthesis. It's more easy to find bugs with this approach.;281;;;;;;;;;;;;;;;;;;;;;7957;;;;;;;;;;;;;;;;Pipeline;;;;It was ok but without using a new line character between each one.;It's more easy to debug code with the Pipeline proposal compared to the  Pipeline with # proposal. 
1265;May 31, 2019 10:02:00 am;May 31, 2019 10:32:21 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322120_5cf15e080e8990.76419603;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;594;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14 // Add argument for the number days;154;;;;;;;;;;;;;;;;Line 7;salt(#) // pass in the jar to salt function;108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;472;"const kimchi = ""cabbage""   |> wash   |> cut(#)   |> salt(#)   |> new Jar(#)   |> add (""spicy paste"", #)   |> stir(#)   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Too much on one line, easier to read multi-line code.Too many JavaScript specific language features. ;;;;;;;;;The proposal;;fairly easy to type, but had some typos when typing the pipe character. ;
1270;May 31, 2019 10:04:56 am;May 31, 2019 10:19:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322296_5cf15eb8cee903.14310287;;;flattened vs proposal 2;5-10 years;Advanced;Python;;59;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;s/salt/salty/;105;;;;;;;Line 10;takeOne maybe?;149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;122;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);keeping track of what # is;For a moment, I wasn't sure about the relative precence of ? and |>.  I kept making sure that I knew what # was.;;;;;;;;;The proposal;;Not hard.;I don't often write pipelines like this, or I don't feel the pain.  I feel the syntax of # is kind of arbitrary. Maybe I would feel differently if it was made more general, like syntax for lambdas.
1274;May 31, 2019 10:10:45 am;May 31, 2019 10:31:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322645_5cf16015cf4811.11569580;;;nested vs both;more than 10 years;Expert;JavaScript;;192;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 14;121;;;;;;;;;;;;;;;;Line 10;I haven't read the specs on #, so I'm not sure how to correct this. Await is an operator, not a function, so I'm not sure why line 9 works;163;;;;;;;;;;;;;Line 5;(_ => new Jar(_));43;;;;;;;;;;;;;;;;;;;;;276;"const kimchiJar = 'cabbage'    |> wash    |> cut    |> salt    |> new Jar(#)    |> add('spicy paste', #)    |> stir    |> ferment(#, 2)    |> await #;";;;;;;;;;;;;;;;Pipeline with #;;;;No problems. Very readable;I don't think the quiz made it clear how # works with the await operator, but once I saw it used on a subsequent screen it made sense. The error message of # being undefined is not helpful, when the problem was with the await line not the .takeOne() line. I get why we're saying # is undefined on the .takeOne() line - technically that is true. But, that error message is not helpful. The error should instead be that the await operator is missing an operand. I'd absolutely detest the error listed in this quiz.
1278;May 31, 2019 10:11:41 am;May 31, 2019 10:32:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322700_5cf1604ce69758.42298971;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;113;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;167;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) to the end;32;;;;;;;;;;;;;;;;;;;;;319;"const kimchi = wash(""cabbage"")   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;The last function is garbage;;;;;;;;;;;;;The proposal;;Not great. Definitely the least awesome part. But I haven't seen a better idea;
1282;May 31, 2019 10:14:59 am;May 31, 2019 10:29:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559322899_5cf161139a7eb9.00910635;;;nested vs proposal 2;5-10 years;Advanced;Other - Write In (Required);c#;63;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 11;0,2;91;;;;;;;;;;;;;;;;Line 9;await #;77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;235;"const kimchi= ""cabbage"" |> wash |>cut |>salt |> new Jar(#) |> add(""spicy paste"", #) |>stir |> ferment(#,2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;too many operators, nested pipelines, fat arrow func with trailing pipeline;;;;;;;;;The Status quo;;not too difficult, altough on italina layot the pipe character is a little bit away from the standar spots;
1285;May 31, 2019 10:16:49 am;May 31, 2019 11:04:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559323009_5cf16181ab8d89.66455834;;;flattened vs both;more than 10 years;Expert;JavaScript;;174;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";74;;;;;;;Line 2;delete it or define a wash function;246;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;375;"// TODO: Define wash function const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Other - Write In (Required);After using the # a bit, I think I might prefer the lambda syntax to avoid introducing more complexity to the language. Regardless, I would choose a fluent interface over a complex pipe syntax.;;;No complaints. It's an easy combination.;"Dealing with multiple arguments is gross. I would almost definitely avoid it in favor of simpler code. Something like this:  const addToJar = (item) => new Jar(item); const addWater = (jar) => add(""water"", jar); const fermentForTwoDays = async (jar) => await ferment(jar, 2); const removeFromJar = (jar) => jar.takeOne();  const pickle = ""cucumber""   |> wash   |> addToJar   |> addWater   |> salt   |> await fermentForTwoDays   |> removeFromJar;"
1286;May 31, 2019 10:17:01 am;May 31, 2019 10:47:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559323021_5cf1618d5b3ab9.01541750;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;98;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;Should pass in a value for numDays in the ferment function;177;;;;;;;;;;;;;;;;Line 9;await requires the '#' param;135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;309;"const veggie = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Certainly the ternary operators;;;;;;;;;The proposal;;Didn't come easily and still having some issues, but could just be practice. |> |> |> |>;It is a bit unclear when the proceeding function will require the use of the '#'. I assumed it was when more than one parameter is in question or when using dot notation. The odd one is the constructor requiring the '#'. I'm sure there is something that I'm missing.
1287;May 31, 2019 10:17:39 am;May 31, 2019 10:28:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559323059_5cf161b3d3e3c1.55619709;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;147;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;", 5);";102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;I see three syntax errors (5,7,9);129;;;;;;;;;;;;;;;;;;;;;73;;;;;;;;;;;;;;;;;;The Status quo;;I would have preferred ->;
1303;May 31, 2019 10:29:54 am;May 31, 2019 11:05:11 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559323793_5cf16491ec0c12.71154539;;;flattened vs proposal 1;0-2 years;Intermediate;TypeScript;;106;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";364;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));120;;;;;;;;;;;;;;;;;;;;;773;"const kimchi = ""cabbage""     |>wash     |>cut     |>salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |>stir     |> (_ => ferment(_, 2))     |> await     |>(_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);unusual style;;;;;;;;;;;;;;The proposal;;quite easy and fast;
1305;May 31, 2019 10:32:01 am;May 31, 2019 10:57:54 am;Complete;;;English;https://qsurvey.mozilla.com/;1559323921_5cf16511102fc0.64307765;;;nested vs both;more than 10 years;Advanced;TypeScript;;140;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;Line 1;add `numdays` param to `ferment`;179;;;;;;;;;;;;;;;;Line 10;"await sauerkraut.takeOne();";130;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));47;;;;;;;;;;;;;;;;;;;;;275;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Current status quo;;;;weird without code ligatures font;"too much new syntax for marginal benefit.  ``` const washed = wash('cucumber'); const jar = new Jar(washed, 10); const watered = add(['water'], jar); const pickled = salt(watered); const pickle = (await ferment(pickle, 2)).takeOne(); ```"
1307;May 31, 2019 10:34:40 am;May 31, 2019 10:59:30 am;Complete;;;English;;1559324079_5cf165afe89920.22074585;;;nested vs flattened;5-10 years;Advanced;JavaScript;;100;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 11;Include a second argument to the ferment call to specify the number of days.;300;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar.;61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"let jar = new Jar(salt(cut(wash(""cabbage"")))); jar = add(""spicy paste"", jar); jar = ferment(stir(jar), 2);  const kimchi = jar.takeOne();";;;;;;;;;;- You either need to write your functions in the opposite order they are called in, or you need to continuously be shifting your cursor around. - Balancing your brackets correctly;You avoid needing to think of names for intermediates.;It would be nicer if the equal signs lined up so the steps could be scanned more quickly.;It's easy to see the arguments for each step.;;;;;;;
1308;May 31, 2019 10:34:29 am;May 31, 2019 11:23:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559324069_5cf165a51fdb55.39873635;;;nested vs proposal 2;more than 10 years;Intermediate;JavaScript;;465;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 2;267;;;;;;;;;;;;;;;;Line 9;|> await #;165;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;813;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;What caused me to slow down: the many if statements towards the end, and also line 12.;;;;;;;;;The proposal;;I loved it!;I sure hope this proposal gets accepted. This makes code such a pleasure to read and write â it's wonderful, IMO.
1310;May 31, 2019 10:37:55 am;May 31, 2019 10:58:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559324275_5cf16673626205.09624245;;;nested vs both;more than 10 years;Advanced;JavaScript;;96;"""number""";"""function""";"add.bind(null, 10);";"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the status quo better;;Line 11;Add a second parameter to ferment;154;;;;;;;;;;;;;;;;Line 10;takeOne;294;;;;;;;;;;;;;Line 5;(_ => new Jar(_));50;;;;;;;;;;;;;;;;;;;;;387;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> #.takeOne";;;;;;;;;;;;;;;Pipeline with #;;;;Not difficult.;
1311;May 31, 2019 10:38:32 am;May 31, 2019 11:09:38 am;Complete;;;English;;1559324312_5cf166986c42c6.53140976;;;nested vs proposal 1;3-5 years;Expert;JavaScript;;278;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 12;add a days argument. But in reality that error could be thrown anywhere and I have trust issues.;263;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));153;;;;;;;;;;;;;;;;;;;;;662;"""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_,2)) |> await |> (_.takeOne())";a bowl of jogurt with berries;whitespace formating;;Just the whitespace formatting almost tripped me up after fillBowl;;;;;;;;;;;;;The proposal;;It felt smooth like butter;thanks crew!
1316;May 31, 2019 10:40:46 am;May 31, 2019 11:08:24 am;Complete;;;English;;1559324446_5cf1671e81fe23.97721174;;;flattened vs both;more than 10 years;Advanced;JavaScript;;98;3;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;saltyCabbageJar;207;;;;;;;Line 9;await #;515;;;;;;;;;;;;;Line 5;(_ => new Jar());74;;;;;;;;;;;;;;;;;;;;;367;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()  // missing a signature for `wash` // but we'll assume it exists";;;;;;;;;;;;;;;Pipeline with #;;;;Unfamiliar, but not too awkward compared to other programming symbols. ;Looks nice and clean.
1317;May 31, 2019 10:40:59 am;May 31, 2019 11:07:18 am;Complete;;;English;;1559324458_5cf1672adedfd1.04382745;;;flattened vs proposal 1;more than 10 years;Expert;TypeScript;;208;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;184;;;;;;;;;;;;;;;;;;;;;;Line 5;insert the missing );78;;;;;;;;;;;;;;;;;;;;;264;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);complexity of the conditions;The if statement has so many conditions, combined using 'or' and 'and' so that took the most time to parse through.  The nested pipelines were not that problematic, but especially on line 12, it's not helping you at all, would have been much better to just call the function normally.  Line 14 the use of pipelines is somewhat more warranted, but the whitespace formatting is bad making it harder to parse.;;;;;;;;;;;;;The proposal;;Actually surprisingly hard, I guess I'll get used to it, but I found that didn't come naturally.;Overall I really like the proposal, can't wait to be able to use it.  Something seems a bit strange to me about the way you have to pipe to await, seems like something that would be very easy to forget.
1319;May 31, 2019 10:44:51 am;May 31, 2019 10:56:14 am;Complete;;;English;;1559324691_5cf1681394a854.04106892;;;flattened vs both;more than 10 years;Advanced;JavaScript;;43;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Fix naming;66;;;;;;;Line 10;I'm assuming # cannot be used this way.;276;;;;;;;;;;;;;Line 5;Add a parenthesis;33;;;;;;;;;;;;;;;;;;;;;164;"""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline with #;;;;I'm used to writing it with Hack so it was straightforward;I love the pipeline operator in other languages, and reaaally want it in JS.
1320;May 31, 2019 10:46:32 am;May 31, 2019 11:02:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559324792_5cf16878a5f800.77305793;;;nested vs both;5-10 years;Advanced;JavaScript;;55;;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;), 14;95;;;;;;;;;;;;;;;;Line 9;|> await #;108;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));40;;;;;;;;;;;;;;;;;;;;;197;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;I use arrow functions all the time and it's basically the same motion, but holding shift the whole time and one key over. Not having the muscle memory for it made it an adjustment, but people would pick it up fast.;I think both formats with _ and # should be valid in the final version.
1321;May 31, 2019 10:47:03 am;May 31, 2019 10:54:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559324823_5cf16897ae0864.21444777;;;flattened vs proposal 2;0-2 years;Intermediate;Other - Write In (Required);vb.net;37;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";85;;;;;;;Line 2;remove nonexistent function;69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;72;;;;;;a glass of wine;density of operators;;;;;;;;;;;The proposal;;A bit annoying;
1323;May 31, 2019 10:48:22 am;May 31, 2019 11:16:32 am;Complete;;;English;;1559324902_5cf168e6296450.83965527;;;flattened vs both;5-10 years;Expert;Other - Write In (Required);ReasonML;397;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;salt -> salty;88;;;;;;;Line 9;await ferment(#,14);127;;;;;;;;;;;;;Line 5;(_ => new Jar(_));21;;;;;;;;;;;;;;;;;;;;;8;;;;;;;;;;;;;;;;Other - Write In (Required);|> vs |.  t-last vs t-first;;;;
1328;May 31, 2019 10:53:19 am;May 31, 2019 9:15:37 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559325199_5cf16a0f6b2ed3.75807255;;;nested vs flattened;0-2 years;Intermediate;JavaScript;;328;number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 1 better;;;;;;Line 11;"); -> ,20);";35909;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const kimchiJar = await ferment(   stir(     add(       ""spicy paste"",       new Jar(         salt(           cut(             wash(""cabbage"")           )         )       )     )   ), 2 );  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Everything is so condensed in some ways it doesn't make for good readability at all, even though everything is concise.  It also sort of reminds me of languages like Turkish or Korean, where you don't put the verb until the end of the sentence. For English speakers that's very strange because you have to wait until the end to get the verb, and just like in Turkish or Korean, English speakers may need to start at the end of the sentence and work backwards. This could be harder for some developers and easier for others, depending on the human languages they know.;The fact that everything is in one line makes it easier to read on the other hand, because it keeps everything together and easier to track the pieces. ;This pattern has a number of similar and sort of repetitive terms that could confuse a reader. Variables like 'wateryCucumberJar' might distract from what's happening, and make the process more convoluted.;It is nice that it's procedural because it goes in a straight order that's easier for people to understand on a more natural level, in my opinion.;You never declared the output of the wash function, which threw me off. I wasn't sure if that was the error because it wasn't even specified whether that was supposed to be a function, nor did it say what the function returned, and I just assumed it returned a string.;;;;;;
1330;May 31, 2019 10:55:10 am;May 31, 2019 11:11:50 am;Complete;;;English;;1559325309_5cf16a7ddf3733.86586406;;;nested vs proposal 1;5-10 years;Intermediate;JavaScript;;68;number;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);I see the pattern, but not written this way. I see it more as assigning intermediate variables.;;;I like the status quo better;Line 11;add a second argument for the ferment function;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 4;"add "")"" to the end of the line";37;;;;;;;;;;;;;;;;;;;;;192;"const kimchi = ""cabbage""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.tackOne());";a bowl of jogurt with berries;whitespace formating;;"I read from top to bottom. The code comment with the fetch response really helped, and it also helped to know what ""fetch' does.  I was able to mostly ignore the pipe operators since there weren't a lot of arguments being added at each step, it was mostly just dealing with the ""_"".   Boolean logic operators are already hard for me to parse, so that part was a little tricky.   The only part where the pipe operators were a little harder to read was on lines 14-15, where they were they did not follow the ""one per line"" methodology.";;;;;;;;;;;;;The proposal;;Great question, and I'm glad this was asked. It was a pain in the butt to reach for both of those characters at the same time. The bottom right of the keyboard is already a sore spot for me and combining it with the top right of the keyboard is a little more painful.;
1334;May 31, 2019 10:58:37 am;May 31, 2019 11:13:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559325517_5cf16b4d866389.06599469;;;nested vs both;more than 10 years;Expert;JavaScript;;159;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;Add the numdays argument: `), 14`;127;;;;;;;;;;;;;;;;Line 10;Don't use the pipe operator: `.takeOne()`;206;;;;;;;;;;;;;Line 5;Add ) to the end of the line;35;;;;;;;;;;;;;;;;;;;;;169;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await(#)   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Fine :);Great idea!
1336;May 31, 2019 10:59:56 am;May 31, 2019 11:29:17 am;Complete;;;English;;1559325596_5cf16b9c328a46.42666368;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;80;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;saltCabbageJar â saltyCabbageJar (missing y);238;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing ) after the new Jar call;54;;;;;;;;;;;;;;;;;;;;;168;"let cabbage = wash('cabbage'); cabbage = cut(cabbage); cabbage = salt(cabbage); let jar = new Jar(cabbage); jar = add('spicy paste', jar); jar = stir(jar); jar = await ferment(jar, 2); const kimchi = jar.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);Using generic _ as the variable adds a level of abstraction that I usually avoid with descriptive variable names. ;It wasn't too slow to read because I was taught the new syntax in the previous examples, but if I took a step away from it and came back, I could definitely see the await statements after the async function call being a source of a lot of bugs, as well as the use of a generic _ argument, but that doesn't seem inherent in the syntax, just in this particular example;;;;;;;;;;;;;The Status quo;;Fine?;"I think this question is conflating ambiguous argument naming with the new syntax, which was a huge turnoff for me. In cases where we are calling a nested function, I would still always give a concise, descriptive argument name.  I'm also generally not a fan of the chaining pattern, which this resembles very closely. One issue I have with it is that it creates a situation in which not having a terminating ; at the end of a line is critical.  Lastly I think this could promote situations in which it might have been better to compose a few related operations in another function. I'm not sure I would ever write code like the status quo example without grouping some of those redundant operations... or maybe a factory method on Jar, etc.  In other words, this might be trying to solve a problem that would be better solved with existing patterns."
1340;May 31, 2019 11:03:02 am;May 31, 2019 11:16:51 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559325782_5cf16c5626cd01.15965900;;;flattened vs both;5-10 years;Expert;JavaScript;;66;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;correct variable name to saltyCabbageJar;241;;;;;;;Line 9;don't know;102;;;;;;;;;;;;;Line 5;Add missing ) at the end of line;27;;;;;;;;;;;;;;;;;;;;;220;"""cabbage"" |> wash |> cut |> salt  |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;Current status quo;;;;easy, no major issues;
1342;May 31, 2019 11:04:14 am;May 31, 2019 11:32:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559325854_5cf16c9ea15f71.65572384;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;99;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 2;218;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));114;;;;;;;;;;;;;;;;;;;;;257;"const kimchi = 'cabage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(' spicy taste', _)   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;"- bad and inconsistent formatting of pipes - long ""if"" statements with many operators";;;;;;;;;;;;;Other - Write In (Required);while the proposal looks quite interesting, the proposed status quo is biased as it's really unreadable;not bad, kind of elegant;
1343;May 31, 2019 11:04:30 am;May 31, 2019 11:32:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559325870_5cf16caea182c7.10749848;;;nested vs both;5-10 years;Advanced;JavaScript;;193;3;"""error""";;;;"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;Add a days parameter when invoking the 'ferment' function;152;;;;;;;;;;;;;;;;Line 9;Change to: |> await #;215;;;;;;;;;;;;;Line 5;Change to: |> (_ => new Jar(_));85;;;;;;;;;;;;;;;;;;;;;399;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add (""spicy paste"", #) |> stir  |> ferment (#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Odd;Nope
1346;May 31, 2019 11:05:27 am;May 31, 2019 11:15:53 am;Complete;;;English;;1559325927_5cf16ce76cfa97.25372147;;;flattened vs both;5-10 years;Advanced;Java;;3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3;;;;;;;;;36;;;;;;;;;;;;;;;28;;;;;;;;;;;;;;;;;;;;;28;;;;;;;;;;;;;;;;;;;;;
1350;May 31, 2019 11:09:26 am;May 31, 2019 11:39:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559326166_5cf16dd62edbf2.94262241;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;160;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await(ferment(saltyCabbageJar, 14);";126;;;;;;;Line 1;add the wash function;634;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;331;"const kimchi = 'cabbage' |> wash |> cut |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;whitespace formating;;new syntax is hard, whitespace is aweful, and nested ternary isn't the best.  The pipeline shortens stuff but does invite a lot of density;;;;;;;;;The proposal;;little weird but could get used to it;
1357;May 31, 2019 11:12:46 am;May 31, 2019 11:17:33 am;Complete;;;English;;1559326366_5cf16e9e9a1930.04121966;;;nested vs flattened;3-5 years;Advanced;JavaScript;;8;function;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Almost never;I like Pattern 1 better;;;;;;Line 3;;156;;;;;;;Line 4;;63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1358;May 31, 2019 11:12:55 am;May 31, 2019 11:48:46 am;Complete;;;English;;1559326375_5cf16ea7c56066.30345300;;;flattened vs both;5-10 years;Advanced;TypeScript;;43;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"""saltyCabbageJar""";1701;;;;;;;Line 7;salt(#);57;;;;;;;;;;;;;Line 5;(_ => new Jar());41;;;;;;;;;;;;;;;;;;;;;175;"const kimchiJar = ""cabage"" |> wash(#) |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;i mistype a couple times with \ instead of |;awesome work!
1359;May 31, 2019 11:13:08 am;Jun 3, 2019 3:49:18 pm;Complete;;;English;;1559326388_5cf16eb4153377.43757136;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;131;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Change first arg to `saltyCabbageJar` or change arg to `salt(cabbageJar)`;98;;;;;;;;;;;;;;;;;;;;;;Line 5;add `)` to the end;63;;;;;;;;;;;;;;;;;;;;;5172;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (cabbage => new Jar(cabbage)) |> (jar => add(""spicy paste"", jaw)) |> (jar => stir(jar)) |> (jar => ferment(jar)) |> await |> (jar => jar.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);The return statement having an attached pipe. Just wasn't expecting it.;I got used to it quickly but the hardest part was just understanding that await is apart of the output before it.;;;;;;;;;;;;;Other - Write In (Required);I like the proposal but I feel like it will be abused and turned into super shitty code;It is easy once you get used to the idea.  Linting would probably have to be mandatory though because it can easily get out of hand.;
1361;May 31, 2019 11:14:23 am;May 31, 2019 11:34:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559326463_5cf16eff9d93a7.28254177;;;nested vs both;5-10 years;Advanced;TypeScript;;134;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;add numdays;175;;;;;;;;;;;;;;;;Line 9;add #;48;;;;;;;;;;;;;Line 8;(async _ => await _);79;;;;;;;;;;;;;;;;;;;;;256;"const kimchi = ""cucumber""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;"It's fine, because it's close to ""enter.""";
1365;May 31, 2019 11:16:35 am;May 31, 2019 11:41:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559326595_5cf16f832ed431.44630024;;;nested vs both;0-2 years;Intermediate;JavaScript;;152;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;", 14);";219;;;;;;;;;;;;;;;;Line 9;await #;81;;;;;;;;;;;;;Line 5;(_ => new Jar(_));53;;;;;;;;;;;;;;;;;;;;;365;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It is a bit awkward, but it does not seem to be bad if it is adapted.;When this proposal is applied, JavaScript will become a language for much more functional programming. This is very natural because it is as natural as the human way of reading sentence.
1370;May 31, 2019 11:21:21 am;May 31, 2019 11:41:23 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559326881_5cf170a10da7e7.09807219;;;flattened vs both;more than 10 years;Beginner;Other - Write In (Required);html, css;250;Number;"""string""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 4;suppress the new keyword;30;;;;;;;Line 8;pass salt to the add function;208;;;;;;;;;;;;;Line 9;suppress the closing parethesis;191;;;;;;;;;;;;;;;;;;;;;37;;;;;;;;;;;;;;;;Pipeline with #;;;;ok :-);very nice survey: playful examples, story-driven. well done :-)
1373;May 31, 2019 11:24:13 am;May 31, 2019 11:48:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559327053_5cf1714d6b6892.54804101;;;nested vs both;more than 10 years;Advanced;JavaScript;;76;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 14;250;;;;;;;;;;;;;;;;Line 9;|> await #;46;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));160;;;;;;;;;;;;;;;;;;;;;302;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;On my US-QWERTY keyboard, the pipe (vertical bar) is a bit of a long reach for the right pinky. Both characters of the digraph are on the right hand, and both shifted, so the left shift can simply be held down, which is nice.;Is it allowed to explicitly put the # in when pipelining to a single argument function?
1374;May 31, 2019 11:24:25 am;May 31, 2019 11:41:54 am;Complete;;;English;;1559327064_5cf17158e60cd3.29722617;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;91;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Should have been flagged by the linter;433;;;;;;;Line 5;Given you've introduced the pipeline operator and the hash in the same example, the error printed at the end seems ... inaccurate;198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;66;Rewrite it using what? Vanilla JS? The new operators? This is a terrible survey.;;;;;;Other - Write In (Required);This would never fly in our codebase;This would have been laughed out of a PR before even getting a constructive comment;;;;;;;;;The Status quo;;You can pry my semicolons from my cold, dead hands;shrug emoji
1375;May 31, 2019 11:26:15 am;May 31, 2019 12:48:16 pm;Complete;;;English;;1559327175_5cf171c709cf53.04498216;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;52;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;saltyCabbageJar;680;;;;;;;;;;;;;;;;;;;;;;Line 5;Add an extra paren;37;;;;;;;;;;;;;;;;;;;;;3559;"const kimchiJar = ""cabbase""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> ferment   |> await";a bowl of jogurt with berries;nested pipelines;;It took a while to track down where the variables and properties were coming from.;;;;;;;;;;;;;The Status quo;;Not hard at all.;It doesn't seem any more terse if you have to initialize so many anonymous functions
1376;May 31, 2019 11:25:30 am;May 31, 2019 12:22:26 pm;Complete;;;English;;1559327130_5cf1719a91d952.37871335;;;nested vs both;more than 10 years;Expert;TypeScript;;249;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;), 14;168;;;;;;;;;;;;;;;;Line 6;"|> add(#, ""water"")";1678;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));49;;;;;;;;;;;;;;;;;;;;;400;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;it's a bit tiring ;"I do prefer composition style, just because that's what I'm used to.  pipe(   wash,   _ => new Jar(_),   .. )(""cucumber"")  even in Scala I tend to prefer ""_ andThen"" for using smaller compositions.  But I really love these smaller additions to JavaScript!"
1381;May 31, 2019 11:33:59 am;May 31, 2019 11:47:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559327639_5cf17397234dc9.02225520;;;nested vs flattened;more than 10 years;Expert;TypeScript;;111;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 11;Add the number of days;210;;;;;;;Line 6;Add the missing y;56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washed = wash(""cabage""); const cutted = cut(washed); const salted = salt(cutted); const jar = new Jar(salted); const withSpice = add(""spicy paste"", jar); const stirred = stir(withPaste); const kimchiJar = ferment(stirred, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Matching parens Knowing if an argument is missing;Fewer names;Remembering what each name means;Matching parens is easier Much clear separation of params;The problem with the second one is names, how to name each thing;;;;;;
1382;May 31, 2019 11:36:24 am;May 31, 2019 11:51:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559327784_5cf17428a636e4.84155394;;;flattened vs both;more than 10 years;Advanced;Java;;101;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 5;;250;;;;;;;Line 9;await #;109;;;;;;;;;;;;;Line 5;);90;;;;;;;;;;;;;;;;;;;;;73;;;;;;;;;;;;;;;;Pipeline with #;;;;Fine, if not on mobile;
1385;May 31, 2019 11:39:58 am;May 31, 2019 11:55:58 am;Complete;;;English;;1559327998_5cf174fe34b359.76196169;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;69;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;91;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a missing );64;;;;;;;;;;;;;;;;;;;;;286;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;"I had to reread line 14 and 15 because of the indentation and because I thought the return would be ""jogurtBowl"" versus just ""jogurt"".";;;;;;;;;;;;;The proposal;;Very easy and relatively intuitive given the abundance of | usage throughout any shell usage and > which the arrow function has already helped define a new meaning for it;It helps condense code and I like it!
1388;May 31, 2019 11:37:24 am;May 31, 2019 1:03:55 pm;Complete;;;English;;1559327844_5cf174646123b6.22347241;;;flattened vs proposal 2;0-2 years;Advanced;JavaScript;;182;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";98;;;;;;;Line 8;|> await ferment(#, 14);116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;170;"const kimchi = ""cabbage""   |>wash   |> cut   |> salt   |> new Jar(#)   |> add(#, ""water"")   |> stir   |> await ferment   |> takeOne  ";;;;;a bowl of jogurt with berries;inconsistent style;;The multi-line & nested ternary statements added some confusion, but the really tricky thing was that the pipeline operator's formatting changed in those contexts. There were instances where there were multiple pipelines on the same line, which broke the consistency of the the usage seen before. I'd be curious to see how this would be if the pipelines stayed consistent during the multi-line ternaries.;;;;;;;;;The proposal;;I wish that the pipe was elsewhere on the keyboard. For some reason my instinct is to use my right hand for both the shift and the pipe, but it is waaaay easier to use the left Shift + pipe.;Love this, please make it part of ES. 
1389;May 31, 2019 11:44:20 am;May 31, 2019 1:36:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559328260_5cf176049bb2e9.57340430;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;753;number;"""error""";"add.bind(null, 10);";"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;put ', 14' (without the quotes) just before the parenthesis on line 11;174;;;;;;;;;;;;;;;;Line 5;Replace the # in the call to 'new Jar' with cabbage, but I am not really sure as I find this syntax to be less than intuitive (and I am being kind here).;545;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;822;"Christ, you people are nuts. The way this question is presented is not at all clear. For example, I did have not seen the first proposal in any of the previous parts of this survey. Second, simply doing this:  var Ingredient = wash (""cabbage"");       Ingredient = cut    (Ingredient);       Ingredient = salt   (Ingredient);  var MyJar       = new Jar (Ingredient);  ...etc.  is so much easier to understand. I know that the pipeline proposal probably opens major optimisation opportunities but the fat-arrow syntax is hard enough to understand in the first place, and the |> operator only compounds that. I can't imagine having to teach this stuff (I am a professional trainer as well as programmer), and I suspect it will be a step backwards in defect prevention because it is so dense and obscure.";;;;;;Other - Write In (Required);The whole damn thing past line 5 is just a nightmare.;Yep, got to line 5 then gave up about seven seconds later. Certainly the layout is the first obstacle (and it's a big one), the problem for me after that is that you keep using this # thing, and all you said earlier is that it is 'a placeholder' without being clear about what you mean (this invalidates your survey somewhat). Second, I like the idea of fat-arrow functions, but I struggle badly with the syntax. I have looked at these things a few times in the past, and I would like to use them because the 'function' keyword takes up around 10% of the code that I minify, but I am always left feeling confused and rather irritated. To paraphrase what I said in the last question, adding the pipeline operator to the fat-arrow syntax just makes alien-looking code look even more alien, and I don't think it is worth mangling an otherwise elegant language, whatever the performance benefits it might bring - this all smacks of ideology over pragmatism.;;;;;;;;;The Status quo;;It was hardly challenging. It is the semantics not the symbol that matters.;Yes, following my comments in the previous question, I have just worked out what you mean by '#'. It is supposed to mean 'it', as in the thing that is created in the 'new Jar call'. This then gets passed subsequently in the calls to 'add' etc. Right, got it. OK, points:  1) The pipeline idea is great, in principle, although I am perfectly happy with the status quo.  2) The syntax is not quite as bad as the fat-arrow stuff (and I appreciate you don't have a lot of latitude here), although I can imagine some people combining it in complex and abstruse ways with other operators, thus making write-only code soup, like alphabetti spaghetti.  3) Major optimisation potential is always worth looking at (and yes, I am aware that you did not mention that in this survey, I am going on my understanding of languages and compilation etc.).   4) I do not believe for one moment that adding the pipeline operator will reduce defects. In my view, things like that and the painful fat-arrow syntax actually foster defects and bloat what used to be a relatively simple language.  5) I _really_ don't like the way that JavaScript has been messed with over the last ten to fifteen years. Yes, I know that some things were absolutely necessary, and others were simple, useful improvements (const, for example) - I applaud these things -  but it is fast becoming a kitchen-sink language (everything including...). The irony is that I almost never use the majority of the features added since v3.1 - I simply don't need to. What works for me is the elegance of the core language coupled with exemplary design on my part. Good design trumps everything in programming, a point that enjoys only sparse teaching, and the core JS language always gets me there simply and with few problems that relate to the language itself.  6) I am sorry to say that I think the quality of this survey (which invalidates it somewhat, as I said earlier) was sub-par for these reasons:  a) I don't recall you explaining the # thing very well early on or subsequently.  b) You didn't offer an 'Have not got a clue' in the multi-choice questions, which was my immediate gut response with some of them (so I had to leave one of them without a selection).  c) Having to type a response into a single, very short, one-line input field in the initial questions was absurd. I really needed more space so that I could see what I was typing.
1391;May 31, 2019 11:46:38 am;May 31, 2019 12:33:59 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559328398_5cf1768e7bc4b6.32473751;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;156;function;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;, 14;165;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);28;;;;;;;;;;;;;;;;;;;;;527;"const kimchijar = ""cabbage"" |> wash |>(_ => cut(_)) |>(_=>salt(_)) |>(_ => new Jar(_)) |>(_=>add(""spicy paste"", _)) |>(_=>stir(_)) |>await |>(_=>ferment(_, 2)) |>(_=>_.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);determining what _ is referencing;;;;;;;;;;;;;;The proposal;;this is the annoying part, I like the feature (I often use flow() in lodash or lodashfp or similar libraries to do the same thing) but typing |> is very awkward for me because it is new, and because of the (shift + double right side character) combo. It wouldn't be an issue if this was something that was used only sparsely like || but this seems like it will become as ubiquitous as the . operator and not sure if it will become easier with use or remain awkward.;curious how will it work with more parameter (foo, bar, baz) => {} functions, like what the scope of parameters are and how it would work in practice with things like map reduce etc. also the outside parens seem redundant
1392;May 31, 2019 11:47:04 am;May 31, 2019 12:04:24 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559328424_5cf176a8925367.37992318;;;nested vs proposal 1;5-10 years;Intermediate;Other - Write In (Required);c#;102;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;;I like the status quo better;Line 1;"append "", 14""  to line 10";147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"append "")"" to line 5";43;;;;;;;;;;;;;;;;;;;;;362;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => Jar(_))     |> (_ => add(""spicy paste"", _))     |> (_ => stir(_))     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;;;;;;;;;;;;;;The proposal;;;
1398;May 31, 2019 12:00:52 pm;May 31, 2019 12:26:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559329252_5cf179e4260af3.50183061;;;nested vs proposal 2;0-2 years;Intermediate;Ruby;;219;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;235;;;;;;;;;;;;;;;;Line 7;salt(#);81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;450;"const kimchiJar = ""cabbage""   |> wash   |> cut(#)   |> salt(#)   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#)   |> ferment(#, 2)";;;;;a bowl of jogurt with berries;whitespace formating;;This was easy to read until I got to the first conditional. The way it is structured made it difficult to follow the flow of the logic. ;;;;;;;;;The proposal;;It was fine. Ideally, it would just be one character though. ;I really like this proposal. It's much easier to see how many arguments a function has at a glance. 
1400;May 31, 2019 12:02:36 pm;May 31, 2019 12:25:29 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559329356_5cf17a4c9b2959.12191001;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;173;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";265;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));107;;;;;;;;;;;;;;;;;;;;;287;"const kimchiJar = await ferment(   stir(add(""spicy paste"", new Jar(salt(cut(wash(""cabbage"")))), 2 ); const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;;;;;;;;
1404;May 31, 2019 12:03:55 pm;May 31, 2019 12:32:55 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559329435_5cf17a9b11f8b8.51187821;;;flattened vs both;5-10 years;Expert;TypeScript;;170;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkraut = await ferment(saltyCabbageJar, 14);";234;;;;;;;Line 9;|> await #;512;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));52;;;;;;;;;;;;;;;;;;;;;225;"const kimchi = ""cucumber"" |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It's ok.;
1406;May 31, 2019 12:06:51 pm;Jun 3, 2019 6:21:28 am;Complete;;;English;;1559329611_5cf17b4b9f9585.44844772;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;45;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";201;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));26;;;;;;;;;;;;;;;;;;;;;680;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await;";a bowl of jogurt with berries;inconsistent style;;I find large conditional operators to be the least readable portion. I tend to restructure them into constants, if doing so is not inconvenient for program flow.  Because the conditional blocks return, the use of else if is not needed, so the else-if could be a plain if and relevant constants could be defined at point-of-use.  The inconsistent style of the nested pipeline was briefly confusing, but took much less time to reconcile than the conditions.;;;;;;;;;;;;;The proposal;;Fine.;I like pipelines, but I don't like the parentheses around the anonymous functions... they feel like extra and likely to generate errors. 
1407;May 31, 2019 12:07:56 pm;May 31, 2019 12:22:31 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559329676_5cf17b8c26c231.64942735;;;flattened vs both;0-2 years;Advanced;JavaScript;;81;number;"""error""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;I'll replace salt with salty;126;;;;;;;Line 10;Use the # as a parameter;79;;;;;;;;;;;;;Line 5;I would add ) at the end of the line;93;;;;;;;;;;;;;;;;;;;;;156;;;;;;;;;;;;;;;;Pipeline with #;;;;Not common, so not comfortable;
1409;May 31, 2019 12:12:47 pm;May 31, 2019 12:48:36 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559329967_5cf17caf644027.48485887;;;nested vs proposal 2;3-5 years;Expert;TypeScript;;270;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 9;), 14;188;;;;;;;;;;;;;;;;;Can't find the bug;442;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;421;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;a bowl of jogurt with berries;inconsistent style;;Line 12 is hardest to read;;;;;;;;;The proposal;;Got used to it after few times;|> await This feels little unnecessary  |> await ferment(#, 2) This is easier
1414;May 31, 2019 12:20:06 pm;May 31, 2019 12:53:18 pm;Complete;;;English;;1559330406_5cf17e667546f1.57951460;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;91;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;fix typo;42;;;;;;;Line 2;implement wash method;783;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;380;"const kimchi = ""cabbage"" |> wash |> cut |> salt  |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);unless I'm reading it wrong, seemed to make sense to me;It wasn't bad reading this code. The comment helped.    I simply walked through the code and it made sense.;;;;;;;;;The proposal;;Good, considering. I like that both characters involve holding down the Shift key, so it's relatively smooth to type both in order.;Takes an adjustment, but I'm a fan of ternary operators, so I think this is something that I can get behind.
1415;May 31, 2019 12:21:12 pm;May 31, 2019 12:48:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559330472_5cf17ea8aa7102.18057077;;;flattened vs both;more than 10 years;Expert;JavaScript;;52;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix typo: change variable to saltyCabbageJar. Also: wash() hasn't been defined, but oh well.;545;;;;;;;Line 9;await #;15;;;;;;;;;;;;;Line 5;add ) to end of line 5;52;;;;;;;;;;;;;;;;;;;;;245;"const kimchi =    ""cabbage""    |> wash    |> cut    |> salt    |> new Jar( # )    |> add( ""spicy paste"", # )    |> stir    |> ferment( #, 2 )    |> await #    |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;It's an annoying operator to type on my US keyboard. It requires shift key with two separate keys (as opposed to ++ or &&, which are two of the same key).;TBH, I really don't like a pipeline operator at all, because:  1. It de-emphasizes currying (which I think is better and more appropriate for FP-style coding). The whole reason you need an inline function wrapper, or a # placeholder for multi-argument functions, is because you're not working with curried functions at each stage of the pipeline.  2. The operator itself is not a function that I can do things with, like currying (so that I can define pipelines partially at different times).
1418;May 31, 2019 12:26:26 pm;May 31, 2019 12:56:04 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559330786_5cf17fe24461b6.54087566;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;74;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";143;;;;;;;Line 9;|> await #;90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;302;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2) // I hope this works  const kimchi = kimchiJar.takeOne() // figured you might want the jar variable too";;;;;a bowl of jogurt with berries;too many if statements;;"The logic itself was straightforward most of the time, the hard part was understanding what it wants to do with each case. To make it easier to read, I'd make an intermediary variable for the commented object and use separate if statements for handling breakfast, snack time, and dinner. (Also, the ?. operator could help, as in #.jogurt?.ready, wasn't that a proposal too?)  In my opinion the easy part about this was the new |> operator. It makes nested functions go left to right in logic, not inside out like they used to, which reduces cognitive load. This would be a lot harder to understand with code like add(""berries"", fillBowl(something.jogurt)).";;;;;;;;;The proposal;;I liked it, definitely looking forward for this feature.;Regarding the examples, I wouldn't make a separate line for await, asynchronous code shouldn't be special.  A way for naming the intermediary variable aliased with # would be nice for error messages. `new Jar(#washedCucumber)` would probably conflict with the private variables feature, but if there's a good syntax for such a thing it would make it easier to debug code if the error message doesn't include the line number.
1420;May 31, 2019 12:33:02 pm;May 31, 2019 1:14:50 pm;Complete;;;English;;1559331182_5cf1816e2184e7.73760218;;;flattened vs both;3-5 years;Intermediate;JavaScript;;216;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;Rename saltCabbageJar to saltyCabbageJar;380;;;;;;;Line 9;Add # after await;696;;;;;;;;;;;;;Line 5;Add ) at the end;97;;;;;;;;;;;;;;;;;;;;;366;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Other - Write In (Required);I liked the pipeline with # more only because await was used in it, and using _.then adds a lot of parentheses.;;;I needed a bit of time getting used to it, but it simplifies the usage a lot.;Thanks for improving the language :-)
1422;May 31, 2019 12:36:01 pm;May 31, 2019 12:59:02 pm;Complete;;;English;;1559331361_5cf182216c3266.91977253;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;57;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;Add `, 14` to line 10;164;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a `)` to line 5;47;;;;;;;;;;;;;;;;;;;;;303;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> ferment(_, 2)   |> await";a bowl of jogurt with berries;whitespace formating;;I just started on the top and read down, keeping the result in my head  When the |> was on one line on line 14 then on the second line on line 15;;;;;;;;;;;;;The proposal;;A little odd but i am a poor typer anyway;I often use a pipe() function for these kinds of things, this would be a welcome addition to the language for me
1424;May 31, 2019 12:42:43 pm;May 31, 2019 1:05:03 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559331763_5cf183b3668188.92926526;;;flattened vs both;5-10 years;Advanced;JavaScript;;275;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;221;;;;;;;Line 9;await #;117;;;;;;;;;;;;;Line 5;add closing paren at end of line 5;45;;;;;;;;;;;;;;;;;;;;;325;"const pickle = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |>  #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;It was a little awkward at first but I think I'll get used to it. Just like I got used to typing `=>` for the lambda function syntax.;I hope this makes it into the language.
1426;May 31, 2019 12:42:14 pm;May 31, 2019 1:38:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559331734_5cf183967f4a06.94324271;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;90;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Use the correct variable name;1477;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a parentheses in the end of the line 5;151;;;;;;;;;;;;;;;;;;;;;317;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;I didn't slow down reading this code, but the chained if operators made me reread some times the lines with the result of the request or the lines with the property attributions.;;;;;;;;;;;;;The proposal;;"It wasn't hard to type but I'd prefer if the feature followed the standard shellscript pipe operator that has only the ""|"" character, not only because it has fewer characters but also to follow a pattern that makes easier to people reason about when reading the code, for example, people learning javascript but with previous knowledge in shellscript would immediately assimilate that this is the pipe operator and would know how it works and vice-versa.";
1427;May 31, 2019 12:43:38 pm;May 31, 2019 1:14:44 pm;Complete;;;English;;1559331818_5cf183ea151666.89909958;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;199;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;fix line 6 to add y to the undefined word;87;;;;;;;Line 5;Make it a string;46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1161;"const kimchiJar = await ferment(stir(add(""spicy paste"", new Jar(salt(cut(wash(""cabbage"")))))))";;;;;null;density of operators;;The pipes made more sense here but the issue here was that there are too many and/or and ternary operators that are slowing down my ability to read the result.;;;;;;;;;The proposal;;Pretty easy;
1428;May 31, 2019 12:46:32 pm;May 31, 2019 1:41:11 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559331992_5cf184981ff743.69808588;;;flattened vs both;3-5 years;Expert;JavaScript;;154;Number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Change variable name where it is used;1717;;;;;;;Line 10;I don't know;212;;;;;;;;;;;;;Line 5;Add missing parenthesis to line 5, in order to close the function;74;;;;;;;;;;;;;;;;;;;;;516;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Easy enough;"With the pipeline with #, is wasn't obvious to me why writing ""#"" was necessary after the await. I thought that ""|> await"" would be enough.  I largely prefer the consciseness of the #-pipeline, but I must admit that it might look a bit too magical. The pipeline with functions does look more familiar, since it uses the functions we are familiar with.   I regret that the pipeline would not let us create curried functions tough. Something like ""const add10 = |> add(10, #)"". But maybe that could come later !"
1434;May 31, 2019 12:51:57 pm;May 31, 2019 1:22:40 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559332317_5cf185dd520914.78328015;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;82;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;159;;;;;;;;;;;;;;;;Line 9;|> await #;297;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;202;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);Complex operations written in pipeline code (including if statements and nested pipelines).;Although the ES pipeline proposal must certainly define the operator precedence of pipelines, from the introduction to them in this survey it wasn't clear how they ranked against the ternary operator. But then I noticed that if the pipeline operator had higher precedence than the ternary operator, the lone colon in line 11 would be a syntax error, so it had to be the other way around. Then I saw that the condition was true, and forgot about the else part of the operator.;;;;;;;;;The proposal;;;For the code using the proposal to match the original code,  line 3 would need to be changed to:  |> new Jar(#, 10)
1436;May 31, 2019 12:53:58 pm;May 31, 2019 1:18:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559332438_5cf18656210c23.18657777;;;nested vs both;more than 10 years;Advanced;TypeScript;;111;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;it becomes: `), 14`. Maybe even with a new line after the ,;212;;;;;;;;;;;;;;;;;;338;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));51;;;;;;;;;;;;;;;;;;;;;246;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;A bit weird, but also jsx was weird.;"Feels a bit that the recipe examples are a bit ""forced"". They explain very nicely the proposal and feels good to solve with the new syntax but im not sure that in every day coding it would feel that good.  I wasnt able to spot the ""await #"" bug (i left the response empty, i discovered the bug from the following steps). I kinda felt like await was automatically taking the input from the pipe."
1438;May 31, 2019 12:56:45 pm;May 31, 2019 1:46:45 pm;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559332604_5cf186fce4e453.77462404;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;196;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));65;;;;;;;;;;;;;;;;;;;;;348;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> await |> (_ => ferment(_, 2));";a bowl of jogurt with berries;too many if statements;;Most time consuming was tracking of variables passed in and couming out of functions. It wouldn't be so hard if variables had good naming.;;;;;;;;;;;;;The proposal;;Not bad, not bad at all.;Line 3 should be: |> (_ => new Jar(_, 10))
1440;May 31, 2019 1:01:57 pm;May 31, 2019 1:46:59 pm;Complete;;;English;;1559332917_5cf18835a405c8.36129656;;;nested vs proposal 1;more than 10 years;Advanced;Other - Write In (Required);PHP;157;integer;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;922;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));55;;;;;;;;;;;;;;;;;;;;;231;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;Most part of the code used _ as the input variable. I had to read #15 twice to realize jogurt was just the name of the input variable.;;;;;;;;;;;;;The proposal;;Fast;LGTM
1442;May 31, 2019 1:04:25 pm;May 31, 2019 1:20:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559333065_5cf188c99dc933.37959770;;;flattened vs both;more than 10 years;Intermediate;Java;;304;number;"""function""";;;"y => add(10, y);";;;;;;;;;;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Correct var on 6 or 7 to be consistent.;172;;;;;;;Line 10;;128;;;;;;;;;;;;;Line 5;add );27;;;;;;;;;;;;;;;;;;;;;122;;;;;;;;;;;;;;;;Pipeline with #;;;;;
1444;May 31, 2019 1:11:39 pm;May 31, 2019 1:38:10 pm;Complete;;;English;;1559333499_5cf18a7b360909.07863362;;;nested vs proposal 2;more than 10 years;Advanced;TypeScript;;111;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);often but usually I have intermediates declared as variables because that's hard to parse;;;I like the status quo better;Line 10;append `, 14`;110;;;;;;;;;;;;;;;;Line 9;change to `await #`;125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;316;"const kimchiJar = await wash('cabbage')   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _)   |> stir   |> (_ => ferment(_, 2))  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;I ignored the constants declared at the top of the file first and read through the pipelines to get a sense of what was happening before reading the question or attempting to parse a result. Having a sense of what result was trying to resolve into helped but I still needed to re-examine the pipelines even after I was pretty sure I was in the correct ternary clause statement;;;;;;;;;Other - Write In (Required);If I ever saw code like this I'd ask my teammate (or myself) to break it up. In both cases it demands too much cognitive load to understand what is happening. The proposal is more declarative though and as a result could be easy to use in smaller statements.;No more or less awkward than other common operators in JavaScript.;
1445;May 31, 2019 1:12:08 pm;May 31, 2019 1:44:44 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559333528_5cf18a98be22e5.58382205;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;160;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 10;"Replace it with ""), 14""";158;;;;;;;;;;;;;;;;Line 10;"Replace line 9 with ""await #""? How new syntax handles built in operators like ""new"" and ""await"" hasn't been explained in this survey, so it's hard to know what would be the correct way to pipe those.";284;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;323;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(_) |> add(""spicy paste"", _) |> stir |> ferment(_, 2) |> await _ |> _.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;It's not too hard, but I the use in the ternary combined with new formatting and the switch between using and not using the placeholder character were things that made me slow down.;;;;;;;;;The proposal;;Okay I guess, but I would prefer it if it was only one character like in the shell.;"Can we please make the placeholder parameter mandatory to use? :). These implicit things are what usually trip up people new to a language. Take this e.g: const foo = ""John"" |> getLastName |> getPreferedTitle(#) |> new Person(#) |> await # |> greet('hello', #)  Where is ""#"" mandatory and why? Both the ""new"" and the ""await"" cases above have only one ""argument"", yet you still have to provide the placeholder. You have to understand quite a lot about the language structure to understand why that is and it would be hard for a newcomer who hasn't seen the placeholder used before to figure out what it does. If it was always present, it would probably be a lot more obvious."
1446;May 31, 2019 1:13:07 pm;May 31, 2019 2:48:00 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559333587_5cf18ad3a61e60.98344858;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;486;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;change the param saltCabbageJar to saltyCabbageJar;1281;;;;;;;Line 9;|> await #;536;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;304;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;"I think line 12 has a bug because the expression (({wine}) => wine |> fillGlass) is a function that is expecting an object with a property called wine but it is being called without any parameters so it will return a destructuring error. I think the intention of line 12 was ? (({wine}) => wine |> fillGlass)(#) which would fill the glass with the wine.  and, if I am not totally confused, line 13 has an unmatched "")"", I assume that the snippet just doesn't include the matching start (   overall, again assuming I am correct it returns a bowl of jogurt and berries, it was pretty easy to see when a bowl of jogurt and berries is returned. However, the bug was not evident until I really drilled down and tried to figure out how a filled glass of wine would be returned";1555;;;;;;;;The proposal;;"Takes a bit of getting used to, kept typing ""\"" instead.";The proposal grew on me as I started really diving into it.
1448;May 31, 2019 1:27:39 pm;May 31, 2019 1:38:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559334459_5cf18e3b109ab7.87953146;;;nested vs flattened;5-10 years;Advanced;JavaScript;;256;number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 12;;128;;;;;;;Line 6;"... = await ferment(saltyCabbageJar, 14);)";83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1452;May 31, 2019 1:34:11 pm;May 31, 2019 2:25:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559334851_5cf18fc3b92966.03919921;;;flattened vs both;more than 10 years;Advanced;JavaScript;;174;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 4;"const cabbageJar = Jar(crushedCabbage);";237;;;;;;;Line 5;|> Jar;256;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));202;;;;;;;;;;;;;;;;;;;;;472;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;annoying, but used editor line duplication so not that bad;"First was more obvious, but warmed up to second, but don't like the comment character use.  Worried about type checking with Flow.  Ideal is pretty much the same with different character:  const pickle = ""cucumber""   |> wash   |> new Jar(_)   |> add([""water""], _)   |> salt   |> ferment(_, 2)   |> await   |> _.takeOne();"
1460;May 31, 2019 2:05:00 pm;May 31, 2019 2:46:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559336700_5cf196fc61c357.69978688;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;421;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 4;Add crushedCabbage to instance of Jar using add function.;403;;;;;;;Line 7;|> salt(#);98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;760;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;slowest part was reading though a bunch of operators within 6 line deep ternary statement.  I would yell at someone trying to make one giant pipeline out of this.;;;;;;;;;The Status quo;;It's  little cumbersome, with the keys were closer together.;How would you debug this syntax.  I can output code in the status quo after any line, would you just add:  |> console.log(#)  I really fear people making a mess of code with this.
1464;May 31, 2019 2:07:26 pm;May 31, 2019 2:43:05 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559336846_5cf1978e896211.46043705;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;210;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;fix typo.;160;;;;;;;;;;;;;;;;;;;;;;Line 5;"add "")"" to line end";105;;;;;;;;;;;;;;;;;;;;;343;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;identifiers;;it's a little hard to recall previous process result, mainly fetch's result.;;;;;;;;;;;;;The Status quo;;"type ""shift +  - "", type ""shitf + ."". (I use JIS keyboard)";it's not simple to debug previous processing.
1471;May 31, 2019 2:22:29 pm;May 31, 2019 2:40:28 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559337749_5cf19b15135504.34547300;;;flattened vs both;5-10 years;Intermediate;JavaScript;;211;number;"""function""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;No idea;137;;;;;;;Line 10;No idea;100;;;;;;;;;;;;;Line 5;Adding ) at end of line;72;;;;;;;;;;;;;;;;;;;;;129;;;;;;;;;;;;;;;;Pipeline;;;;Easy;
1473;May 31, 2019 2:24:28 pm;May 31, 2019 2:40:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559337868_5cf19b8c2eca28.67520541;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;157;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 6;"write the method ""wash""";158;;;;;;;;;;;;;;;;Line 2;"write the method ""wash""";48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;141;the wash function is still missing.;;;;;a bowl of jogurt with berries;Other - Write In (Required);wasnt hard;nothing;;;;;;;;;The Status quo;;;the proposal is trying to solve a problem that is the human factor. if people write shit code, they write shit code with any syntactic feature. adding a additional syntactic feature will make stuff only worse.
1474;May 31, 2019 2:26:41 pm;May 31, 2019 3:49:28 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559338001_5cf19c11d0fd59.13874240;;;nested vs proposal 1;more than 10 years;Expert;TypeScript;;139;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;, 2;242;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);196;;;;;;;;;;;;;;;;;;;;;3943;Too bad I'm on mobile;a bowl of jogurt with berries;whitespace formating;;;;;;;;;;;;;;;The proposal;;I would prefer ::;
1475;May 31, 2019 2:13:29 pm;May 31, 2019 3:07:44 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559337209_5cf198f9caa3d1.26742830;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;136;"""number""";"""function""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;add the day length;488;;;;;;;;;;;;;;;;Line 9;await #;361;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;378;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;density of operators;;Following the multiple booleans/ternaries + parenthesis;;;;;;;;;The proposal;;awkward at first but fine after a bit;Would prefer explicit declarations per line
1478;May 31, 2019 2:41:27 pm;May 31, 2019 3:11:12 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559338887_5cf19f878650b6.37749840;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;146;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;380;;;;;;;;;;;;;;;;;;;;;;Line 5;add the missing ) to the end of line 5;163;;;;;;;;;;;;;;;;;;;;;412;const kimichi = 'cabbage'  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add('spicy paste', _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne());a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;;;;;;;;
1479;May 31, 2019 2:44:54 pm;May 31, 2019 3:10:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559339094_5cf1a056a2d347.45927743;;;flattened vs both;0-2 years;Intermediate;JavaScript;;460;3;"""error""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;261;;;;;;;Line 8;await ferment(#, 14);137;;;;;;;;;;;;;Line 5;(_ => new Jar(_));154;;;;;;;;;;;;;;;;;;;;;207;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy taste"", #)   |> stir   |> await ferment(#, 2)  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Current status quo;;;;Type with |> was fine, but with the Pipeline proposal, the use of (_ makes it difficult to read.;
1481;May 31, 2019 2:54:13 pm;May 31, 2019 3:11:52 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559339652_5cf1a284ef4c93.43955973;;;nested vs flattened;3-5 years;Advanced;JavaScript;;111;Number;"""function""";;;"y => add(10, y);";;;;;;Never;Almost never;;;;;;;Line 10;, 2;225;;;;;;;Line 6;SaltyCabvageJar;90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"Wash(""cabbage"").cut().salt().put(jar).add(""pate"").stir() Some people prefer curry, it was not nice to exclude them. ";;;;;;;;;;It's a function composition style not finisyed, but hidden in a parentheses hell.;Piping is even easier for people reading from left to right;It us too verbose, good fir learning, not so much fir work;;It would be nice to have option not to like both patterns;;;;;;
1486;May 31, 2019 3:08:32 pm;May 31, 2019 3:34:23 pm;Complete;;;English;;1559340511_5cf1a5dfd87312.07560075;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;204;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Rarely in the way described, but every now and then as a longer sequence of statements achieving the same;;;I like the proposal better;Line 11;", 14);";163;;;;;;;;;;;;;;;;Line 9;await # (but I went back 2 pages and cheated to get the answer));212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;173;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;The awaits were fine. The attempt to do inline ternaries is bad, introducing repetitions of #.jogurt and cross-referencing globals like isBreakfast and isSnackTime.  I had to recheck to make sure i understood the ternary results.  Branching logic should be its own function, or not part of the pipeline.;;;;;;;;;The proposal;;Didn't have a problem. Had to get used to knowing when to use # (basically anything it wasn't a single argument function, including await and object constructors apparently).;"The proposal is better, but the comparison isn't really fair. e.g. something like  const jar = new Jar(wash(""cucumber""), 10); const marinatedJar = salt(add([""water""], jar)); const pickleJar = await ferment(marinatedJar, 2); const pickle = pickleJar.takeOne();  is arguably the clearest and least error prone. In that vein,  const jar = ""cucumber"" | wash | new Jar(#, 10); const marinatedJar = jar | add([""water""], #) | salt; const pickleJar = marinatedJar | ferment(#, 2) | await #; const pickle = pickleJar.takeOne();  Could be the best option."
1490;May 31, 2019 3:14:13 pm;May 31, 2019 4:00:02 pm;Complete;;;English;;1559340853_5cf1a7357f62e1.98574151;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;21;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";64;;;;;;;Line 9;await #;20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1574;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Took me a minute to evaluate ternary expression started on line 8;;;;;;;;;The proposal;;More or less easy, a typed \> a few times instead of |>;I would use the proposal but I would try not to abuse it in ugly code...
1491;May 31, 2019 3:10:46 pm;May 31, 2019 7:58:53 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559340645_5cf1a665e740d9.64359790;;;flattened vs proposal 1;more than 10 years;Intermediate;Python;;15163;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;s/salt/salty/;220;;;;;;;;;;;;;;;;;;;;;;Line 5;s/$/)/;107;;;;;;;;;;;;;;;;;;;;;631;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await;";a bowl of jogurt with berries;;;;;;;;;;;;;;;;The proposal;;;
1493;May 31, 2019 3:14:53 pm;May 31, 2019 3:37:41 pm;Complete;;;English;;1559340893_5cf1a75d602680.88643786;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;124;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;write `saltyCabbageJar` instead of `saltCabbageJar`;229;;;;;;;Line 9;|> await #;49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;202;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #  const kimchi = kimchiJar.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;"Running fetch in such a manner was very odd to me, especially when those parts can be ""piped"" with .then(). Also quite unclear is what happens if fetch fails and how can I handle the error.  Nested ""if-else"" statements is usually quite hard to debug. Tho, seeing the data here (and running that process in my mind only once) easily lead me to the answer.";;;;;;;;;The proposal;;"Ok. I like how it visually resembles actual pipe and "">"" indicates that data is coming into the next function.";I'd love to see it implemented!
1494;May 31, 2019 3:19:18 pm;May 31, 2019 3:43:57 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559341158_5cf1a866527101.01340887;;;nested vs proposal 2;3-5 years;Intermediate;TypeScript;;145;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"Add day length as a second parameter to ""ferment"" function";261;;;;;;;;;;;;;;;;Line 9;"Add space and # after ""await""";118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;268;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar(#) 	|> add(""spicy paste"", #) 	|> stir 	|> ferment(#, 2) 	|> await # 	|> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The proposal;;;
1495;May 31, 2019 3:25:01 pm;May 31, 2019 3:53:51 pm;Complete;;;English;;1559341501_5cf1a9bd35b061.00007363;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;14;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";47;;;;;;;;;;;;;;;;Line 9;|> await #;15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;869;"const kimchi = ""cucumber""     |> wash     |> cut     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> await ferment(#, 2)     |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;"I understood it fine through up to the wine part. The conditional checks to make the fetched data got in the way, the `?.` optional chaining operator would be very helpful here. The wine IIFE feels ""wrong"", to me, like it should not work.";;;;;;;;;The proposal;;"fine; I don't really think there's better options since `|` and `>` are already used, and `->` looks too much like an arrow function.";
1499;May 31, 2019 3:35:04 pm;May 31, 2019 3:49:18 pm;Complete;;;English;;1559342104_5cf1ac18c616b6.89759822;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;55;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;157;;;;;;;;;;;;;;;;Line 9;|> await #;54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;239;"const kimchi = ""cabbage"" |> wash |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Too much happening in one statement. breaking it up could help alleviate the mental load;;;;;;;;;The proposal;;takes getting use to, im typing \> a lot;
1500;May 31, 2019 3:35:47 pm;May 31, 2019 4:15:15 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559342147_5cf1ac431e0bf7.71804871;;;nested vs flattened;3-5 years;Intermediate;Java;;309;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 1 better;;;;;;Line 10;), 14;157;;;;;;;Line 6;saltCabbageJar should be saltyCabbageJar;85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const preparedCabbageJar = new Jar(salt(cut(wash(""cabbage"")))) const withSpicyPaste = (jar) => stir(add(""spicy paste"", jar)) const kimchiJar = await ferment(withSpicyPaste(preparedCabbageJar), 2) const kimchi = kimchiJar.takeOne()";;;;;;;;;;its difficult to see how the brackets pair up and which pair of brackets the commas refer to.;;"there are names for bits of state that are just stepping stones to the actual bit of state you are interested in. The developer would have to waste time coming up with descriptive names for unimportant values.  There is also more syntax noise, the ""important"" information is the function names but they are not lined up easy for the eye to read. The easiest thing to read is the list of consts but their meaning is almost assumable by the reader";it reads like a recipe so is easy to follow;The intention of the code would be clearer if Jar had a map method that accepted the mutating function. That would allow a chaining syntax that avoids all the intermediate variables, but preserves the recipe like reading experience of pattern 2;;;;;;
1501;May 31, 2019 3:45:04 pm;May 31, 2019 4:03:36 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559342703_5cf1ae6fe4fb60.56708723;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;96;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 11;, 14;158;;;;;;;Line 6;saltyCabageJar;196;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;73;;;;;;;;;;;Reading from inside (finding inside) instead of left to right. Understanding which parameters belong to which function invocation, especially when there is more than one, but the previous had been composed out of other invocations.;Having it concise in a flow ;Having so many variables that are only used once. ;The process is directly visible from top to  bottom. Each step and its parameters are clear ;Pattern 1 in inverse order (left to right) with e.g. a pipe operator would be nice.;;;;;;
1503;May 31, 2019 4:07:39 pm;May 31, 2019 4:15:09 pm;Complete;;;English;;1559344059_5cf1b3bb5e17a7.48499352;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;113;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;Pass in 14 as the numdays parameter to ferment();99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing paren;48;;;;;;;;;;;;;;;;;;;;;25;;;;;;;;;;;;;;;;;;;;;
1504;May 31, 2019 4:12:19 pm;May 31, 2019 4:33:32 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559344339_5cf1b4d3355382.19914178;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;108;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;await ferment(saltCabbageJar, 14);127;;;;;;;Line 8;await ferment...;93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;412;const kimchi = 'cucumber'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir(#, 2)   |> await ferment(#)   |> #.takeOne();;;;;a bowl of jogurt with berries;inconsistent style;;Probably inconsistent style plus nesting pipe operator, for example using it in the arrow function when it could have been simpler just to call fillGlass(wine);;;;;;;;;Other - Write In (Required);I like the proposal, but operator # seems weird. Probably I just have to get used to it :);Not used to it;
1510;May 31, 2019 4:24:57 pm;May 31, 2019 4:47:05 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559345097_5cf1b7c92a3499.44323010;;;flattened vs proposal 1;0-2 years;Intermediate;TypeScript;;248;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";194;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));109;;;;;;;;;;;;;;;;;;;;;275;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(_, ""spicy paste"")) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;Too many and badly shaped if statements.;;;;;;;;;;;;;The proposal;;Didn't had any trouble.;After writing some code on my own I changed my mind about this proposal and it's usefulness. Seems like a good idea!
1513;May 31, 2019 4:33:47 pm;May 31, 2019 5:12:12 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559345627_5cf1b9db750c75.18018553;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;176;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;add numdays;200;;;;;;;;;;;;;;;;Line 9;await #;242;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;443;"const pickle = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;a bit akward;"I prefer to see explicitly the argument passed to simple function const pickle = ""cucumber"" |> wash(#)  And have a shorthand version like you showed const pickle = ""cucumber"" |> wash  It is easier for me to see the pound sign and say ""this is the result of the previous line, and it is put here"". Maybe with more practice and exposure to this syntax, it will become easier to understand that not pound sign = the function only have one argument and the previous line feed it. It is more elegant, but harder to decode at first.  It is kind of the same thing with fat arrow  (normalWay) => { return ""value"" }  shortWay => { return ""value"" }  evenShorterWay => ""value"" // shorter and more elegant, but at first hard to decode as : return ""value"".  Overall this is a nice proposal, very useful !"
1514;May 31, 2019 4:36:09 pm;May 31, 2019 4:37:16 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559345769_5cf1ba69be6773.40571888;;;nested vs flattened;5-10 years;;JavaScript;;19;;;;;;;;;;;;;;;;;;;;;6;;;;;;;;;3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1515;May 31, 2019 4:37:37 pm;May 31, 2019 4:59:02 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559345857_5cf1bac149c062.19679488;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;202;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 5;spellling;233;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) to end;32;;;;;;;;;;;;;;;;;;;;;195;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> ((a) => new Jar(a))   |> ((a) => add(""spicy paste"", a))   |> ((a) => stir(a, 2))   |> ((a) => await ferment(a))   |> ((a) => a.takeOne();";a bowl of jogurt with berries;identifiers;;The syntax inconsistencies on lines 13 and 14 were annoying. Also, and two else ifs would have been much easier to understand. Also, having await on its own line was slightly confusing at first, but if it was a standard pattern it would make sense.;;;;;;;;;;;;;The Status quo;;Not great, but with syntax highlighting and auto indenting it might be easier.;"The underscores make things a bit more confusing because you have to remember what it's referencing (which can get confusing after a few lines). If you use actual identifiers it doesn't seem that much different than the status quo. You could do the same thing with let.  let _ = wash(""pickle"") _ = new Jar(_); _ = add([""water""], _); _ = salt(_); ..."
1516;May 31, 2019 4:39:17 pm;May 31, 2019 4:52:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559345957_5cf1bb251ed615.36134965;;;nested vs proposal 1;3-5 years;Intermediate;Python;;95;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;276;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));23;;;;;;;;;;;;;;;;;;;;;171;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> str   |> (_ => ferment(_, 14))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;fillBowl is not defined;;;;;78;;;;;;;;The proposal;;I'd prefer something like >>, but this is probably cleaner.;Nope. This looks good to me.
1517;May 31, 2019 4:40:15 pm;May 31, 2019 4:50:58 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559346015_5cf1bb5f4c1a66.07234199;;;nested vs flattened;more than 10 years;Intermediate;Python;;105;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Sometimes;I like Pattern 2 better;;;;;;Line 11;, 14;116;;;;;;;Line 5;replace saltyCabbageJar with saltCabbageJar;61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Not very readable (a lot of  parentheses make it hard to spot which argument is passed to which function);Its shorter.;It is longer and has more moving parts --- variables.;Its easier to see what arguments are passed to each function.;;;;;;;
1518;May 31, 2019 4:41:24 pm;May 31, 2019 5:03:57 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559346084_5cf1bba4894b54.80847173;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;143;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 14);";237;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));108;;;;;;;;;;;;;;;;;;;;;235;"const kimchiKar = ""cabbage""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> await   |> (_ => ferment(_, 2));";a bowl of jogurt with berries;inconsistent style;;I first read the fetch request to identify the JSON object, then with the constants declared before I checked all of the conditionals statements and finally calculated mentally the result of the elseif.;;;;;;;;;;;;;Other - Write In (Required);both are good options;fine solution, not that hard to read and understand;
1525;May 31, 2019 6:13:31 pm;May 31, 2019 6:30:07 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559351611_5cf1d13b491f93.76536138;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;106;'number';"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";96;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));49;;;;;;;;;;;;;;;;;;;;;235;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> takeOne;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;The proposal;;no problem;similar to other new features, seems odd at first but likely would become second nature over time.
1530;May 31, 2019 6:33:13 pm;May 31, 2019 7:03:38 pm;Complete;;;English;;1559352793_5cf1d5d960a844.06527408;;;flattened vs proposal 1;3-5 years;Intermediate;TypeScript;;7;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;fix typo/spelling;246;;;;;;;;;;;;;;;;;;;;;;Line 5;add a ) at the end;477;;;;;;;;;;;;;;;;;;;;;381;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;"Left to right ;-)  Operator density and lack of whitespace or line-breaks slowed me down.  Descriptive names helped a great deal. The proposal was transparent throughout. ";;;;;;;;;;;;;The proposal;;Annoying to type these contiguously. I fumble a bit with my pinky reaching these.;Shorthand syntax  (_ => fn(_))  could just be  fn(_)  Cheers 
1534;May 31, 2019 6:50:27 pm;May 31, 2019 7:15:56 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559353826_5cf1d9e2d9f733.91213654;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;130;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Should reference saltyCabbageJar, not saltCabbageJar;201;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_) );120;;;;;;;;;;;;;;;;;;;;;357;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;The |> operator is similar visually to the arrow function => operator, I caught myself backtracking as I switched back and forth between nested pipeline and arrow function operators;;;;;;;;;;;;;The proposal;;I like the operator, easy to type;I'm not crazy about the underscore character filing the role of the argument carried over from the previous pipe operation, I don't have any alternatives in mind, it's also a bit overloaded after using underscore/lodash utility functions over the years
1535;May 31, 2019 6:51:23 pm;May 31, 2019 7:07:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559353883_5cf1da1bba9670.73379693;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;128;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;0,2;96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add a "")"" to the end of the line";77;;;;;;;;;;;;;;;;;;;;;96;No;a bowl of jogurt with berries;too many if statements;;Reading the param for cors ... reading all the conditions in the IF blocks;;;;;;;;;;;;;The proposal;;I'm on an iPhone so I did not type code. But imagining to type those two characters... seems obnoxious.;
1541;May 31, 2019 8:19:52 pm;May 31, 2019 9:14:28 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559359192_5cf1eed888b685.90847586;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;101;Number;"""string""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;Pass the second parameter, number of days;969;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing );160;;;;;;;;;;;;;;;;;;;;;1321;"function wash(ingredient) {     return ingredient; }  function cut(ingredient) {     return ingredient; }  function Jar(inputIngredient) {     this.mainIngredient = inputIngredient;     this.ingredientList = [inputIngredient];     this.quantity = 1;      this.add = function(ingredient) {         this.ingredientList.push(ingredient);                  return this;     };      this.stir = function() {         return this;     }      this.takeOne = function() {         if (this.quantity === 0) {             return `No more ${this.mainIngredient}`;         }          this.quantity -= 1;         return this.mainIngredient;     }; }  const washResult = wash('cabbage'); const cutResult = cut(washResult);  const jar = new Jar(cutResult); jar.add('salt'); jar.add('spicy paste'); jar.stir();  function ferment(jar, numdays) {     setTimeout(() => {         console.log(`Fermenting for ${numdays} days`);     }, numdays);      return jar; }  const kimchiJar = await ferment(jar, 2); const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;nested pipelines;;The pipelines mainly. Stuck together like this can make it difficult to read, especially in long execution chains.;;;;;;;;;;;;;The proposal;;At first, it looked like a cleaner solution to a big one line statement, but it might be difficult to less experienced programmers, especially if the logic is too big.;Neither one or the other approach is fantastic. Usually when somebody writes code like this, it should not pass a code review, because it's unreadable and difficult to track for more less experienced programmers.  Everything should be separated and be simpler to manage, extend and write.
1545;May 31, 2019 8:49:34 pm;May 31, 2019 9:11:48 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559360974_5cf1f5ce398970.08440896;;;flattened vs proposal 2;more than 10 years;Beginner;Java;;159;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar;205;;;;;;;;;249;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;316;"const kimchiJar = wash(""cabbage"")   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;;;The proposal;;unfamiliar;
1546;May 31, 2019 9:08:39 pm;May 31, 2019 9:44:53 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559362119_5cf1fa47554947.22012297;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;98;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";227;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));61;;;;;;;;;;;;;;;;;;;;;325;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;Nice point is that reading the code is quite linear: execution is done in the order the code is written.  Point points: - the 5 lines fetch is a bit unusual. Not sure about the added value of the syntax here since the conventional ones already work well - Not naming parameter on line 10 ends up with getting that _ variable quite far from declaration, making next lines harder to read . It also forces to name the param on line 15 witch forced me to check that nothing fancy was going on. - the condition on line 13 is horribly long for what it does.;;;;;;;;;;;;;The proposal;;Fine It's actually easier than => on a querty keyboard since both sign use the same modifier key.;
1550;May 31, 2019 9:38:18 pm;May 31, 2019 9:51:49 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559363898_5cf2013a927ee9.47430121;;;nested vs both;5-10 years;Advanced;TypeScript;;189;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;;64;;;;;;;;;;;;;;;;Line 10;;111;;;;;;;;;;;;;Line 5;;22;;;;;;;;;;;;;;;;;;;;;269;"const kimchi = ""cabbage"" |> wash |> cut |> new Jar(#) |> add('spicy paste', #)  |> stir  |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not too bad. Definitely better and more readable than current.;
1553;May 31, 2019 11:18:08 pm;May 31, 2019 11:49:03 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559369888_5cf218a09c41b0.99745981;;;flattened vs both;5-10 years;Intermediate;JavaScript;;183;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 5;"const saltyCabbageJar = salt(add(""water"", cabbageJar))";462;;;;;;;Line 9;await #;241;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));126;;;;;;;;;;;;;;;;;;;;;333;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Acceptable. | is making sense and |> feels more like JavaScript;
1555;May 31, 2019 11:35:26 pm;Jun 1, 2019 12:00:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559370926_5cf21cae4d9a47.79777818;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;117;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;, 14;132;;;;;;;;;;;;;;;;Line 9;|> await #;100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;419;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await # ;  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;;
1557;May 31, 2019 11:17:46 pm;Jun 1, 2019 12:15:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559369866_5cf2188a6be855.39229878;;;nested vs flattened;more than 10 years;Expert;Other - Write In (Required);PHP;143;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Never;Almost never;I like Pattern 2 better;;;;;;Line 11;", 14);";143;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;const preparedJar = stir(add('spicy paste', new Jar(salt(cut(wash('cabbage')))))) const kimchiJar = await ferment(preparedJar, 2)  const kimchi = kimchiJar.takeOne();;;;;;;;;;Deeply nested functions are difficult to read when they take multiple parameters - in the example, it's difficult to see which function the 2 is a argument for. (Not helped by a syntax error - you have 5 opening brackets but 6 closing brackets.);Less verbose.;Verbose with similarly name constants;It's clear which values are arguments to which functions - the 2 is now obviously an argument to the ferment function.;There's an extra closing bracket in your shorter example - you have 5 opening brackets but 6 closing brackets.;;;;;;
1559;Jun 1, 2019 12:15:50 am;Jun 1, 2019 12:47:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559373350_5cf22626445ca4.43022035;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;123;Int;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Fix typo. salt -> salty;204;;;;;;;;;;;;;;;;;;;;;;Line 5;Add paranthesis;41;;;;;;;;;;;;;;;;;;;;;253;;a bowl of jogurt with berries;whitespace formating;;The use of await looks weird. Else if return statement has an unnecessary breaking, I missed the fill function, checked twice for the question. I am not sure about the underscore, I think naming is better than abstract symbols, I didn't like the (_ => add(a, b)), this looks overly abstract I couldn't even remember it fully, I have to check again. If statement are too long, and/or can be easily missed, I read the statements from left to right, operators mixed up because they're all symbols and in one line. ;;;;;;;;;;;;;The Status quo;;Symbols are too abstract. I have get used to it. But I like writing arrow functions, maybe getting used to something isn't bad. But it definitely highers the learning curve and not everybody has the patience for that. Naming is better, I think. ;Keep up the good work. Improvement is always better. I think rather than looking to command line syntax, you should focus on literature and linguistics, what words or symbols are goal specific and clear to people etc. 
1560;Jun 1, 2019 12:22:22 am;Jun 1, 2019 12:57:38 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559373742_5cf227ae40d237.66971188;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;22;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;Pass fermentation days count to ferment function as second parameter;102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add closing bracket;1221;;;;;;;;;;;;;;;;;;;;;176;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;bad indentation style of nested pipelines;;;;;6;;;;;;;;The proposal;;It's easy;I do not sure that using 'await' operator on next step in pipeline is a good idea. Why? Won't be better to use it in the same line as promisified function call (even if we must wrap this code in additional function)
1561;Jun 1, 2019 12:26:18 am;Jun 1, 2019 1:03:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559373978_5cf2289a1e6795.11469650;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;176;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;225;;;;;;;;;;;;;;;;;;;;;;Line 5;"add a "")"" to the end of the line";95;;;;;;;;;;;;;;;;;;;;;287;"const kimchi =   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;"I didn't find this example very hard to understand. I probably spent most time searching for the definition of the function ""fillBowl"". I'm used to autoformatted code, so the inconsistent whitespace formatting also made it more difficult to read.";;;;;;;;;;;;;The proposal;;Typing it on an english international keyboard is nice as I can press two keys while holding shift consistently.;I find the look of the new syntax strange. I understand why it looks this way in the context of bash scripting but it feels quite alien to JavaScript. But I also can't think of a better solution.
1563;Jun 1, 2019 12:33:40 am;Jun 1, 2019 12:42:45 am;Complete;;;English;;1559374420_5cf22a54715fb4.00384311;;;flattened vs both;more than 10 years;Advanced;TypeScript;;82;function;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;saltyCabbageJar;95;;;;;;;Line 10;wrap it in a function;70;;;;;;;;;;;;;Line 5;);51;;;;;;;;;;;;;;;;;;;;;67;;;;;;;;;;;;;;;;Pipeline with #;;;;;
1567;Jun 1, 2019 12:58:24 am;Jun 1, 2019 1:14:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559375904_5cf230205123c2.70225785;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;108;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;129;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));58;;;;;;;;;;;;;;;;;;;;;275;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => await ferment(_, 2)) |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;Checking the values;;;;;;;;;;;;;The proposal;;Intuitive;Please bring this in JS.. :)
1572;Jun 1, 2019 1:14:09 am;Jun 1, 2019 1:41:53 am;Complete;;;English;;1559376849_5cf233d1c39a82.15859003;;;nested vs proposal 1;0-2 years;Advanced;JavaScript;;181;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;add a comma, followed by the number of days;116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the parentheses at the end of the line;79;;;;;;;;;;;;;;;;;;;;;339;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(2, _) |> await |> (_ => _.takeOne();";a bowl of jogurt with berries;nested pipelines;;"I took a bit to figure out that the nested pipelines were essentially passing their results to ""fillBowl"" and ""fillPlate"" functions.  The complicated conditionals also added a bit of cognitive overhead. ";;;;;;;;;;;;;Other - Write In (Required);I prefer the proposal to the status quo, but I feel they are both inferior to simply breaking the expressions down into clusters of two or three functions. ;It takes a bit of getting used to initially, but it's really simple once you get used to it.;I think this is a really good idea and I realize a lot of though and effort has gone into this proposal. While, I feel the best solution to this problem is to not write code like this in the first place, I realize that that isn't in your hands. So thank you so much for bringing up an alternative that is really an improvement over things as they are.
1576;Jun 1, 2019 1:27:09 am;Jun 1, 2019 2:01:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559377629_5cf236dd728c82.72819832;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;153;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;", 2);";206;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));111;;;;;;;;;;;;;;;;;;;;;257;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;- newline between 14 and 15 - wtf, why it the jogurt the arg to the fun in 15 and not the bowl?;;;;;;;;;;;;;The Status quo;;Not so nice, but I'd get used to it.;In my opinion long pipelines reduce the readability of code in general and people struggle also for example when reading Java streams pipelines.  So I tend to break such processes down into multiple functions, even with such language features in place.
1578;Jun 1, 2019 1:31:19 am;Jun 1, 2019 1:46:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559377879_5cf237d7331b07.40444141;;;nested vs proposal 1;3-5 years;Intermediate;Other - Write In (Required);PHP;89;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 2;;121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add cloing parenthese );91;;;;;;;;;;;;;;;;;;;;;129;;null;too many if statements;;If statements;;;;;;;;;;;;;The proposal;;I enjoy it !;Thank you
1579;Jun 1, 2019 1:34:38 am;Jun 1, 2019 2:14:03 am;Complete;;;English;https://hacks.mozilla.org/;1559378078_5cf2389ecfb4f7.48397813;;;nested vs proposal 2;5-10 years;Expert;TypeScript;;85;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;You forgot to add the number of days to the ferment() function. (Also: you forgot to document the wash() function);323;;;;;;;;;;;;;;;;;Can't find the bug. You still didn't document the wash() function - or perhaps that shouldn't be part of the recipe?;340;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;162;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne();";;;;;a bowl of jogurt with berries;nested pipelines;;"1. I scanned the whole code quickly, noting that there are lots of operators. 2. The initial constants were the easiest thing to start with, so I did just that, and internalized that ""now is breakfast, nothing else"". 3. I didn't know the precedence of ?: vs. |>, so I tried to reason about what would make most sense, looking at the given code. The given code seems to suggest that you can use ?: inside of a |>, i.e. ?: is ""stickier"" than |>. 4. The repeated conditions on line 8 made me read it multiple times. Are the conditions really the same, or only similar? 5. It sure seemed like nested pipelines, but I had to reason a bit before feeling confident that that was actually what's going on. 6. The amount of parentheses, partially repeated conditional, small font size, misspelled ""jogurt"" made the code a little annoying to read, but not too bad. ""In real life"", I would've used Prettier, so that I'm sure that the indentation matched the logic. 7. Also, is there an erroneous parenthesis on line 13? That had me a little confused, but I didn't focus on that too much, since it seemed unlikely to be relevant to the task at hand.";;;;;;;;;The proposal;;On my Swedish keyboard both | and > are on the same key (altr gr, then shift), so that's fine. I think I could get used to it, even though it felt a little weird.;I think |> works really well when you're doing simple operations at each step. Without having used the syntax, I *think* I'd strongly discourage any logic within a step. (The example code that included the ternary operator ?: and fat arrow functions is something I'd like to avoid.)
1580;Jun 1, 2019 1:41:17 am;Jun 1, 2019 2:20:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559378477_5cf23a2d52b6c5.62976634;;;nested vs both;0-2 years;Intermediate;JavaScript;;147;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;after the 10th line i would add they days number as a second parameter to ferment function;211;;;;;;;;;;;;;;;;Line 9;change it to await #;169;;;;;;;;;;;;;Line 5;add missing );26;;;;;;;;;;;;;;;;;;;;;389;"const pickle = ""cabbage"" |> wash |> cut |> salt |> Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Different for sure. It looks better in code, more readable and shortens the amouth of code required to write the same think in the actual form.;It would be nice to test in real enviroment next time when taking a survey.
1581;Jun 1, 2019 1:42:18 am;Jun 1, 2019 1:57:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559378538_5cf23a6a005b53.40098671;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;36;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;fix typo;79;;;;;;;;;;;;;;;;;;;;;;Line 5;);41;;;;;;;;;;;;;;;;;;;;;232;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;The operator shown inline gave some uncertainty;;;;;;;;;;;;;The proposal;;A little awkward but end result is nice;Wasn't convinced at the beginning but overall appealing.
1583;Jun 1, 2019 1:47:01 am;Jun 1, 2019 2:08:21 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559378821_5cf23b857ac564.48615933;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;170;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Varies codebase to codebase. I see this a lot when my functions are smaller and simpler.;;;I like the status quo better;Line 11;"), 14);";143;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));61;;;;;;;;;;;;;;;;;;;;;197;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _)  |> stir  |> await  |> (_ => ferment(_, 2));  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;nested pipelines;;"I think the use of the operator is unwarranted on lines 12 and 14.  Also change in convention of using _ for pipeline result to ""jogurt"" on line 15 adds some cognitive load.";;;;;;;;;;;;;The proposal;;It's okay, no problems. To be honest, it's harder to keep track of matching parens without an editor assisting you.;I find the lines with (_ => ..) ugly.   I think a convention that _ is the first/last argument + currying would be useful.  Users will in real life do   |> curry(ferment)(2)  But if you can introduce special syntax for it, that'd be great too, like  |+ ferment(2)
1584;Jun 1, 2019 1:50:07 am;Jun 1, 2019 2:12:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559379007_5cf23c3f3be317.05350079;;;nested vs both;3-5 years;Advanced;TypeScript;;182;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;, 14;249;;;;;;;;;;;;;;;;Line 9;#;161;;;;;;;;;;;;;Line 5;);57;;;;;;;;;;;;;;;;;;;;;409;"const pickle = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> fermet(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Other - Write In (Required);status quo, and if it must be then pipeline with #;;;strange;
1587;Jun 1, 2019 2:05:24 am;Jun 1, 2019 2:21:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559379924_5cf23fd4884413.27008573;;;nested vs flattened;5-10 years;Advanced;JavaScript;;103;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 11;"add "", 14""";161;;;;;;;Line 6;Add y to var name: saltyCabbarJar;80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); const saltyCabbage = salt(cutCabbage); const cabbageJar = new Jar(saltyCabbage); const spicedCabbageJar = add(""spicy paste"", cabbageJar); const stirredCabbageJar = stir(spicedCabbageJar); const kimchiJar = await ferment(stirredCabbageJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;Reading from most-nested part to least-nested part. It's less natural to read this way. It's harder to follow the flow and especially harder when it's on multiple lines where you need to understand which closing parenthesis belongs to which function.;Less lines to go through. Less variables. Shorter variable names, because you don't need to describe an entire state in a variable name.;"More lines of code to follow. Might seem like a ""wall of text"" instead of a one-lines. Longer variable names.";Very natural reading, like a story. Order of lines is the order in which things actually happen. The await statement also makes more sense and works better with this pattern.;Good survey, I'm interested on knowing the results of this research. Good luck!;;;;;;
1593;Jun 1, 2019 2:52:22 am;Jun 1, 2019 3:03:54 am;Complete;;;English;https://qsurvey.mozilla.com/;1559382741_5cf24ad5f25ae6.48232938;;;flattened vs both;more than 10 years;Expert;JavaScript;;66;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 5;remove the y from the line;106;;;;;;;Line 10;_ => _.takeOne();95;;;;;;;;;;;;;Line 5;_ => new Jar(_);49;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#) |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;OK;
1597;Jun 1, 2019 3:04:09 am;Jun 1, 2019 3:20:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559383449_5cf24d99793dc1.65168601;;;flattened vs both;3-5 years;Intermediate;Other - Write In (Required);PHP;163;"""function""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 1;Define a wash function;304;;;;;;;Line 1;Define a wash function;97;;;;;;;;;;;;;Line 5;Add a closing paren;59;;;;;;;;;;;;;;;;;;;;;249;"const kimchi  = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Not really more or less intrusive than other keywords or syntax constructs.;
1602;Jun 1, 2019 3:32:27 am;Jun 1, 2019 4:05:48 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559385147_5cf2543b2586a3.90361329;;;nested vs both;5-10 years;Advanced;JavaScript;;100;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;Line 10;Add a number for the number of days to ferment the sauerkraut;155;;;;;;;;;;;;;;;;Line 9;await is missing the # so I would add it;285;;;;;;;;;;;;;Line 5;Add the ) at the end of the line;70;;;;;;;;;;;;;;;;;;;;;425;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A bit awkward at first but I got used to it quickly. ;"The biggest change is the ""inversion of execution"", which is very weird at first but then it becomes more natural to see the innermost things first. The (_ => ) distracts from the actual code and the # placeholder did not. I would prefer to write code with that style over the status quo sometimes."
1609;Jun 1, 2019 4:07:22 am;Jun 1, 2019 4:33:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559387242_5cf25c6a64ead5.98099165;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;165;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;replacing saltCabbageJar with saltyCabbageJar;221;;;;;;;Line 10;Jar.prototype.takeOne.apply(#));338;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;266;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;The ternary operator check variable;;;;;;;;;The proposal;;It was nice :);go go
1614;Jun 1, 2019 4:43:11 am;Jun 1, 2019 5:03:26 am;Complete;;;English;;1559389391_5cf264cf76d968.86755608;;;nested vs both;0-2 years;Intermediate;JavaScript;;77;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;, 14;109;;;;;;;;;;;;;;;;Line 2;remove line 2 or define wash;281;;;;;;;;;;;;;Line 5;add ) to end of line;100;;;;;;;;;;;;;;;;;;;;;366;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not bad. A little difficult on a phone keyboard. I'd like to try it more on my work keyboard and it wouldn't be too difficult to get a nice keyboard layout to make that easier to type.;
1616;Jun 1, 2019 5:04:52 am;Jun 1, 2019 5:21:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559390692_5cf269e48ce4e0.62418068;;;nested vs both;3-5 years;Advanced;JavaScript;;105;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 1;By adding the numday of ferment;121;;;;;;;;;;;;;;;;Line 10;takeOne;113;;;;;;;;;;;;;Line 5;Add a );29;;;;;;;;;;;;;;;;;;;;;274;"const kimchi = ""cabbage""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;These characters are next to each other on my keyboard.;Why choose |> over | only?
1633;Jun 1, 2019 5:30:17 am;Jun 1, 2019 5:54:01 am;Complete;;;English;;1559392217_5cf26fd9dc1a33.12184987;;;flattened vs proposal 1;5-10 years;Expert;TypeScript;;209;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 4;"const cabbageJar = Jar(crushedCabbage);";204;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));67;;;;;;;;;;;;;;;;;;;;;217;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;;;;;;279;;;;;;;;The proposal;;I missed the keyboard few times.;Proposal must play well with autocurried functions. Is there such proposal?
1635;Jun 1, 2019 5:43:46 am;Jun 1, 2019 6:08:29 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559393026_5cf2730253d007.98665972;;;flattened vs both;more than 10 years;Advanced;JavaScript;;166;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;258;;;;;;;Line 8;you need to await before you can use ferment;294;;;;;;;;;;;;;Line 5;add a ) to the end;23;;;;;;;;;;;;;;;;;;;;;227;"const kimchiJar = wash(""cabbage"") |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> await |> (_ => ferment(_, 2)) |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline with #;;;;It is a little slow to type but not hard to find the keys with my fingers;Seems like a good opt-in for this style of programming. I like how it can handle async via await, which I do not think normal compose() functions can do quite as readily.
1637;Jun 1, 2019 5:43:00 am;Jun 1, 2019 8:19:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559392980_5cf272d4880286.70648651;;;flattened vs both;5-10 years;Intermediate;Python;;90;number;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;433;;;;;;;Line 9;add # to await;7721;;;;;;;;;;;;;Line 5;Add );97;;;;;;;;;;;;;;;;;;;;;426;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt    |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Fine, but I have experience using the pipe operator in the Hack language. https://docs.hhvm.com/hack/expressions-and-operators/pipe;"To prevent the ""await"" bug, I might have a style guideline (or lint/Prettier) that prefers ""|> await expr(#)"" over  ""|> expr |> await #"".  contact info: epsilonmichael@gmail.com I'm also at JSConfEU :)"
1641;Jun 1, 2019 5:51:32 am;Jun 1, 2019 6:07:45 am;Complete;;;English;;1559393492_5cf274d4a9fa80.22805249;;;flattened vs proposal 2;more than 10 years;Advanced;TypeScript;;24;"""number""";"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";144;;;;;;;Line 8;|> await ferment(#, 14);83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;160;"const kimchi= ""cabbage"" |> cut(#) |> salt(#) |> new Jar(#) |> add('spicy paste', #) |> stir(#) |> await ferment(#, 2) |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;the mix of ternery operators and the pipe operator;;;;;;;;;The Status quo;;the typing was easy;I would prefer the status quo, and in the cases shown would prefer something like a builder pattern/fluent API instead of the pipe operator. For chaining functions of unknown origin the pipe operator makes definitely sense. 
1647;Jun 1, 2019 6:18:42 am;Jun 1, 2019 6:52:41 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559395122_5cf27b322b9142.78199100;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;71;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;304;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));260;;;;;;;;;;;;;;;;;;;;;591;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await |> _.takeOne()";a bowl of jogurt with berries;nested pipelines;;When pipes where used where the normal structure would have been easier to read . That was the case when yogurt was returned and berries were added.;;;;;;;;;;;;;The proposal;;Kinda hard to get accustomed to it - at least when using the German keyboard layout;Thanks for doing this survey and interacting with interested developers!
1660;Jun 1, 2019 7:42:28 am;Jun 1, 2019 8:11:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559400147_5cf28ed3dd7c05.03213179;;;nested vs proposal 2;5-10 years;Advanced;TypeScript;;13;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;pass ferment a numdays;122;;;;;;;;;;;;;;;;Line 5;i don't know how the hash works?!;224;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;588;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicey paste', #)   |> stir   |> ferment(#, 2)   |> await;;;;;a bowl of jogurt with berries;inconsistent style;;mixed styles took time to parse the code, once I understand where the if statements started and finished it was nice to read.;;;;;;;;;The proposal;;easy, i love it, far easier than calling functions in arguments.;love it, please make it happen.
1662;Jun 1, 2019 8:09:19 am;Jun 1, 2019 8:54:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559401759_5cf2951f246040.43394766;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;171;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"Add a ""y"" to the ""saltCabbageJar"", so the variable name matches the one from line 5";215;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add a closing bracket "")"" to the end of line 5";81;;;;;;;;;;;;;;;;;;;;;246;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;"I started reading the first 3 variables (isBreakfast, ...) 3 times to make sure I remember them and their values.  The fetch(), await, json(), await was pretty clear and easy to read. Maybe because I'm used to how these functions work.  The big if-block seemed scary at first. But after noticing the pattern there (_.x && _.x.ready && isXXX) it was okay to read.  The pickles return statement irritated me for a second because the pipeline operator was in the same line as the variable.  The jogurt return statement irritated me again because it has one pipeline operator in the same line (this is consistent with the pickles return statement, so it was fine), and another one on the next line. This came really unexpected.  Another reason the second pipeline operator of the jogurt return statement irritated me was because it's indented on the same level as the ""return"" word in the previous line. This made it look like another statement to me, which would never run because of the ""return"" before. Only after reading the previous line again, it made sense. I would expect a continuation of the statement to be indented slightly more.";;;;;;;;;;;;;The proposal;;It seemed fine to me on an English, Windows qwerty keyboard.  It felt a bit easier on an English, Mac qwerty keyboard.  And it felt a bit harder on a German, Windows, qwertz keyboard. But given that special chars are generally harder to access on this keyboard layout, I think it was fine.;
1664;Jun 1, 2019 8:19:59 am;Jun 1, 2019 8:32:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559402399_5cf2979f4b21e3.70556982;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;80;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 10;),2;59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a ) at the end;78;;;;;;;;;;;;;;;;;;;;;82;not really possible on mobile device ð;a bowl of jogurt with berries;nested pipelines;;Nested pipelines with blocks and multiple if Statements;;;;;;;;;;;;;The proposal;;"It feels weird compared to bash and it looks strange. I would personally prefer something more arrowish as it visualizes what's happening, something like -> or even --> But this would make the name ""pipeline operator"" pointless.";Thank you for all your efforts!
1667;Jun 1, 2019 8:38:37 am;Jun 1, 2019 8:50:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559403517_5cf29bfdd50449.16185729;;;nested vs flattened;3-5 years;Advanced;JavaScript;;47;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 1 better;;;;;;Line 10;change it to ), 14;49;;;;;;;Line 6;change line 5 to saltCabbageJar instead of saltyCabbageJar;47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Seems fine to me.;;;;;;;;;;I find it challenging to determine what the order is if there is more than 1 argument in the function (aka what function the ,2 applies to in this case).;I find it much easier to read and understand the functions are expecting to receive as parameters, and I don't have to deal with names that are thrown away or pointless.;There's a bunch of names that aren't actually important to the task of getting a pickle from a pickleJar (which leads to confusion if they aren't used sequentially, or if they're used more than once). It also makes it more difficult to tell the sequence of steps, since you have to pay attention to which name is being used to make sure they're not going out of order or anything.;I think it works well in the case of if you need to access intermediate states of getting the pickle jar ready.;;;;;;;
1668;Jun 1, 2019 8:24:15 am;Jun 1, 2019 9:02:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559402655_5cf2989fcbc442.96290623;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;332;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar;216;;;;;;;Line 9;await what?;239;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;114;;;;;;;too many if statements;;too many nested ternary operators + nested pipelines too much going on in dense area;;;;;;;;;The proposal;;ok;no
1672;Jun 1, 2019 9:03:44 am;Jun 1, 2019 9:25:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559405024_5cf2a1e082ed06.16697117;;;nested vs both;5-10 years;Advanced;JavaScript;;219;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;), 14;225;;;;;;;;;;;;;;;;Line 5;|> function(return new Jar(#));281;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));75;;;;;;;;;;;;;;;;;;;;;276;"const kimchi = ""cabbale"" |> cut |> salt |> new Jar(#) |> add(spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Felt normal;
1673;Jun 1, 2019 9:05:42 am;Jun 1, 2019 9:30:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559405142_5cf2a25658b807.20702978;;;nested vs both;more than 10 years;Advanced;JavaScript;;133;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 10;Add a second argument to `ferment(..)` indicating 14 days. Perhaps also define a `week(num_weeks)` helper?;166;;;;;;;;;;;;;;;;Line 10;I'm assuming you can't invoke methods on `#` directly, so you'd need to pass it as an argument to a new method? Not sure about this one TBH.;152;;;;;;;;;;;;;Line 5;The parenthesis are unmatched on line 5. You can wrap the whole statement in parenthesis by closing with a `)` at the end of the line, or just close the argumernts with a `)`. Either would produce valid code.;92;;;;;;;;;;;;;;;;;;;;;217;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_) => new Jar(_)  |> (_) => add(""spicy paste"", _)  |> stir  |> (_) => ferment(_, 2)  |> await  |> (_) => _.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It's a little awkward on the MBP keyboard, but I could get used to writing `|>`.;"Coming from Ruby, I'm a little uncomfortable with introducing ""magic"" syntax where symbols have special meaning like a `#`, however having now written some code with the `|>` I can see how avoiding writing the `(_) => something(..., _)` might be nice.  I'd be conservative with this syntax and perhaps start using `|>` without the `#` and get feedback, then add the `#` in a later spec if there's interest.  Based off my experience with `Observable`,  it seems like smaller, simpler and less controversial standards are the way to make progress with TC39 and other standard bodies. Therefore I'd leave the `#` for a later revision. You might also have more support once people use the `|>` on it's own and understand the ergonomics the `#` could provide."
1674;Jun 1, 2019 9:16:26 am;Jun 1, 2019 9:30:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559405786_5cf2a4da9f3702.24280349;;;flattened vs both;5-10 years;Expert;JavaScript;;63;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";134;;;;;;;Line 9;|> await #;45;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));26;;;;;;;;;;;;;;;;;;;;;111;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Kind of awkward at first. But then, it is just another operator, such as the arrow function syntax ( => ), therefore no problem involved. I'd kind of have liked to use just the pipe, as on the command line, but that operator is already taken, and I see the parallelism with the arrow syntax in choosing such form.;I do not think this operator will be readily used. Not since it is impractical, nor because it is redundant, but simply because of the over-abundance of browser versions in existance. We cannot even use the arrow function safely in the code, nor Promises, since many of our clients still use archaic versions of Internet Explorer (all the way to version 6), and have no interest in upgrading. I hope in the future this situation will be mitigated, but I'm afraid all these useful new syntaxes will be used very little (at least, without transpilers).
1675;Jun 1, 2019 9:20:01 am;Jun 1, 2019 9:51:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559406000_5cf2a5b0df18f3.25532763;;;nested vs proposal 2;3-5 years;Intermediate;JavaScript;;76;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;",2*7);";115;;;;;;;;;;;;;;;;Line 9;;156;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;251;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy taste"", #)   |> stir   |> ferment(#, 2)   |> await;  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;"Initially the use of # to refer to the pipeline variable when encountering line 8 being used multiple times, then following the definition of isBreakfast and isSnackTime since they did not utilise the pipeline variable. On encountering the nested pipeline on line 9-10 the newline and order added a cognitive overhead in formulating what occurs eg. add ""berries"" to a filledBowl of #.jogurt, making me read the code forward and then backward. Line 12 added the largest mental overhead as the statement filled a glass of wine, but the function is not provided a value resulting in a SyntaxError if #.wine.ready == true and !#.jogurt.ready or !(isBreakfast || isSnackTime).";;;;;;;;;The proposal;;Incovenient given key layout for the Norwegian keyboard as '|' is located above tab and '>' next to left shift and requiring the shift button to type. A single | or > is alright, but the sequence has the same disadvantage as typing the word minimum. Not good for touch typing.;
1678;Jun 1, 2019 9:26:58 am;Jun 1, 2019 5:30:00 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559406417_5cf2a751e7a5a4.73847458;;;nested vs both;more than 10 years;Advanced;JavaScript;;95;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;add a second arg to the ferment fn;265;;;;;;;;;;;;;;;;Line 9;"add # after ""await""";164;;;;;;;;;;;;;Line 5;missing close bracket at end of line;91;;;;;;;;;;;;;;;;;;;;;27032;"Const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (mush => new Jar(mush)) |> (mushJar => add(""spicy paste"", mushJar) |> stir |> (spicedMushJar => ferment(spicedMushJar, 2)) |> await  const kimchi = kimchiJar.take one();";;;;;;;;;;;;;;;Pipeline;;;;I was doing this on my phone, so not great, but also I'm sure, not really relevant.;"I don't like the hash syntax, as it introduces new syntax that can only be used in this one context.  I think it would be better to examine ways to denote functions with some arguments filled in separately from this pipeline proposal. E.g.  myFn.bindArguments({1: ""value""}) // binds 1th arg, returning a fn that takes only 0th arg  myConstructor.toFunction // removes need for ""new"" keyword"
1680;Jun 1, 2019 9:39:01 am;Jun 1, 2019 10:03:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?fbclid=IwAR0TTMdaFBt_Q-WgJ6BRpiVwfCEDzLG_lXmfmz2Qw68IxQavrYjSfDjycDE;1559407141_5cf2aa2512da53.52524946;;;flattened vs both;5-10 years;Advanced;Other - Write In (Required);PHP;414;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";368;;;;;;;Line 8;|> await ferment(#, 14);86;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));95;;;;;;;;;;;;;;;;;;;;;259;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Could be simpler.;
1687;Jun 1, 2019 10:34:59 am;Jun 1, 2019 11:13:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559410499_5cf2b7433d5760.90950151;;;nested vs proposal 1;more than 10 years;Intermediate;TypeScript;;224;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 6;implement wash() or remove the call;687;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 2;implement wash() or remove the call;112;;;;;;;;;;;;;;;;;;;;;409;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_)) |> (jar => add(jar, ""spicy paste"")) |> stir |> (j => ferment(j,2)) |> await;";a bowl of jogurt with berries;density of operators;;Lines 11-15 are dense and I felt the need to double-check input data a few times as I simulated them in my head.;;;;;;;;;;;;;The proposal;;"Fine, I'm used to it. Also they look really good with a ligature font like FiraCode ;)";My favorite language is F#, but my day job is in TypeScript. I miss having the pipeline operator every day. Please make it happen!
1688;Jun 1, 2019 10:46:19 am;Jun 1, 2019 11:01:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559411179_5cf2b9eb5c0be7.00260520;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;100;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;with adding of the missing parameter for method ferment;204;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"adding of the missing â)""";61;;;;;;;;;;;;;;;;;;;;;56;;a bowl of jogurt with berries;nested pipelines;;"It was easy to follow but the â|>"" doesn't improve the readability.   I think this syntax looks way more intuitive:  const value  = await blub() | pipe | pipe2;";;;;;;;;;;;;;The Status quo;;Annoying ;
1689;Jun 1, 2019 10:56:44 am;Jun 1, 2019 11:29:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559411804_5cf2bc5cb683b1.06811646;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;463;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 10;Pass the argument 14 (for 2 weeks) as the second argument to the ferment function.;120;;;;;;;;;;;;;;;;Line 9;;251;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;213;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;The pipeline operators were the easiest to process. The first 3 lines were no problem. The nested ternary operators were the most difficult part to read. I had no problem reading the hash and knowing what it referred to. In fact this was the first time I've ever looked carefully at code using the new pipeline operator in this format, and I really liked the hash because it allowed me to mentally track the key value I'm interested in, and doing transformations on - sort of like watching an object go down an assembly line.;;;;;;;;;The proposal;;Not bad! This was my first time writing code with the pipeline operator, and I adjusted to it by the end of the exericse.;"I've recently been writing a lot of scripts that do some complex parsing of string formats. This pipeline operator will be *extremely* useful for this. In fact, I've already adopted a pattern in my own code which approximates it:  const output = [input] .map(runStep1) .map(runStep2) .map(runStep3);  Obviously the pipeline operator is much cleaner, and allows me to do more complicated transformations in the .map() steps with less verbose code."
1690;Jun 1, 2019 11:04:39 am;Jun 1, 2019 11:28:04 am;Complete;;;English;https://qsurvey.mozilla.com/;1559412279_5cf2be37307113.51763108;;;flattened vs proposal 2;more than 10 years;Advanced;Haskell;;40;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";105;;;;;;;Line 8;|> await ferment(#, 14) // but also wash is not defined, and it's more accurate to say the error is on line 9 or 10? OR it could be that line 5 doesn't work because # doesn't apply to new properly?;200;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;208;"// btw I had totally forgotten that await # was a thing in my previous answer.  const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne() // what is this? I haven't used await in JS before.";;;;;a bowl of jogurt with berries;Other - Write In (Required);what is the reletive precedence of |> and ?:.;"The implicit conversion of (parenthesized?) expressions into functions was a bit of a surprise. It reminds me of Scala, and they also have some counter-intuitive behavior when writing underscores inside expressions with parensâalthough obviously the # must represent the same parameter each time (unlike in Scaca where repeat _s are new parameters).  Also the expression on the right half (i.e. after ||) of line 8 should presumably say (#.wine && #.wine.ready && isSnackTime)?  Oh. But surely that means the function must be returning a boolâ¦ no wait, *the ?: is also part of the |> function starting on line 8* (for a moment I thought we were threading the boolean into ? #.joghurt â¦ but that would be a syntax error).  So. Boolean is true. Oh. I was wrong earlier about what after the || should sayâI think I would actually write line 8 as:   |> (#.jogurt && #.jogurt.ready && (isBreakfast || isSnackTime))  Anyway! jogurt is truthy, ready is true, it's breakfast, so we thread {ready: true} into fillBowl, thread the bowl into add(""berries"", bowl), and return it?  Also I didn't actually bother reading it before deciding what I think the code does, but (({wine}) => wine) is pretty gross if you have this new syntax, I'd have preferred that said #.wine.";;;;;;;;;The proposal;;Fine!;If anything it's the # and deciding exactly what's bound to it (or rather the function that it introduces) that caught me out. But then PureScript and Scala have similar features and they're doing fine, and I wouldn't make very heavy use of |> without a nicer syntax to partially apply.
1693;Jun 1, 2019 11:39:52 am;Jun 1, 2019 12:17:27 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559414392_5cf2c678cc1e42.46640591;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;88;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;fix the typo in the variable name;174;;;;;;;;couldn't find the bug;250;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;256;"const cabbage = ""cabbage"" |> wash |> cut |> salt const jar = new Jar(cabbage) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2) const kimchi = jar.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;The main problem was nested ternary operators, as usual.  Fetching the data is too contrived: it's a one-liner in practice.  The pound sign didn't slow down, but did annoy slightly: it would feel easier if the data were saved in a variable.;;;;;;;;;The Status quo;;Unnatural;This proposal seemed enticing to me before, but this survey has changed my mind. This might be a more powerful spaghetti gun than the ternary operator, and I'm afraid people will use it.
1697;Jun 1, 2019 12:30:54 pm;Jun 1, 2019 12:50:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559417453_5cf2d26df24065.30951700;;;nested vs proposal 1;0-2 years;Advanced;JavaScript;;118;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;Ferment needs a numdays argument;147;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing parenthesis;24;;;;;;;;;;;;;;;;;;;;;258;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;identifiers;;When the conditionals were being evaluated, I had to check what the result would be by looking at multiple identifiers.;;;;;;;;;;;;;The proposal;;;The proposal is much easier to read than the traditional way. I definitely prefer it.
1699;Jun 1, 2019 12:45:54 pm;Jun 1, 2019 1:01:10 pm;Complete;;;English;https://tamtamy.reply.com/tamtamy/home.action;1559418354_5cf2d5f29ea112.68378904;;;nested vs both;5-10 years;Advanced;Java;;133;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;", 14);";130;;;;;;;;;;;;;;;;Line 9;|> await #;117;;;;;;;;;;;;;Line 9;|> (_ => _.takeOne()_);56;;;;;;;;;;;;;;;;;;;;;171;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;easy to understand when using placeholder;
1700;Jun 1, 2019 1:12:36 pm;Jun 1, 2019 1:58:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559419956_5cf2dc349c82a7.39945147;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;133;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Very rare, bc I usualy break this code in multiple statements. It's much better for readability store each individual step in a variable with a descritive name. Anyone can read this, a new programmer or some senior. To me, both scenarios are awfull. I don't get this trend to spend 15min thinking to write less code. I will spend more time writing a verbose code, but I waste alot o less of my time and from others reason about what the code does. Please, don't put this into the language! People are already overwelmed with ES.;;;I like the status quo better;Line 10;Between line 10 and 11, I would insert a new line containing `, 14`;271;;;;;;;;;;;;;;;;Line 9;|> await #;78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;256;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar(#) 	|> add(""spicy paste"", #) 	|> stir 	|> ferment(#, 2) 	|> await # 	|> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;As it's just one big statement, I have to create a mental model of it to understand. The pipeline proposal is just bring Promises to sync functions. It's not hard if you understand Promises, but people already struggle with them, thats why async/await exists.;;;;;;;;;The Status quo;;I don't write the pipe operator too much, so it was a bit weird.;As I said before, async/await comes to simplify the Pomises, which comes to simplify the callback hell. This proposal is just a fancy Promise. Why re-add the same complexity again? Just to make the hype boys happy and in the future create a simpler version of this?
1701;Jun 1, 2019 1:22:13 pm;Jun 1, 2019 2:39:21 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559420533_5cf2de75023259.86792492;;;flattened vs proposal 2;0-2 years;Intermediate;TypeScript;;167;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"Rename ""saltCabbageJar"" to ""saltyCabbageJar"", but, the function ""wash"" is undefined too, i suppose";382;;;;;;;Line 2;"I create ""wash"" function";302;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;257;"const kimchi = ""cabbage""                     |> cut                     |> salt                     |> new Jar(#)                     |> add(""spicy paste"", #)                     |> stir                     |> ferment(#, 2)                     |> await #                     |> #.takeOne();";;;;;a bowl of jogurt with berries;nested pipelines;;"Is hard to read the line 12. The other lines, is not difficulty but use ternary operator is quite messy with too many if statements. I think it should be more readable if i can keep the result of last ""|>"" operators and can finalize pipeline with something like a function ""end"":     |> await #.json()   |> ((#.jogurt && #.jogurt.ready && isBreakfast) || (#.jogurt && #.jogurt.ready && isSnackTime))   |> # ? ##.jogurt |> fillBowl |> add(""berries"", #) |> end(#) : ##   |>  (#.win && #.wine.ready && isDinner)   |> !# ? end(null) : ##   |> (({wine}) => wine |> fillGlass)();";389;;;;;;;;The proposal;;"Is very easy to write, the ""#"" is easy too.";"I think the idea of proposal is very good, if you only use with functions, without create object or await for a promise, it is very easy to read and you can avoid creating many intermediate variables that pollute the code but can save. I think if you can rename the ""#"" should be more readable, something like:  const pickle = ""cucumber""   |> wash   |(#: washedCucumber)> new Jar(washedCucumber)   |(#: jar)> add([""water""], jar)   |> salt   |(#: jar)> ferment(jar, 2)   |>  await #   |(w: jar)> jar.takeOne();  If a have a object, would be great if I could deconstruct the object, something like:  const firstNameIfAgeIsGreaterThanEighteen = ""user/info""    |(#: url)> await fetch(url, { mode: 'cors' })    |> await #.toJson() // { name: ""VinÃ­cius LourenÃ§o"", age: 18 }    |{name, age}> age > 18 ? name : undefined;"
1702;Jun 1, 2019 1:22:19 pm;Jun 1, 2019 1:40:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559420538_5cf2de7adc21b9.87819115;;;flattened vs proposal 1;3-5 years;Advanced;TypeScript;;64;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";159;;;;;;;;;;;;;;;;;;;;;;Line 5;|>  (_ => new Jar(_));54;;;;;;;;;;;;;;;;;;;;;50;;;;;;;;;;;;;;;;;;The proposal;;It's odd since it's generally placed above the \ and you have to use shift. Perhaps a better alternative is to use -> or some other combination of characters that are easier to type;
1707;Jun 1, 2019 1:44:27 pm;Jun 1, 2019 2:15:18 pm;Complete;;;English;;1559421867_5cf2e3ab8d9784.94711797;;;nested vs both;5-10 years;Advanced;Java;;124;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 11;", 14);";186;;;;;;;;;;;;;;;;Line 9;|> await #;397;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));55;;;;;;;;;;;;;;;;;;;;;266;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Not great, the 2 characters are not necessarily close on the keyboard but are typed with the same hand on a american QWERTY. I also use often a French keyboard layout and the pipe is not easy to type on such a keyboard.;I believe the Pipeline option is intuitive to understand, even if you never seen the '|>' notation before (because you have to write entire lambda functions which is a know concept). The Pipeline with # is shorter to write but makes it less intuitive to understand from scratch.
1708;Jun 1, 2019 1:47:59 pm;Jun 1, 2019 2:56:06 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559422079_5cf2e47fbeb434.46983399;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;559;[object Function];"""object""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 10;), x) where x is a variable from somewhere;1271;;;;;;;;;;;;;;;;Line 9;await #;35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;163;"const kimchi = ""cabbage"" |> wash |> cut |> salt | > new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await #";;;;;a bowl of jogurt with berries;too many if statements;;Only the nested ternary operator which is hard to read.;;;;;;;;;The proposal;;I think it's fairly okay, but I would like to see it as either a single pipe, as in other languages, or as -> because it gives a better meaning.;"Awesome proposal, I would really enjoy writing code with this syntax from 2 to many deep ""levels"" of function calls"
1713;Jun 1, 2019 2:20:56 pm;Jun 1, 2019 2:29:35 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559424056_5cf2ec38774582.91231172;;;flattened vs both;5-10 years;Expert;JavaScript;;97;"""function""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;Correct the typo in the function call;111;;;;;;;Line 10;Move the code from the line below to the previous line;109;;;;;;;;;;;;;Line 5;Add bracket;53;;;;;;;;;;;;;;;;;;;;;31;;;;;;;;;;;;;;;;;;;;;
1719;Jun 1, 2019 2:49:31 pm;Jun 1, 2019 3:31:37 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559425770_5cf2f2eaea0aa8.09317594;;;nested vs both;more than 10 years;Expert;JavaScript;;84;number;"""object""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;Line 10;, 14;123;;;;;;;;;;;;;;;;Line 9;await #;193;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));35;;;;;;;;;;;;;;;;;;;;;197;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;it doesn't look good in san-serif, in this textarea... but not awful.;I would reach for the status quo, but I would enter returns at key points to get a more readable script.  Both pipelines have a decent indication of receiving a parameter and using it in the definition, I like placeholders as much as anonymous functions.  It wasn't clear immediately that the simple functions that take one argument (not constructors, multi parameter functions, or keywords) did not need to specify the placeholder, nor that the await keyword needed to have it as well.   After going over it a few minutes, it clicked, but certainly leaves some questions as to consistency, line to line.
1721;Jun 1, 2019 11:01:06 am;Jun 1, 2019 4:27:09 pm;Complete;;;English;;1559412066_5cf2bd62b34991.51785992;;;nested vs proposal 2;more than 10 years;Advanced;TypeScript;;133;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 10;""")"" -> "",14)""";261;;;;;;;;;;;;;;;;Line 9;await #;181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;382;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (c => new Jar(c)) |> (jar => add(""spicy paste"", jar)) |> stir |> (jar => ferment(jar, 2)) |> await |> (jar => jar.takeOne())";;;;;a bowl of jogurt with berries;Other - Write In (Required);I would love to give # a name.;I kept asking myself what # currently means  ;;;;;;;;;The proposal;;felt fine;I don't like # because I cannot give it a name, but I do hate wrapping lambdas in () :(
1722;Jun 1, 2019 4:10:33 pm;Jun 1, 2019 4:43:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559430633_5cf305e95c9188.84877850;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;177;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"await ferment(saltyCabbageJar, 14);";121;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));422;;;;;;;;;;;;;;;;;;;;;529;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> await   |> (_ => fement(_, 2))   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;it was pretty straightforward to read;;;;;;;;;;;;;The proposal;;good, good, I just made a mistake once and typed />;strange to pipe await on its own. not sure if it would be better to have it included in statement
1724;Jun 1, 2019 4:22:01 pm;Jun 1, 2019 5:31:19 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559431321_5cf3089939c889.86096727;;;nested vs proposal 2;0-2 years;Advanced;Python;;74;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 1;Supply numdays to ferment, along with salt, possibly on line 10.;141;;;;;;;;;;;;;;;;Line 10;Not call takeOne in a pipe but on the next line...?;94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;182;"const kimchi = ""cabbage""   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;I simply read it top to bottom. It had a few annoyances - too many &&s in one line and whatnot - but honestly it wasn't too bad to read. I like the left to right, top to bottom flow of this proposal.;;;;;;;;;The proposal;;It's fine. I wouldn't mind only having one of the symbols, though just pipe could be confused by OCaml users.;I was skeptical at the start of this survey, but I love this proposal! I dunno if I'll use it *that* frequently, but I'm a fan of chainable functions and I'd try to find uses for it.
1726;Jun 1, 2019 5:48:38 pm;Jun 1, 2019 6:20:27 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559436518_5cf31ce6d23fc5.90555328;;;flattened vs both;0-2 years;Beginner;Java;;165;3;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;524;;;;;;;Line 9;await #;218;;;;;;;;;;;;;Line 5;(_ => new Jar(_));70;;;;;;;;;;;;;;;;;;;;;441;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> (_ => new Jar(_)) 	|> (_ => add(""spicy paste"", _)) 	|> (_ => stir(_)) 	|> (_ ferment(_, 2)) 	|> await 	|> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;With some mistakes the first time but it got easier;
1729;Jun 1, 2019 6:36:55 pm;Jun 1, 2019 6:44:02 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559439415_5cf328370bf355.70407242;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;90;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Use correct var name. (Really? any editor / linter can catch this!);196;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ) (Again, really? Editors ppl!);38;;;;;;;;;;;;;;;;;;;;;11;;;;;;;;;;;;;;;;;;;;;
1732;Jun 1, 2019 7:25:42 pm;Jun 1, 2019 9:14:22 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559442341_5cf333a5c3ad73.35563004;;;nested vs proposal 2;5-10 years;Advanced;Ruby;;120;Number;"""function""";;;;;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;166;;;;;;;;;;;;;;;;Line 5;new Jar;229;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;622;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar   |> add(""spicy taste"", #)   |> stir   |> ferment( #, 2)   |> await  const kimchi = kimchiJar.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;Reading the object properties from the '#'. That should have been abstracted to a function. And having the ternary aperator reminded me of trying to catch different types of failures in a promise chain, which is really annoying. ;;;;;;;;;The proposal;;Can't say. Did this on my iPhone. ;The '#' on the '|> new Jar(#)' and '|> await #' seemed unnecessary. Other than that it felt much cleaner, and faster than setting the result of each step into a separate value just to pass it to the function on the next line. 
1735;Jun 1, 2019 10:03:41 pm;Jun 1, 2019 10:15:49 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559451820_5cf358ace33612.09142979;;;nested vs proposal 2;3-5 years;Expert;JavaScript;;140;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 9;Ad, 2;125;;;;;;;;;;;;;;;;Line 10;;105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;50;;;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;;
1749;Jun 2, 2019 1:12:12 am;Jun 2, 2019 1:26:14 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559463132_5cf384dcbb70d6.60431662;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;76;Number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;Line 10;Add the parameters to the ferment function;126;;;;;;;;;;;;;;;;Line 9;Add the placeholder # to await;67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;63;;;;;;a bowl of jogurt with berries;density of operators;;Remembering the value of the placeholder #;;;;;;;;;Other - Write In (Required);With prettier, reading the status quo will not be harder. I prefer the proposal when I will not have to much placeholder. I will use it to just make easier sending previous value in the new function;Not complex. Exist already in other languages;
1757;Jun 2, 2019 2:03:34 am;Jun 2, 2019 2:23:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559466214_5cf390e6c34f01.90770100;;;nested vs both;more than 10 years;Advanced;JavaScript;;237;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 11;", 14);";168;;;;;;;;;;;;;;;;Line 9;|> await #;194;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));54;;;;;;;;;;;;;;;;;;;;;311;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Weird first, already natural after a few minutes;
1770;Jun 2, 2019 5:23:30 am;Jun 4, 2019 2:01:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559478209_5cf3bfc1ddaa96.33876775;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;121;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;ferment(jar, numdays=2);149;;;;;;;;;;;;;;;;Line 9;await #;118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;60273;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;Ok;
1775;Jun 2, 2019 3:38:58 am;Jun 2, 2019 6:48:52 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559471938_5cf3a742707213.67611111;;;nested vs proposal 2;3-5 years;Intermediate;TypeScript;;89;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 10;, 14;33;;;;;;;;;;;;;;;;Line 9;#;14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;231;"const kimchiJar = ""cabbage |>wash |>cut |>salt |> new Jar(#) |>add(""spicy paste"", # ) |>stir |>ferment(#, 2) |>await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;;
1776;Jun 2, 2019 6:44:15 am;Jun 2, 2019 7:06:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559483055_5cf3d2af61eda2.38608967;;;flattened vs proposal 2;5-10 years;Intermediate;Java;;369;Integer;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;43;;;;;;;Line 5;"Remove the `#` so that it takes ""cabbage"" as a string for input";182;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;279;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #) #     |> stir     |> ferment(#, 2)     |> await     |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;It was alright, two too many characters though for the amount of times it is written;I think the unix `|` should be used for this operation, I don't really see a difference between them so therefore they should be the same
1779;Jun 2, 2019 6:59:09 am;Jun 2, 2019 7:22:24 am;Complete;;;English;https://planet.mozilla.org/;1559483949_5cf3d62d54c716.48868386;;;flattened vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);lua;293;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;fix variable name;310;;;;;;;Line 8;await before ferment and remove line 9;77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;165;"const kimchi = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> add(""spicy paste"", #) 	|> stir 	|> ferment(#, 2) 	|> await # 	|> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Line 11 and 12 are the stupid parts, frankly I've not even bothered to figure out whether it's even valid syntax to wrap a ?: statement like this.;;;;;;;;;The Status quo;;Fine for me, but my keyboard layout is far from standard, with a custom .xmodmap and firmware.  For a standard keyboard, it's 3 keystrokes using 3 fingers, which seems weird, but it's probably fine.;Nowadays our editors autofill all the function sugar anyway, so I frankly don't see the need for this. You've already spent probably way too much time making this survey. Spend your efforts elsewhere.
1780;Jun 2, 2019 7:03:40 am;Jun 2, 2019 7:22:59 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559484219_5cf3d73be1a390.15362116;;;flattened vs proposal 1;more than 10 years;Advanced;TypeScript;;200;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";178;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_  => new Jar(_));60;;;;;;;;;;;;;;;;;;;;;238;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> ferment   |> await   |> (_ => _.takeOne)";a bowl of jogurt with berries;too many if statements;;The beginning is easy too read with pipelines but when we go to the code with many if condition, we have to check values of each variables involved.;;;;;;;;;;;;;The proposal;;"Nice as I am accustomed to write code in F# ;-)";Hope to see this operator implemented shortly!!!
1785;Jun 2, 2019 7:19:29 am;Jun 2, 2019 7:53:45 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559485169_5cf3daf1865ea2.41613633;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;169;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;Add a number of days after line 10;137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add a "")"" at the end of line 5";83;;;;;;;;;;;;;;;;;;;;;551;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;"- having to check the value of variables multiple times (for example in 13 where the same checks are done twice) - figuring out when a ""pipeline"" is finished (for example line 15, it's not immediately clear â at least to someone who usually doesn't use semicolons â whether that last ""|>"" is performed or not before returning, would be clearer with indentation)";;;;;735;;;;;;;;The proposal;;It was okay.;Although I feel like the proposal makes the example code more readable I fear that people might overuse and produce even less readable code as a result.
1786;Jun 2, 2019 8:04:37 am;Jun 2, 2019 8:34:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559487877_5cf3e585178a85.87342929;;;nested vs both;more than 10 years;Advanced;JavaScript;;89;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;,10);214;;;;;;;;;;;;;;;;Line 10;()=>;215;;;;;;;;;;;;;Line 5;);66;;;;;;;;;;;;;;;;;;;;;552;"const kimchiJar =  ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> stir |> add(""spicy paste"", #) |> ferment(#,2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Its a shorter way than Ramda.pipe(), Ramda.compose() and take much less resourses than use Immutable.js;Its a good syntax!
1792;Jun 2, 2019 8:55:57 am;Jun 2, 2019 9:28:44 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559490957_5cf3f18d06d8e0.07358942;;;nested vs both;5-10 years;Advanced;Other - Write In (Required);C#;66;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 3;salt(;176;;;;;;;;;;;;;;;;Line 9;await #;188;;;;;;;;;;;;;Line 5;(_ => new Jar(_));105;;;;;;;;;;;;;;;;;;;;;367;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Super nice, kinda sorta feels like F# marrying lambda calc, I love it!;Keep up the good work!
1794;Jun 2, 2019 9:20:30 am;Jun 2, 2019 9:30:03 am;Complete;;;English;https://planet.mozilla.org/;1559492430_5cf3f74e41b349.67224897;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;104;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 1;?;98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);54;;;;;;;;;;;;;;;;;;;;;49;;;nested pipelines;;;;;;;;;;;;;;;;;;
1797;Jun 2, 2019 9:41:30 am;Jun 2, 2019 9:55:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559493690_5cf3fc3a0caa44.26811276;;;flattened vs both;5-10 years;Expert;JavaScript;;24;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"replace ""saltCabbageJar"" with ""saltyCabbageJar""";108;;;;;;;Line 9;"change ""await"" to ""await #""";107;;;;;;;;;;;;;Line 5;add a ) to the end of the line;29;;;;;;;;;;;;;;;;;;;;;225;"kimchi = wash(""cabbage"")   |> cut(#)   |> salt(#)   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#)   |> await ferment(#, 2)   |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;It's a bit annoying, but it seems like thing something that could be easily improved by editors.;I like that the arrow function version re-uses functions, something that I'm already familiar with. I don't like the extra weight of the () around the arrow functions, but I understand why they are required. I like that the arrow function version makes it easy to add names to the passed in argument, which I expect would make complex code clearer. I don't like introducing a new symbol (#) that can't be used anywhere else, but I could imagine using it elsewhere, which could be nice. Maybe `[1,2,3].map(# * 2)` returns `[2,4,6]`.
1798;Jun 2, 2019 10:00:52 am;Jun 2, 2019 10:31:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559494852_5cf400c49f34a9.69206889;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;145;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;191;;;;;;;;;;;;;;;;;;;;;;Line 5;add closing parens;66;;;;;;;;;;;;;;;;;;;;;291;"const kimchi =   ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);whitespace formatting, verbose logic on line 13, bad styling on lines 14-15. I'd prefer to invoke fetch immediately with the url instead of piping it.;whitespace formatting, verbose logic on line 13, bad styling on lines 14-15. I'd prefer to invoke fetch immediately with the url instead of piping it.;;;;;;;;;;;;;The proposal;;I'm used to typing |> from my experience coding in Elm and I like it a lot.;"Like in Elm, it would be nice if functions could be curried when using the pipe operator. So instead of `|> (_ => add([""water""], _))` it would be great if we could just pipe directly into `add` like so: `add([""water""])`, where `add([""water""])` would return a function that takes a new jar argument. I find it verbose to have to wrap every function that takes multiple args in another function."
1803;Jun 2, 2019 11:18:41 am;Jun 2, 2019 11:28:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559499521_5cf41301444305.78350339;;;nested vs both;more than 10 years;Advanced;JavaScript;;14;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;), 14;16;;;;;;;;;;;;;;;;Line 9;|> await #;71;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));79;;;;;;;;;;;;;;;;;;;;;284;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;ok;
1804;Jun 2, 2019 11:22:03 am;Jun 2, 2019 11:54:55 am;Complete;;;English;https://qsurvey.mozilla.com/;1559499723_5cf413cb0f8d20.56524851;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;169;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;262;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing parenthesis at end of line;97;;;;;;;;;;;;;;;;;;;;;328;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2)   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;I had to consider the meaning of the pipeline structure at the return statement (line 14). I deemed it unrelated to the overarching pipeline structure. I read it as fully resolving before returning the final value.;;;;;;;;;;;;;The proposal;;Takes some getting used to, but I think it's a good choice. Manually adding indentation in the survey form was more annoying, being used to a code editor.;The example does a good job in making the case for this new syntax. Avoiding intermediate variables that are otherwise not used would be pretty neat - looking forward to being able to use it.
1805;Jun 2, 2019 10:35:55 am;Jun 2, 2019 11:52:32 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559496955_5cf408fbb80aa4.79799156;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;72;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";112;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));55;;;;;;;;;;;;;;;;;;;;;219;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;Finding/remembering the values of variables;;;;;;;;;;;;;The proposal;;Not very convenient;
1810;Jun 2, 2019 12:46:06 pm;Jun 2, 2019 1:33:56 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559504766_5cf4277e8e8166.36990089;;;flattened vs both;more than 10 years;Advanced;JavaScript;;140;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";186;;;;;;;Line 9;|> await #;312;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));116;;;;;;;;;;;;;;;;;;;;;209;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Typing the |> was a little difficult on my keyboard, but not too bad. Holding the right shift with my little finger while reaching the pipe key with my middle finger, is no different than any other typing of |. The pivoting to get > with my index finger while still depressing the shift key isn't too hard. It is easier if I let my little finger slide to the right on the shift key. The symbol itself still looks awkward to me, but I think the font (and that font's vertical alignment of | and >) make an important difference in legibility.;"I wasn't particularly excited about the proposal for the pipeline operator before this survey. I'm more interested now, but I still don't feel like I've encountered enough use cases where it would be especially helpful and cleaner.  The use of # as the value placeholder might introduce visual confusion when scanning code, given the use of # also as the sigil in the proposal for private class members. ""Is that a private class member reference? Oh, no, it's just a # by itself, so it's a placeholder."" Would # become a general placeholder symbol for potential future syntaxes? For example, indeterminate generics (like < ?> in Java) or templating (like ? SQL prepared statements, but we already have escape`${foo}` for something like that).  Most of the time I've had to write constructs similar to the examples in this study, the utility methods were designed to chain. Thus, I find the status quo example not completely representative of my experience of the status quo. It's a bit more OO than functional. I wouldn't have a temporary variable for each step, but rather something like this (given appropriate definitions): const sauerkraut = await new Jar(new Vegetable(""cabbage"").wash().cut().pound()).add(""salt"").ferment(14).then(takeOne); Granted, that's not all that clean, either, but breaking it up still only requires three lines instead of lots of assignments.  My guess is that the pipeline operator will be mostly used with library functions designed to work with it or for boilerplate recurring constructs. I don't know that I'd go to it right away while writing because you have to know that it's use will pay off a few function calls down the road. If I'm writing as I'm thinking, I may need to invoke a function that doesn't work cleanly with it or the pipeline might need to be broken after only a couple of lines. The alternative is to throw in a bunch of anonymous arrow functions whenever the API/signatures don't quite work with the pipeline, even with the # placeholder. Chaining methods, it's easier to write linearly, not necessarily thinking ahead, and just end it when you need to do something else. To me, the pipeline syntax seems more like something you can refactor to for legibility than a syntax that helps thinking while writing a first pass at some operation.  For me, there's no drawback from having the construct in the language. It I have a situation where I think it's useful, then it's available."
1814;Jun 2, 2019 1:15:00 pm;Jun 2, 2019 1:38:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559506500_5cf42e448d7a00.80953718;;;nested vs flattened;5-10 years;Advanced;JavaScript;;91;number;"""function""";;;"y => add(10, y);";;;;;;Never;Very often;I like Pattern 2 better;;;;;;Line 11;", 14);";223;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";234;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;366;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); const saltyCutCabbage = salt(cutCabbage); const jarredCabbage = new Jar(saltyCutCabbage); const kimchiIngredients = add(""spicy paste""); const jarredKimchi = await ferment(kimichiIngredients); const kimchi = jarredKimchi.takeOne();";;;;;;;;;;Reading which return value from a function is placed into which new function.;Fewer lines and fewer variables.;Too many temporary variables. Plus, naming variables is hard and tedious.;It's clearer which object is being operated on and what the results of the operations are.;Nope;;;;;;
1816;Jun 2, 2019 1:37:57 pm;Jun 2, 2019 2:03:42 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559507876_5cf433a4eeb703.42969812;;;nested vs proposal 2;0-2 years;Advanced;JavaScript;;138;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Often;;;;I like the proposal better;Line 10;, 2;168;;;;;;;;;;;;;;;;Line 9;await #;68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;325;"const kimchi= ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;The line 12 with the pipeline operator next to an arrow function is a bit confusing;;;;;;;;;The proposal;;"The ""|"" isn't easy to access on an AZERTY keyboard.";
1817;Jun 2, 2019 1:45:58 pm;Jun 2, 2019 2:13:45 pm;Complete;;;English;https://hacks.mozilla.org/;1559508358_5cf435860f9394.62663139;;;flattened vs both;3-5 years;Advanced;JavaScript;;166;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"rename ""saltCabbageJar"" to ""saltyCabbageJar""";211;;;;;;;Line 9;remove the line;311;;;;;;;;;;;;;Line 5;"put a "")"" at the end of the line";75;;;;;;;;;;;;;;;;;;;;;384;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;It was alright;
1818;Jun 2, 2019 2:13:32 pm;Jun 2, 2019 2:56:46 pm;Complete;;;English;;1559510012_5cf43bfc37a585.15610994;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;482;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Other - Write In (Required);I see it often, but usually with intermediate variables to make it more readable.;;;I like the proposal better;Line 11;add a numdays argument to call to ferment;244;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing parenthesis on line 5;359;;;;;;;;;;;;;;;;;;;;;378;"const kimchi = ""cabbage""  |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |>  (_ => _.takeOne);";a bowl of jogurt with berries;whitespace formating;;I read through it one line at a time. I was slowed down the most when I didn't realize there was more to the current statement than the current line. I think putting the pipe operator at the end of the line instead of the beginning of the next would help. As well as better indentation.;;;;;;;;;;;;;The proposal;;On a mobile device it is pretty painful, but on a physical, American qwerty keyboard I don't think it would be too bad.;
1825;Jun 2, 2019 3:32:52 pm;Jun 2, 2019 3:51:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559514772_5cf44e94889494.84329627;;;nested vs both;0-2 years;Advanced;TypeScript;;206;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;"prepend "", #"" where # is a number";185;;;;;;;;;;;;;;;;;;180;;;;;;;;;;;;;Line 5;"append a "")"" to line 5";33;;;;;;;;;;;;;;;;;;;;;205;"const kimchi = ""cabbage""      |> wash      |> cut      |> salt      |> new Jar(#)      |> add(""spicy paste"",#)      |> stir      |> ferment(#,2)      |> await #      |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A little bit clunky. I would prefer a syntax that uses a single character, or neighboring characters.;
1828;Jun 2, 2019 4:47:14 pm;Jun 2, 2019 5:18:25 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559519234_5cf460026eb915.46149929;;;nested vs both;0-2 years;Intermediate;JavaScript;;128;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 2;191;;;;;;;;;;;;;;;;Line 10;sauerkraut.takeOne();214;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));116;;;;;;;;;;;;;;;;;;;;;417;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_=> ferment(_, 2)   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;I didn't really mind it but now that you ask I guess it might be a bit of a reach to do it over and over again.;I like the pipeline with # better than the other proposal due to the cleaner syntax, however I'm not sure if I correctly found the bug in the code example. That's why I wrote my kimchi function using the first proposal
1829;Jun 2, 2019 5:18:18 pm;Jun 2, 2019 5:43:02 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559521098_5cf4674abef519.86707303;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;121;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";145;;;;;;;Line 9;await #;344;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;121;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;a bowl of jogurt with berries;nested pipelines;;It was clear to follow until we reached the new pipelines inside the ternary operator. For a moment I lost which pipeline I was in and had to go back to the start of the ternary and start the nested pipeline again. As dense as the code is, it wasn't terribly difficult to follow. But nesting pipelines any deeper could quickly become unreadable.;;;;;;;;;The proposal;;Comfortable enough. It seems pretty intuitive;
1833;Jun 2, 2019 6:08:33 pm;Jun 2, 2019 6:47:07 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559524113_5cf47311ac8342.13926185;;;flattened vs both;more than 10 years;Intermediate;Other - Write In (Required);ESQL (IIB);167;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"Fix spelling of variable saltCabbageJar, should be saltyCabbageJar (""y"" was missing)";209;;;;;;;Line 9;"Should it be ""await #""? Also it's semantically incorrect to takeOne() sauerkraut from a jar; you could take one spoonful of sauerkraut from the jar.";432;;;;;;;;;;;;;Line 5;"Add "")"" at end of line.";110;;;;;;;;;;;;;;;;;;;;;331;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await #   |> #.takeOneServeBecauseSemanticallyYouCannotTakeOneKimchi()  // I tried to follow the proposal style of only declaring one variable for the end result, but in practice I'd declare kimchiJar and kimchi so that later in the code I could do other things with the jar.";;;;;;;;;;;;;;;Other - Write In (Required);I like the pipeline with #, except I would rather break it into two parts to have a pickleJar variable available for more than one use rather than throwing that reference away and only keeping the final pickle variable.;;;"A little annoying given the ""|"" symbol is at the edge of the keyboard rather than directly under my fingers in the ""home"" typing position, but given pretty much all of the symbols on the keyboard already have some meaning in JS I can't think of a better alternative for a new pipeline operator.";
1834;Jun 2, 2019 6:18:21 pm;Jun 2, 2019 6:55:00 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559524700_5cf4755cd93829.49454680;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;152;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";201;;;;;;;Line 9;await #;78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;426;"const kimchi = ""cabbage""   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;density of operators;;I need to mentally give a name to some of the steps, to keep track of where I'm at, recreating what would (should) have been semantically named variables. When ready code, I tend to skim, not read every characters. Here I find myself forced to read the entirety of the code as I cannot pick up in the middle and use the names variables as a way to get context.;;;;;;;;;Other - Write In (Required);I'm ambivalent. I prefer the version with semantically named variables, but the pipe operator beats nested function calls.;Not the quickest characters, at least on my keyboard, but not huge deal.;I don't dislike the proposal, but I'm a bit concerned that it's yet another pattern that will encourage inexperienced developer to favor writing succinct code over clear code. Naming variables takes more times, but it brings clarity for the reader.
1835;Jun 2, 2019 6:26:21 pm;Jun 2, 2019 6:44:07 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559525181_5cf4773d33afd0.89239358;;;nested vs both;more than 10 years;Advanced;TypeScript;;171;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;", 14);";127;;;;;;;;;;;;;;;;Line 9;await #;255;;;;;;;;;;;;;Line 5;(_ => new Jar(_));68;;;;;;;;;;;;;;;;;;;;;172;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A bit cumbersome;
1836;Jun 2, 2019 6:39:32 pm;Jun 2, 2019 7:13:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559525972_5cf47a54648005.95600589;;;flattened vs proposal 2;5-10 years;Intermediate;JavaScript;;96;Function;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Fix the typo in the function call.;146;;;;;;;Line 9;Add the # to the await.;203;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;401;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spice paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;The mangled logic condition (or) to it then turn to be the condition of an ternary if statement.  The second ternary if was okay, until it got to the arrow function, calling it afterwards... I didn't know what the code was doing and just skipped it hoping everything was okay and this condition never run. I felt lost. ;;;;;;;;;The Status quo;;It was okay when I had to write the code it felt much like working on shell, but reading it was a little harder than the status quo,but I think the reason is that I am not used to think of JavaScript in terms of pipes as much as with shell scripts.;Omitting the parentheses on function calls seems confusing in JavaScript as these are required and can be confusing when paired with keywords like await. In shell scripts the calls to commands don't use parentheses so it appears less ambiguous.
1838;Jun 2, 2019 6:59:31 pm;Jun 2, 2019 7:21:33 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559527170_5cf47f02db8796.37513367;;;nested vs both;more than 10 years;Intermediate;JavaScript;;106;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;Line 3;new Jar().add(;195;;;;;;;;;;;;;;;;Line 6;delete line 6;119;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));64;;;;;;;;;;;;;;;;;;;;;504;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir(#)   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;A nuisance;APL is a very expressive language but it is very difficult to read because of the extensive use of symbols.  Adding such symbols to JavaScript may increase its expressiveness at the expense of readability.  I prefer to work with readable code.
1841;Jun 2, 2019 7:25:02 pm;Jun 3, 2019 6:34:42 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559528702_5cf484fe5b3da4.20461002;;;flattened vs both;0-2 years;Intermediate;JavaScript;;931;number;"""error""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix typo in var name;141;;;;;;;Line 10;(#).takeOne();2099;;;;;;;;;;;;;Line 5;add ) at end of line;186;;;;;;;;;;;;;;;;;;;;;79013;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;a bit weird, but I could get used to it;the regular pipeline is not bad either, but seems like it might be easy to accidentally leave out a '(' or ')'
1843;Jun 2, 2019 8:57:51 pm;Jun 2, 2019 9:27:09 pm;Complete;;;English;;1559534270_5cf49abee47517.34993064;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;233;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;Pass a second argument to `ferment()`;153;;;;;;;;;;;;;;;;Line 10;`# && #.takeOne()`;246;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;227;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;Other - Write In (Required);Status quo if we can refactor to reduce nested logic. Proposal if we really need to nest that much logic.;I kept making typos, but that'll probably improve with practice.;Thanks for the survey!  For the survey questions that require typing code, please change the textarea to monospace :)
1845;Jun 2, 2019 9:13:07 pm;Jun 2, 2019 9:50:01 pm;Complete;;;English;https://feedly.com/i/subscription/feed%2Fhttp%3A%2F%2Fplanet.mozilla.org%2Fatom.xml;1559535187_5cf49e53168be1.60636236;;;nested vs proposal 2;more than 10 years;Intermediate;C++;;109;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"add "", 14""";95;;;;;;;;;;;;;;;;Line 9;"change it to ""await #""";98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;510;"const kimch = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2),   |> await   |> (_ => _.takeOne());";;;;;a bowl of jogurt with berries;Other - Write In (Required);values vs functions;In working through it, I was always trying to figure out whether a syntactic position was a value or a function.  Line 12 totally threw me. For quite a while, it was because for some reason I expected the precedence of `|>` to be lower than `=>`. But once I got past that, it was the empty argument list at the end of the line -- and in fact, I still don't see why that doesn't need to be `(#)`.;;;;;;;;;The proposal;;Typing it is okay. Reading it is not that great.;With the status quo, I would use several named temporaries, especially for the results of functions that return the same type as their single or main input.  With the proposal, I'd probably not bother with temporaries for functions that return the same type, but I would likely use them when changing the type (from string to Jar, in this example.)  With the proposal, I don't care for separating out the 'await' at all. I would rather use `|> await ferment(#, 2)`.
1851;Jun 2, 2019 10:37:29 pm;Jun 2, 2019 11:17:09 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559540249_5cf4b219072e63.13978030;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;91;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;0,14;339;;;;;;;;;;;;;;;;Line 9;await #;106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;305;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await # |> takeOne";;;;;a bowl of jogurt with berries;too many if statements;;# after the ternary operator was confusing, i had to trace back to figure out what value it's pointing to. ;;;;;;;;;The proposal;;made sense if someone had previous experience with unix systems. but since js already has the => operator, maybe something like -> would also make sense.;
1853;Jun 2, 2019 10:52:01 pm;Jun 2, 2019 11:26:29 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559541121_5cf4b5815caa91.40387506;;;nested vs proposal 2;more than 10 years;Intermediate;Other - Write In (Required);PHP;149;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;), 14;267;;;;;;;;;;;;;;;;;;110;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;502;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The Status quo;;Much more complicated than parentheses;
1854;Jun 2, 2019 11:13:41 pm;Jun 2, 2019 11:34:43 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559542421_5cf4ba95585b86.21439927;;;nested vs flattened;5-10 years;Advanced;JavaScript;;183;Number;"""function""";"add.bind(null, 10);";;;;;;;;Never;Very often;I like Pattern 2 better;;;;;;Line 10;),14;311;;;;;;;Line 5;const saltCabbageJar = ...;136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1857;Jun 2, 2019 3:03:24 pm;Jun 2, 2019 11:45:56 pm;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559513004_5cf447ac11bef4.02343428;;;flattened vs proposal 1;5-10 years;Intermediate;Ruby;;90;function;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Write saltCabbageJar;109;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ) at the end of the line;72;;;;;;;;;;;;;;;;;;;;;55;;a bowl of jogurt with berries;identifiers;;Lots of _, some duplicated code ;;;;;;;;;;;;;The proposal;;Ok;
1863;Jun 3, 2019 12:08:31 am;Jun 3, 2019 12:51:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559545711_5cf4c76fd2a752.85869621;;;nested vs proposal 2;more than 10 years;Advanced;Java;;218;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;312;;;;;;;;;;;;;;;;Line 10;sauerkraut.takeOne();942;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;440;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;The proposal;;I have copy-pasted it. But I think, it will be ok to type it.;
1864;Jun 3, 2019 12:08:47 am;Jun 3, 2019 12:28:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559545727_5cf4c77fbafd01.49941393;;;nested vs flattened;3-5 years;Advanced;JavaScript;;122;number;"""function""";;;"y => add(10, y);";;;;;;Very often;Almost never;I like Pattern 1 better;;;;;;Line 11;", 14);";107;;;;;;;Line 6;"const saeurkrautJar = await ferment(saltyCabbageJar, 14);";99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const kimchiJar = await ferment(   stir(     add(       ""spicy paste"",       new Jar(salt(cut(wash(""cabbage))))     )   ), 2);";;;;;;;;;;The line is doing many things;The 'pickleJar' variable is olding all the data we need in the bussiness logic;To many variable;One task per variable Explicit variable naming;;;;;;;
1867;Jun 3, 2019 12:17:15 am;Jun 3, 2019 12:31:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559546234_5cf4c97ae87c87.55405137;;;nested vs proposal 1;5-10 years;Expert;TypeScript;;60;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Often;;;;I like the proposal better;Line 10;add a number of days as ferment()'s second input;82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing parenthesis at the end of line 5;69;;;;;;;;;;;;;;;;;;;;;226;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"")) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;The nested conditionals in the pipeline are a no-no, but the pipeline itself is no problem;;;;;;;;;;;;;The proposal;;It felt greaaat!!!;I'm really in favor of the pipeline proposal. With it, it becomes much easier to express a sequence of operations that are readable, and it encourages the use of curried and pure functions. It's certainly a boon for those who enjoy writing functional JS, and it's absolutely neutral for those who don't.
1870;Jun 3, 2019 12:00:53 am;Jun 3, 2019 12:45:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559545253_5cf4c5a516f4a4.14059417;;;nested vs flattened;5-10 years;Advanced;JavaScript;;128;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 11;", 14);";124;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;156;"const cabbage = salt(cut(wash(""cabbage""))); // compose or pipe would be nicer const cabbageJar = new Jar(cabbage); const pasteJar = stir(add(""spicy paste"", cabbageJar)); const kimchiJar = await ferment(pasteJar, 2);   const kimchi = kimchiJar.takeOne();";;;;;;;;;;It is difficult to mentally parse which argument belongs to which function.;It is easier to see the calls graph, especially if only one argument is involved. The code is terse and easier to write since you don't need to name intermediary values.;You need to keep in memory a lot of variable names which need to be used in particular order. You need to come up with meaningful variable names and avoid typos (hopefully linter usually helps with that).;It is easier to follow the logic line-by-line and much easier to modify, since you don't need to untangle a mess of positional arguments.;;;;;;;
1871;Jun 3, 2019 12:35:05 am;Jun 3, 2019 1:24:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559547305_5cf4cda9cdd3e9.05971042;;;nested vs proposal 2;0-2 years;Intermediate;Other - Write In (Required);php;231;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Rarely;;;;I like the proposal better;Line 11;add the param numdays to ferment;387;;;;;;;;;;;;;;;;Line 10;;249;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;799;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;the multiple conditions at line 8 are hard to read;;;;;;;;;The proposal;;it was ok;
1872;Jun 3, 2019 12:40:42 am;Jun 3, 2019 1:11:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559547641_5cf4cef9e14e82.08105911;;;flattened vs both;more than 10 years;Expert;JavaScript;;157;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;"const sauerkrautJar = awaitferment(saltyCabbageJar, 14);";336;;;;;;;Line 5;"(#) => new Jar(#);";271;;;;;;;;;;;;;Line 5;(_ => new Jar(_));56;;;;;;;;;;;;;;;;;;;;;186;"const kimchi = ""cabbage""    |> wash   |> cut   |> salt   |> ((_) => new Jar(_))   |> add(""spice paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne();";;;;;;;;;;;;;;;Other - Write In (Required);"const pickle = Function.pipe(wash, # => new Jar(#), # => add(""water"", #), salt, # => ferment(#, 2), #=> await #, # => #.takeOne());";;;;"Instead of introducing a new pipe (|>) operator, maybe a arrow function shortcut may be more useful.  Current arrow function x => wash(x)  A function call with a special character (e.g. #) is a shortcut for a partial function.  wash(#) is like _ => wash(_); add(""sugar"", #) is like _ => add(""sugar"", _);  A property access on # will transform to  #.toString(); is like _ => _.toString();  Then the recipe can be written as  const pickle = Function.pipe( wash, _ => new Jar(_), add(""water"", #), salt,  ferment(#, 2),  await #,  #.takeOne() );    new Jar(#) may result in an exception like ""# can not be used in combination with new operator, consider using _ => new Jar(_)"""
1873;Jun 3, 2019 12:54:34 am;Jun 3, 2019 1:01:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559548474_5cf4d23a2ce9d2.77611114;;;nested vs both;3-5 years;Advanced;Other - Write In (Required);PHP;91;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 11;provide a second parameter to ferment;90;;;;;;;;;;;;;;;;;;44;;;;;;;;;;;;;Line 5;add a parenthese at the end of the line;20;;;;;;;;;;;;;;;;;;;;;12;;;;;;;;;;;;;;;;Other - Write In (Required);Pipeline with #, but with an underscore;;;;
1876;Jun 3, 2019 1:00:46 am;Jun 3, 2019 1:24:29 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559548846_5cf4d3aebf7aa5.41381068;;;flattened vs both;more than 10 years;Advanced;TypeScript;;49;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const saltyCabbageJar = await ferment(saltyCabbageJar, 14);";105;;;;;;;Line 5;_ => new Jar(_);63;;;;;;;;;;;;;Line 5;(_ => new Jar(_));31;;;;;;;;;;;;;;;;;;;;;229;"const portion = 'cabbage'   |> wash   |> cut   |> salt   |> _ => new Jar(_)   |> jar => add('spicy paste', jar)   |> stir   |> ferment   |> await   |> jar => jar.takeOne()   ;";;;;;;;;;;;;;;;Pipeline;;;;Strange at first, reminded me of the functional programming courses I took in college where we used Haskell. But after a few minutes I felt right at home again.;Not sure how useful that will be in practice.  Most of the time I work some way or another with iterables, so I stick to the classics: map, filter, reduce, etc.
1882;Jun 3, 2019 1:38:55 am;Jun 3, 2019 1:58:16 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559551134_5cf4dc9edd0942.89962382;;;nested vs both;more than 10 years;Expert;JavaScript;;98;number;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Depends on project I'm working on;;I like the pipeline with the # better;;Line 11;", 14);";152;;;;;;;;;;;;;;;;Line 9;await #;144;;;;;;;;;;;;;Line 5;(_ => new Jar(_));81;;;;;;;;;;;;;;;;;;;;;182;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline;;;;It's okey ( using Dvorak);"Don't like that you still have to specify 'await' in ""Pipeline with #"" proposal and that you have to work with promise 'then' method to get the value. I would expect the pipeline to resolve promise as soon as it's returned to pipeline, which means last line in proposal should be something like (_ => _.takeOne())"
1884;Jun 3, 2019 1:39:33 am;Jun 3, 2019 1:57:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559551173_5cf4dcc5431769.89692645;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;114;"""number""";"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 1;Line 10: `), 2`;172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));56;;;;;;;;;;;;;;;;;;;;;179;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> preparedCabbage => new Jar(preparedCabbage)   |> jar => add(""spicy paste"", jar)   |> stir   |> jar => ferment(jar, 2)   |> await   |> jar => jar.takeOne()";a bowl of jogurt with berries;inconsistent style;;I needed to backreference to the top level definitions quite a few times (which is crucial in finding the result, but not in understanding what the code does) Also the big function inside the last |> block should've been extracted.;;;;;;;;;;;;;The proposal;;ugh;
1885;Jun 3, 2019 1:42:46 am;Jun 3, 2019 1:58:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559551365_5cf4dd85e78f82.01097363;;;nested vs both;3-5 years;Intermediate;TypeScript;;106;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;Add numdays;96;;;;;;;;;;;;;;;;Line 9;Add # after await;195;;;;;;;;;;;;;Line 5;Add closing bracket;40;;;;;;;;;;;;;;;;;;;;;218;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;It was better than expected - not having to release Shift key while pressing \ and . was a nice thing.;The # way seems better as it is terser and seems more intuitive.
1886;Jun 3, 2019 1:50:55 am;Jun 3, 2019 3:32:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559551855_5cf4df6f74ca94.67746454;;;flattened vs proposal 2;more than 10 years;Advanced;Clojure;;72;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";97;;;;;;;Line 8;|> await ferment(#, 14);93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5215;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;the condition in the ternary and the nested ternary is very noisy but manageable. apart from that, I did not know before looking at the example that the ternary could even return new pipeline expressions. can be very handy, though.;;;;;;;;;The proposal;;takes some getting used to, but thats all.;coming from clojure, the concept is familiar. I like it.
1888;Jun 3, 2019 1:59:22 am;Jun 3, 2019 2:20:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559552361_5cf4e169e8a5d9.86615640;;;flattened vs both;3-5 years;Advanced;JavaScript;;66;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the status quo better;;;;;;;;;;;Line 6;"Change the first argument to ""ferment"" to correctly read ""saltyCabbageJar"" with the 'y'";91;;;;;;;Line 10;No idea - I'm guessing at which line the bug is on at this point!;222;;;;;;;;;;;;;Line 5;Add the closing parenthesis at the end of the line;31;;;;;;;;;;;;;;;;;;;;;255;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Yeah, a little awkward to be honest;I think I see what the bug was in the sauerkraut recipe now (await instead of await #) but I'm not going to go back and change it because that was my first impression! Now that I have clocked that is required I think I'd be unlikely to make that mistake again.  I think the proposal with # is better than using _ simply due to the number of parentheses it allows us to drop - we have enough of them in JS as it is! Use of the # character doesn't sit perfectly though, as for me it's closely associated with comments in other programming languages.
1890;Jun 3, 2019 2:08:22 am;Jun 3, 2019 4:35:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559552902_5cf4e386608614.55650611;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;163;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;239;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a parenthesis at the end of line 5;172;;;;;;;;;;;;;;;;;;;;;460;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;Read code |> Refer back to declared constants and api responses |> Read question |> Reread the code processing the output of every situation |> Define result.  Hardest part was dealing with the idea of nested ifs and pipes;;;;;;;;;;;;;The proposal;;A bit annoying I think, but just because I'm not used to it. It should be better than => and similar as you don't need to care if shift is pressed or not, just PRESS AND GO |> :);
1891;Jun 3, 2019 2:14:03 am;Jun 3, 2019 2:33:11 am;Complete;;;English;https://feedly.com/i/collection/content/user/ce49768d-fab1-4521-8a53-0fbe4ad0d0eb/category/frontend-standards%2Bbrowsers;1559553243_5cf4e4db26d216.05881760;;;flattened vs both;more than 10 years;Advanced;JavaScript;;84;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;saltCabbageJar should be saltyCabbageJar;231;;;;;;;Line 9;await #;58;;;;;;;;;;;;;Line 5;add );19;;;;;;;;;;;;;;;;;;;;;337;"const kimichi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;fine - hold right shift with right pinky, then quickly | and >;
1893;Jun 3, 2019 2:22:54 am;Jun 3, 2019 3:02:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559553774_5cf4e6ee88c781.00718569;;;flattened vs proposal 1;more than 10 years;Intermediate;JavaScript;;234;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;await ferment(saltyCabbageJar, 14);398;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));83;;;;;;;;;;;;;;;;;;;;;433;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;"The ""if statements"" block is very busy and you have to try to evaluate each statement between && operator. Having a constant such as isBreakfastReady to group the conditions would remove part of the noise and clarify the intention.";;;;;;;;;;;;;The proposal;;Pretty easy;Looking forward for this feature :-)
1894;Jun 3, 2019 2:25:28 am;Jun 3, 2019 2:47:36 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559553928_5cf4e78818e956.83141351;;;nested vs proposal 1;3-5 years;Advanced;Other - Write In (Required);C#;128;"""number""";"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;Line 10;add second argument (number of days) to ferment call;123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add missing ) at the end of line;92;;;;;;;;;;;;;;;;;;;;;200;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;Biggest slowdown was parsing the if conditions with the provided bool variables to get the result.;;;;;3;;;;;;;;The proposal;;On a german keyboard the two symbols are on the same key with different modifiers. This makes it fast-ish but awkward to type. It also requires moving both hands far from the center of the keyboard.;The underscore as replacement was hard to understand at first. Seeing, that it can also be a named argument made the proposal easier to understand and the code where named arguments was used was also easier to quickly understand.
1895;Jun 1, 2019 11:49:28 pm;Jun 3, 2019 2:56:27 am;Complete;;;English;;1559458168_5cf3717843be01.14761239;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;78;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);139;;;;;;;Line 8;await ferment(#, 14);96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;132;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> await ferment(#, 2)";;;;;a bowl of jogurt with berries;nested pipelines;;Line 8 is a condition, skip it, check the then / else parts. Line 9 is a condition, no its not, it's something, that is passed into the following pipelines. Ahh, it's the actual pipeline of this step! Then the following lines were already easy to digest.  So I could turn checking the setup to see where the path goes.;;;;;;;;;Other - Write In (Required);see how was it typing;Right Alt + Right W  It was really HARD!  I use a Hungarian keyboard, both keys are hidden away from daily use. I had to hit Right Alt + Right W.;
1896;Jun 3, 2019 2:40:49 am;Jun 3, 2019 2:59:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559554849_5cf4eb210f4df7.55682750;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;113;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;correct spelling of salt[y]CabbageJar;146;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add a "")"" at the end of the line.";60;;;;;;;;;;;;;;;;;;;;;307;"const kimchiJar = ""cabbage""   |> wash   |> cat   |> salt   |> (_ => new kimchiJar(_))   |> (_ => add(""spicy paste"", _))   |> (_ => stir(_, 2))   |> ferment   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;identifiers;;Mental switch at line 15 where the original argument is not used at all.;;;;;;;;;;;;;The proposal;;No problem with that.;Not too sure about the underscore.
1898;Jun 3, 2019 3:09:41 am;Jun 3, 2019 3:26:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559556581_5cf4f1e5d70024.28942111;;;flattened vs proposal 2;5-10 years;Intermediate;TypeScript;;82;integer;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;saltCabbageJar > saltyCabbageJar;175;;;;;;;Line 7;salt(#);148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;232;"const kimchiJar = ""cabbage""      |> wash     |> cut     |> salt     |> add(""spicy paste"", #)     |> stir     |> await     |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;mostly formatting and multiple if statements;;;;;;;;;The proposal;;Actually cool;
1899;Jun 3, 2019 3:16:43 am;Jun 3, 2019 3:38:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559557003_5cf4f38b361c34.84124729;;;nested vs proposal 1;more than 10 years;Beginner;Java;;354;string;"""string""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;",  14);";72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;append ) at the end of line;35;;;;;;;;;;;;;;;;;;;;;244;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2))";a bowl of jogurt with berries;Other - Write In (Required);Intermediate results are not in variables so I have to check many lines and remember what is what;1st looking for return, then analyzing if statments while checking constants from top. Then I have to check what is '_' and analyze all code which is executed to obtain '_'.  I prefer using properly named methods or variables so one can already see what is the intention of a code.;;;;;;;;;;;;;The Status quo;;Nice to write code and correct trivial mistakes but horrible to read and understand.;
1901;Jun 3, 2019 3:31:09 am;Jun 3, 2019 3:51:51 am;Complete;;;English;;1559557869_5cf4f6ed579865.09958108;;;flattened vs proposal 1;3-5 years;Advanced;TypeScript;;66;number;"""object""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;Replace `saltCabbageJar` with `saltyCabbageJar`;109;;;;;;;;;;;;;;;;;;;;;;Line 5;Append a `)`;41;;;;;;;;;;;;;;;;;;;;;211;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;Most of my energy was spent inspecting the structure of the JSON response to find out which branch would be executed. When I'd found the correct branch, I also wanted to double-check what the value was that would be passed to fillBowl (i.e. `{ ready: true }`), which sounded somewhat weird.;;;;;;;;;;;;;Other - Write In (Required);In this case Status quo, primarily because so many lines are enclosed in brackets with underscores. If they'd have been extracted into helper functions, or perhaps even if the arrow functions did not use underscores but names I could understand, I'd probably prefer the Pipeline proposal.;The pipe (`|`) was somewhat annoying, because it requires pressing Shift. Then again, I can imagine getting used to that, just like I'm used to pressing it for brackets or double quotes.;I like this experimental approach!
1902;Jun 3, 2019 3:39:17 am;Jun 3, 2019 4:14:05 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559558357_5cf4f8d532ae36.14621844;;;flattened vs both;more than 10 years;Advanced;Java;;74;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"Fix spelling ""saltyCabageJar""";76;;;;;;;Line 10;? Don't know what the bug is.;142;;;;;;;;;;;;;Line 5;Add another ')' at the end of the line;39;;;;;;;;;;;;;;;;;;;;;1488;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#)   |> #.takeOne() ";;;;;;;;;;;;;;;Pipeline with #;;;;Fine.;I don't like the asymmetry between sometimes writing function name, and sometimes using # or _.  The # proposal seems like it should be a whole new way of writing arrow functions. Not restricted to being just used in pipeline functions.
1906;Jun 3, 2019 3:54:58 am;Jun 3, 2019 4:22:48 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559559298_5cf4fc82563ef5.97847751;;;nested vs both;more than 10 years;Advanced;JavaScript;;104;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;, 14;215;;;;;;;;;;;;;;;;Line 9;await #;765;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));68;;;;;;;;;;;;;;;;;;;;;252;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;;
1908;Jun 3, 2019 4:10:06 am;Jun 3, 2019 4:25:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559560206_5cf5000e37bae1.49543713;;;nested vs flattened;3-5 years;Advanced;TypeScript;;96;number;"""function""";;;"y => add(10, y);";;;;;;Very often;Very often;I like Pattern 2 better;;;;;;Line 1;add numDays as the second parameter to the function call;114;;;;;;;Line 6;replace `saltCabbageJar` with `saltyCabbageJar`;39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); const saltedCabbage = salt(washedCabbage); const jarWithCabbage = new Jar(saltedCabbage); const jarWithCabbageAndSpicyPaste = add(""spicy paste"", jarWithCabbage); const stirredJar = stir(jarWithCabbageAndSpicyPaste); const kimchiJar = await ferment(stirredJar, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Hard to tell which arguments are being passed in where. There's just too much going on to fully understand what's happening.;;It's very clear what each individual piece is doing, and which steps are required to reach the final step.;It's a little verbose - it adds extra lines of code.;;;;;;;
1909;Jun 3, 2019 4:14:30 am;Jun 3, 2019 4:39:37 am;Complete;;;English;;1559560470_5cf5011676be46.54810026;;;flattened vs proposal 2;0-2 years;Advanced;TypeScript;;170;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 5;Rename saltyCabbageJar to `saltCabbageJar`;229;;;;;;;Line 9;use `await #`? Unary operators should be able to work without needing an arg but I can't find where else the issue might be;287;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;314;"const kimchi = await wash(""cabbage"")   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> #.then(x => x.takeOne())";;;;;a bowl of jogurt with berries;Other - Write In (Required);nested ternary operators;Nested ternary operators.;;;;;;;;;The proposal;;It was ok, but I use a custom layout that makes it easier.;
1912;Jun 3, 2019 5:17:05 am;Jun 3, 2019 5:38:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559564225_5cf50fc19748a8.42664981;;;flattened vs proposal 2;more than 10 years;Advanced;TypeScript;;68;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;correct spelling of variable saltyCabbageJar;138;;;;;;;;;124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;222;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt    |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;Nested ifs/conditionals are hard to parse. Also, line 12 is horrible!;;;;;;;;;The Status quo;;Awkward on a macbook;Implicit await would be nice, perhaps something like:  ... |> salt |* ferment(#, 2) |> #.takeOne()
1913;Jun 3, 2019 5:19:22 am;Jun 3, 2019 5:35:57 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559564362_5cf5104a2a8ff2.29386626;;;flattened vs both;more than 10 years;Expert;JavaScript;;67;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;123;;;;;;;Line 9;Change line 9 to await #.takeOne();233;;;;;;;;;;;;;Line 5;add ) to end of line.;41;;;;;;;;;;;;;;;;;;;;;248;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2) |> #.takeOne();";;;;;;;;;;;;;;;Current status quo;;;;easy.;Seems to be more cognitive load trying to keep track of what the chained pipelines are doing. I think for much simpler cases it would be a nice short hand for passing values around, but in more complex situation it feels the same as nested ternary operators.
1914;Jun 3, 2019 5:20:37 am;Jun 3, 2019 5:48:05 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559564436_5cf51094ddc221.96855577;;;nested vs both;5-10 years;Advanced;JavaScript;;140;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;), 2 * 7;230;;;;;;;;;;;;;;;;Line 9;await #;113;;;;;;;;;;;;;Line 5;(_ => new Jar(_));85;;;;;;;;;;;;;;;;;;;;;354;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;it looks pretty semantically;
1915;Jun 3, 2019 5:37:17 am;Jun 3, 2019 6:10:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559565437_5cf5147d40c5b1.54724082;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;114;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar;346;;;;;;;Line 6;remove the line;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;487;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> .takeOne();";;;;;a bowl of jogurt with berries;density of operators;;Using the ternary operator ?: instead of more verbose if/else keywords works fine for shorter/simpler expressions, but not so much when nested with pipelines, lambdas and argument destructuring.;;;;;;;;;The proposal;;Weird, it's not a common combination in any language/technology I've used.;
1917;Jun 3, 2019 5:41:37 am;Jun 3, 2019 6:16:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559565697_5cf51581453a66.55064688;;;nested vs both;5-10 years;Advanced;JavaScript;;313;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 10;), 14;292;;;;;;;;;;;;;;;;Line 9;|> await #;193;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));85;;;;;;;;;;;;;;;;;;;;;917;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;quite easy and understandable;
1918;Jun 3, 2019 5:43:37 am;Jun 3, 2019 6:04:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559565816_5cf515f8ec50a6.69831522;;;nested vs flattened;5-10 years;Intermediate;JavaScript;;98;Number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 1 better;;;;;;Line 11;", 14);";117;;;;;;;Line 6;"const sauerkrautKar = await ferment(saltyCabbageJar, 14);";71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbage = new Ingredient(""cabbage"").wash().cut().salt(); const paste = new Ingredient(""spicy paste"");  const kimichiJar = await new Jar()   .add(cabbage)   .add(paste)   .stir()   .ferment();";;;;;;;;;;"Painful to match up brackets. Not easy to immediately see which function the ""2"" argument belongs to";"It's more natural to read as a sentence.  ""Wash a cucumber, put it in a jar, add water, salt it. Ferment it for 2 days""";Lots of unnecessary lines of code + declared variables that are only used once. This makes your eyes scan back up to the lines before to find the variable confirm the context of the line you're currently reading.;I can ferment as many saltyCucumberJars as I want now. Easier to do console.log debugging;;;;;;;
1919;Jun 3, 2019 5:53:47 am;Jun 3, 2019 6:19:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559566427_5cf5185b30f532.22271623;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;112;3;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;add missing letter 'y' to variable name in ferment() call.;116;;;;;;;Line 5;"I'm not sure I understand the new pound syntax you tried introducing. I think the point is that it's used for functions that take multiple arguments. new Jar probably just needs one, so can remain blank? Also, it doesnt say Jar is a constructor. Maybe just write ""Jar"" as we did with wash,cut,pound?";260;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;208;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> Jar   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne";;;;;a bowl of jogurt with berries;nested pipelines;;pipe syntax is nice to read in a way that it allows reading top to bottom, however the ternary statement confused me. why would you need a nested pipeline, when the existing pipeline already calls the function. maybe this should be null/error, really?;;;;;;;;;The Status quo;;the pipe character is not well placed on a non-US keyboard, though I'm used to lots of finger tricks for special characters;
1920;Jun 3, 2019 5:54:56 am;Jun 3, 2019 6:15:17 am;Complete;;;English;;1559566496_5cf518a02ce520.55458783;;;nested vs flattened;more than 10 years;Advanced;Other - Write In (Required);PHP;46;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Almost never;I like Pattern 1 better;;;;;;Line 11;add ',' to 10, insert new line with day count for 11. (OR: extract salt() to a cabbageJar variable, then make ferment() simple and obvious);210;;;;;;;Line 6;use 'saltyCabbageJar';44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbageJar = new Jar(   salt(cut(wash(""cabbage""))) ); const preparedJar = stir(   add(""spicy paste"", cabbageJar) ); const kimchiJar = await ferment(preparedJar, 2); const kimchi = kimchiJar.takeOne(); // TODO: ""one""??? Refactor PickleInterface";;;;;;;;;;Debugging: never quite sure where 'step into' is going to land, not always sure if I get to inspect the result when the callee returns (esp. for nontrivial return expressions);it's very dense. writing it doesn't require naming every intermediate step.;there are a lot of names to track;it's trivial to debug. whenever you stop at line k, you can trivially inspect the value assigned at line k-1, and you don't revisit line k-1 again to resolve any other expressions;"Formatting is an art, trading off between convenient debugging and dense reading. The less i have to _move around_ in the editor to see what is happening, the better. Unless it's using the ""go to definition"" / ""go back"" commands, where I'm not thinking about what file and line to navigate to.";;;;;;
1921;Jun 3, 2019 5:54:34 am;Jun 3, 2019 6:50:58 am;Complete;;;English;https://planet.mozilla.org/;1559566474_5cf5188ab297e1.84465666;;;flattened vs proposal 1;more than 10 years;Expert;Other - Write In (Required);PHP;299;Number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"await ferment(saltyCabbageJar, 14);";1779;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));57;;;;;;;;;;;;;;;;;;;;;385;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ ?> add(""spicy paste"", _))   |> stir   |> await   |> (_ => _.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);not really related, but the notation (_ => _);- understanding the comment, showing what was returned from the fetch - underscores;;;;;;;;;;;;;The proposal;;fine;I find the underscore slightly confusing, I guess its just a matter of getting used to it. 
1923;Jun 3, 2019 6:13:21 am;Jun 3, 2019 6:26:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559567601_5cf51cf17ecb52.13989900;;;nested vs both;5-10 years;Advanced;JavaScript;;60;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 10;, \n < numDays> \n;188;;;;;;;;;;;;;;;;;????;37;;;;;;;;;;;;;Line 5;);21;;;;;;;;;;;;;;;;;;;;;244;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline with #;;;;ok;we could have somthing like the first proposal but removing the ( ) around functions and having the possibility to delare any variable other than _ for the piped argument, such as   |> r => add('water', r)
1924;Jun 3, 2019 6:17:33 am;Jun 3, 2019 6:41:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559567853_5cf51ded9da7b0.39207350;;;flattened vs proposal 1;3-5 years;Advanced;Other - Write In (Required);PHP;118;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar should be saltyCabbageJar;158;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;285;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt | > (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir | (_ => ferment(_, 2)) |> await | (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;It wasn't that bad. The biggest problem was that I would never write code like that myself (but probably not for the right reasons...). I'm still getting used to the pipe structure, so that slowed me down, but it was pretty readable to me.;;;;;;;;;;;;;The proposal;;It feels weird because the pipe sign isn't easily attainable on an azerty keyboard, but I'm sure I would get the hang of it in a few hours.;I love the idea and thank you for asking for our feedback!
1925;Jun 3, 2019 6:17:49 am;Jun 3, 2019 11:33:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559567869_5cf51dfdc880c1.27284966;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;73;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Using the const saltyCabbageJar;59902;;;;;;;;;;;;;;;;;;;;;;Line 5;Adding a parenthesis;48;;;;;;;;;;;;;;;;;;;;;163;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await";a bowl of jogurt with berries;too many if statements;;"I read it assuming it has no bugs, so I just ""inferred"" some stuff. The fetch + parse part, I'm used to it due to my everyday work, so I directly ""saw"" the ""_"" argument in line 10 as standing in place for the fetch result. Then the most difficult part was parsing the conditions to check which branch was being executed.  All of this, assuming I didn't make a mistake and failed to identify the result xDD";;;;;;;;;;;;;Other - Write In (Required);I like the proposal, but I dislike the use of anonymous functions (while I totally understanding why they are being used).;"Not so easy. I'm using a spanish keyboard, so I have to type < option-1> to get the ""|"" and < shift-< > to get the "">"".";
1930;Jun 3, 2019 6:29:24 am;Jun 3, 2019 6:36:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559568564_5cf520b4b9d823.12108561;;;nested vs both;0-2 years;Intermediate;JavaScript;;54;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 2;;203;;;;;;;;;;;;;;;;;;14;;;;;;;;;;;;;Line 5;;37;;;;;;;;;;;;;;;;;;;;;10;;;;;;;;;;;;;;;;;;;;;
1932;Jun 3, 2019 6:43:46 am;Jun 3, 2019 7:01:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559569426_5cf524120251d2.34900881;;;flattened vs both;3-5 years;Advanced;JavaScript;;155;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;"const sauerkrautJar = awat ferment(saltyCabbageJar, 14);";172;;;;;;;Line 7;salt(#);90;;;;;;;;;;;;;Line 5;(_ => new Jar(_));39;;;;;;;;;;;;;;;;;;;;;231;"const kimchiJar = ""cabbage""  |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#) |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Difficult and unweildy. If I used this in real code, I would have to program a macro for it.;The major issue I see with this proposal is that by the end of a long string of function calls, it's very easy to lose what it was you were operating on. For example, with the # proposal, what is the type of # at the end? is it a string or Jar or something else entirely? You can't tell by looking at the code, you'd have to go through the function defs to figure out what you have there. 
1933;Jun 3, 2019 6:47:16 am;Jun 3, 2019 7:52:11 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559569636_5cf524e4c65cc8.67604284;;;nested vs proposal 1;more than 10 years;Beginner;JavaScript;;145;3;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 2);";420;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ) at the end;560;;;;;;;;;;;;;;;;;;;;;1497;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeone());";a bowl of jogurt with berries;nested pipelines;;The If's brackets and nested pipelines. Almost a triangle of doom;;;;;624;;;;;;;;The proposal;;Ok;I love JS, sÃ³ I love U!
1934;Jun 3, 2019 6:52:22 am;Jun 3, 2019 7:36:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559569941_5cf52615f36605.98022612;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;105;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;fix `saltCabbageJar` to `saltyCabbageJar`;240;;;;;;;Line 9;change `await` to `await #`;1369;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;280;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Inlining so much of the logic made it hard to comprehend the individual units of action. Breaking out the sub-units into their own functions (e.g. `isJogurtReady`, `shouldEatJogurt`, etc) would allow for the pipeline operator to be used in a concise and readable way.;;;;;;;;;The proposal;;It took some getting used to. Two shift-keys, both reached with the pinky, is a little difficult. As someone with a lot of `bash` under my belt, I'm not put off by the pipe symbol alone, but that in combination with the `>` was a little rough.;I make heavy use of `lodash/fp` in my own JS code, especially the `flow` function, which allows for a similar pipeline-like way of chaining discrete functions together. I'm a big fan of this proposal, and would probably use it regularly if it were accepted.
1935;Jun 3, 2019 6:54:57 am;Jun 3, 2019 7:21:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559570097_5cf526b198ea17.52086500;;;flattened vs both;0-2 years;Intermediate;JavaScript;;181;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 5;return this from Jar.add;712;;;;;;;Line 5;Add # syntax??;65;;;;;;;;;;;;;Line 1;--;51;;;;;;;;;;;;;;;;;;;;;280;"const kimchi =   'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 14))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Not so hard â will get used to it.;
1937;Jun 3, 2019 7:00:34 am;Jun 3, 2019 7:41:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559570433_5cf52801dd0dc9.04410916;;;nested vs proposal 1;more than 10 years;Intermediate;Other - Write In (Required);php;140;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;),2;111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));64;;;;;;;;;;;;;;;;;;;;;379;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;The pipelines with return statements seemed more confusing than in assignment.  I think it's because the final returned value comes from the furthest away function, or maybe when it wraps to a new line.;;;;;183;;;;;;;;The proposal;;A little clunky at first but no more difficult than typing a fat arrow function. ;
1942;Jun 3, 2019 7:19:35 am;Jun 3, 2019 7:31:00 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559571575_5cf52c775b4c36.74925643;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;8;"""number""";"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";28;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));16;;;;;;;;;;;;;;;;;;;;;99;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""salty paste"", _)   |> stir   |> (_ => ferment(_ 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;- too many condition statements - inconsistent indentation;;;;;;;;;;;;;The proposal;;It's alright on a MacOS french keyboard;Proposal doesn't seem natural at first sight, but is easy to use with some typing and experience. I like the cascading style. However underscore variable naming looks like a convention and maybe something could be improved to handle currying easily.
1943;Jun 3, 2019 7:20:23 am;Jun 3, 2019 7:46:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559571623_5cf52ca70732c3.21111831;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;121;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);350;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));59;;;;;;;;;;;;;;;;;;;;;460;"const kimchiJar =  |> wash(""cabbage"") |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;Scanning back to find boolean values - would have preferred these be in a predicate defined before the pipeline  The nested pipeline was new but easily unerstandable.  line 14-15 pipes should be vertically aligned if possible so we can easily spot that they go together;;;;;;;;;;;;;;;nice - shift for both symbols  is easier than => which requires shift for > but not =;I'm very in favor of this proposal!
1944;Jun 3, 2019 7:24:32 am;Jun 3, 2019 7:40:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559571872_5cf52da0cf21c7.26986221;;;nested vs both;5-10 years;Advanced;JavaScript;;112;int;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 10;,14);102;;;;;;;;;;;;;;;;Line 5;|>(#)=> new Jar(#);143;;;;;;;;;;;;;Line 5;|> (_=>new Jar(_));50;;;;;;;;;;;;;;;;;;;;;244;"const kimchi = ""cabbage"" |> wash |> cut |> salt |>(_=> new Jar(_)) |>(_=>add(""spicy paste"",_)) |>stir |>(_=>ferment(_,2)) |> await |> (_=>_.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Strange, but I think it's because of the non-english keyboard (Portugal);"Using # (or any other character) for the pipeline I think will increase confusion. The ""simple"" pipeline seems more straight forward to understand."
1945;Jun 3, 2019 7:28:37 am;Jun 3, 2019 7:56:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559572117_5cf52e9541f792.41307711;;;flattened vs proposal 1;3-5 years;Expert;TypeScript;;185;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Should be saltyCabbageJar not salt;458;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a bracket at the end;32;;;;;;;;;;;;;;;;;;;;;24;;a bowl of jogurt with berries;too many if statements;;The pipeline operator initially makes me think the code is 'the wrong way round'. I think I would sometimes use the pipeline operator, but not in cases like this;;;;;;;;;;;;;The Status quo;;I didn't type it;I think it would be useful where functional composition is used - like in React HOCs, but that pattern is less used these days....
1946;Jun 3, 2019 7:32:47 am;Jun 3, 2019 7:47:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559572367_5cf52f8f13e335.79135866;;;nested vs proposal 2;0-2 years;Beginner;TypeScript;;146;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";;;;;;;;;;Rarely;;;;I like the status quo better;Line 3;;42;;;;;;;;;;;;;;;;Line 8;;17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;142;;;;;;a bowl of jogurt with berries;identifiers;;;;;;;;;;;The Status quo;;;
1949;Jun 3, 2019 8:17:03 am;Jun 3, 2019 8:45:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559575023_5cf539ef1402a1.40388367;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;201;Number;;"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;typo saltyCabbageJar, not saltCabbageJar;148;;;;;;;Line 9;await #;192;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;161;"const kimchi = ""cabbage"" |> cut |> salt |> new Jar(#) | add('spicy paste', #) | stir | ferment(#, 2) | await #";;;;;a bowl of jogurt with berries;Other - Write In (Required);line 12;;;;;;;;;;The proposal;;ok, comes naturally;I see two advantages. Reasoning about a pipeline is more straighforward than reasoning about nested functions. Less clutter by removing useless temporary variables. What I wonder is how will this integrate with debuggers ? How do I set a breakpoint (is that at the entrance or at the exit of the pipe segment ?). What will the debugger show ?
1952;Jun 3, 2019 8:37:12 am;Jun 3, 2019 9:03:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559576232_5cf53ea87634d3.06587746;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;54;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 1;Add 14 as the end parameter to ferment();124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add missing ) to the end of line 5;41;;;;;;;;;;;;;;;;;;;;;143;"const kimchiJar = ""cabbage""   |> cut   |> salt   |> (_ => new jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;identifiers;;I just started top to bottom, but keeping track of all of the values slowed me down. By the time I reached the conditions I had to go back and check the values of everything.  I actually had more trouble with the intentionally bad formatting than the pipe operator. ;;;;;;;;;;;;;The proposal;;;"I almost never see or write code as dense as what you're calling the ""status quo"". I'd normally assign many of those intermediate values to variables so I don't have to do so much parenthesis tracking.  It even looks like the final example on this page is wrong, you have an extra `)` after the 2. At first I counted the outer parens and determined 2 is a parameter for salt, but that doesn't agree with the pipeline below. So I typed the example into my normal editor to discover the syntax error."
1953;Jun 3, 2019 8:49:56 am;Jun 3, 2019 9:00:23 am;Complete;;;English;;1559576996_5cf541a45cc476.71350188;;;flattened vs both;5-10 years;Advanced;JavaScript;;89;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 7;await that line too?;105;;;;;;;Line 10;add another await?;86;;;;;;;;;;;;;Line 5;Add closing paren;50;;;;;;;;;;;;;;;;;;;;;135;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;I copy pasted because it was repetitive.;I think I could get used to either, would be interested to see how it works and feels with more promises in the mix.
1954;Jun 3, 2019 8:57:49 am;Jun 3, 2019 9:59:11 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559577469_5cf5437d284f01.95559102;;;flattened vs both;3-5 years;Advanced;TypeScript;;201;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 4;"const cabbageJar = Jar(crushedCabbage);";930;;;;;;;Line 5;"|> Jar(#);";140;;;;;;;;;;;;;Line 5;"|> (_ => Jar (_)); // Calling Jar as function, because it's not a constructor";55;;;;;;;;;;;;;;;;;;;;;1391;"const kimchi = wash('cabbage') |> cut |> salt |> Jar |> add('spicy paste, #) |> stir |> ferment(#, 2) |> await |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;I like it. Seems intuitive. ;In the example stack error, when using pipeline with #, the error was `# is undefined`. This seems hard to think of, because it was not easily identify where the error was, as it had 5 #s in 8 LOC.  It would be nice if you can use somekind of identifier for the #, something like:  ``` const pickle = wash ('cucumber')  |> new Jar(#washed) ``` This way, if something is wrong with the variable, in the stack it would show `#washed is undefined`.   I don't like the `|> (_=> new Jar(_))` as it is creating a new function, and seems like we are trying to avoid that, but I understand that this would allow to use any name as an identifier, like `|> (washed => new Jar(washed))`.
1955;Jun 3, 2019 9:04:16 am;Jun 3, 2019 9:29:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559577856_5cf5450098f2c6.37749556;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;313;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);139;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));66;;;;;;;;;;;;;;;;;;;;;257;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;"the return statements from the if were a little surprising, but if I thought of them as if they were promises, they made sense.  Line 15 I found the most confusing: why is this  `|> (jogurt => add('berries"", jogurt));`  rather than  `|> (_ => add(""berries"", _));` ? I guess the underscore can be replaced by a named variable if you want, but it's not necessary to do so as this is a source of potential bugs?";;;;;;;;;;;;;The proposal;;Nice. I already have a ligature in my font that turns them into triangles (from elixir development), so they're easy to identify.;I'm already used to it. When can I have this?!
1957;Jun 3, 2019 9:14:50 am;Jun 3, 2019 9:35:51 am;Complete;;;English;;1559578490_5cf5477a74f0c5.46080010;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;101;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";205;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));49;;;;;;;;;;;;;;;;;;;;;346;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste""))   |> (_ => stir(_))   |> await   |> (_ => ferment(_))   |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;I think I may have flipped where await should come in the order of operators. Also, the nested pipes are super easy to miss.;;;;;;;;;;;;;The proposal;;Not difficult. It will take some getting used to, though, but that's how it was for me with => as well.;Honestly, the pipe operator looked very foreign at first, but the use cases presented really pointed out its strengths. I wonder how this would stack up against a native `compose` or `pipe` method.
1958;Jun 3, 2019 9:23:12 am;Jun 3, 2019 10:07:32 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559578992_5cf5497037c149.66493926;;;nested vs proposal 1;more than 10 years;Advanced;Python;;61;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;add `, 14` as the final parameter to ferment;88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add missing "")"" parenthesis at the end of the line";1448;;;;;;;;;;;;;;;;;;;;;131;"const kimchi = ""cabbage""    |> wash    |> cut    |> salt    |> (_ => new Jar(_))    |> (_ => add(""spicy paste"", _))    |> stir    |> (_ => ferment(_, 2))    |> await    |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;Read the code line by line, statement by statement keeping track of variable/return types.  The long if conditions slowed me down as I had to scan far to the left, and keep refering to what the variable values were. And I almost skipped over line 15 since the line before it looks like it's complete.;;;;;;;;;;;;;The proposal;;Slightly tedious on a US keyboard, but worth the readability increase.;I would prefer the status quo with more intermediate variables because typing the (_ => ... _ ) is tedious
1959;Jun 3, 2019 9:24:23 am;Jun 3, 2019 9:42:34 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559579063_5cf549b79b83d8.45555882;;;nested vs proposal 2;0-2 years;Advanced;TypeScript;;73;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 10;Add an argument for numdays;138;;;;;;;;;;;;;;;;Line 9;await needs a # representing the promise;37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;244;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy taste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;I wasn't really slowed down, the formatting is I think the hardest part along with the ternary ops. ;;;;;;;;;The Status quo;;IDEs/Editors would handle completing this for most so while new I didn't think much about it. ;I think there is something useful in this proposal but I think it adds complexity in understanding for ease of use. I think there are formatting solutions to make the status quo as succinct as the proposal. 
1961;Jun 3, 2019 9:25:05 am;Jun 3, 2019 10:06:36 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1559579104_5cf549e0f12a33.74217462;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;181;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;, 14);200;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));87;;;;;;;;;;;;;;;;;;;;;362;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (saltySlices => new Jar(saltySlices))   |> (jar => add(""spicy paste"", jar)   |> stir   |> (jar => ferment(jar, 2))   |> (kimchiJar => kimchiJar.takeOne())";a bowl of jogurt with berries;inconsistent style;;The code my colleges are writing is sometimes much worse than this one. This code is not hard to read;;;;;;;;;;;;;Other - Write In (Required);smart pipelines with placeholders;"I'm using a non-standard keyboard (Truly Ergonomic), and as for me it's ok - not harder than to type ""=>""";So many parenthesizes! After typing a little of this I understand that smart pipelines are not just easier to read but also much easier to write  Or at least it needs to have partial application
1963;Jun 3, 2019 9:39:14 am;Jun 3, 2019 10:04:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559579954_5cf54d3278e959.59514699;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;126;number;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;120;;;;;;;Line 9;`await #` instead of `await`;78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;245;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Kept having to refer back the the long+complex conditional statement to remember which fields were relevant. Had to refer back to line 7 from line 9 to remember what # was referring to in this case. Nested pipelines were intuitive in this case, particularly with this spacing, but would have make any father steps in the outer pipeline difficult to understand because of the fact that # could be different objects depending on the conditional.;;;;;;;;;The proposal;;;The proposal is much easier to read. It may be harder to write or debug, but I'm not sure.
1965;Jun 3, 2019 10:16:35 am;Jun 3, 2019 10:49:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559582195_5cf555f377d5d2.66932005;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;100;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"Correct the spelling error. ""saltCabbageJar"" should be ""saltyCabbageJar.""";246;;;;;;;Line 9;await #;219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;169;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;"Primarily line 8. Once I processed the first half of it as ""If I have ready jorgurt and it's breakfast,"" the second half, as well as line 11, went a bit quicker; I could read in one chunk. Line 12 looks a little wonky but it's not too terrible.";;;;;;;;;The proposal;;Not the quickest operator to type, but not terrible.;
1966;Jun 3, 2019 10:16:41 am;Jun 3, 2019 11:08:12 am;Complete;;;English;;1559582201_5cf555f947a616.72047648;;;flattened vs proposal 1;0-2 years;Beginner;JavaScript;;1379;number;"""function""";;;;;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 7;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";182;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));70;;;;;;;;;;;;;;;;;;;;;566;"const kimchi = ""cabbage""      |>wash      |> (_ => new Jar(_))      |> (_ => add(""water"", _))      |> salt      |> (_ => add(""spicy paste"", _))      |> (_ => stir(_))      |> (_ => ferment(_, 2))      |>await      |> (_ => takeOne());";a bowl of jogurt with berries;whitespace formating;;Read top to bottom, then back to the top to check the const again.  Slowdowns were experienced reading and rereading the conditionals to make sure the logic was straight in my head.;;;;;;;;;;;;;The proposal;;It was a little awkward initially but not too bad. ;As a beginner I found the structure of the proposal appealing.  The code was easier to follow and write.  When you first look at it it does seem unreadable, but when you understand the pipe function it is much easier.
1967;Jun 3, 2019 10:18:58 am;Jun 3, 2019 11:02:00 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559582338_5cf5568211a1c1.31816082;;;nested vs both;5-10 years;Expert;JavaScript;;109;;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;Line 11;Add number if days to ferment call;283;;;;;;;;;;;;;;;;Line 10;|> (_ => _.takeOne());374;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));22;;;;;;;;;;;;;;;;;;;;;1033;"const ferment2Days = _ => ferment(_, 2) const createJar = _ => new Jar(_) const addSpicyPaste => add const kimchiJar = ""cabbage"" const takeOne => _ => _.takeOne()   |> wash  |> cut  |> createJar  |> add.bind(""spicy paste"")  |> stir  |> ferment2Days  |> await  |> takeOne";;;;;;;;;;;;;;;Pipeline;;;;easy;Understanding a new operator like `|>` is pretty straight forward.  It takes the result of an expression on the left, and uses it to perform an operation on the expression on the right (calls it as a function).  Nothing outside the operator expression needs to know anything about the context under which it is operating.  Introducing `#` makes things a lot more complicated.  At the surface level it is easy to use, but makes the language more complicated to reason about.  It introduces a weird new expression level scope for the `#` pseudo variable.   This is a complicated change that seems like its adding more complexity than this simple feature is worth.  If JS wanted to add a generic expression level variable scope, or operator context or some other construct that made sense outside the context of the specific pipeline operator use case it might make sense. 
1972;Jun 3, 2019 11:03:03 am;Jun 3, 2019 11:16:34 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559584982_5cf560d6df9f43.92057136;;;nested vs proposal 2;5-10 years;Beginner;Python;;92;int;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;Add the missing argument for ferment;121;;;;;;;;;;;;;;;;Line 10;remove the # character;58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;69;;;;;;;density of operators;;The wall of symbols.;;;;;;;;;The Status quo;;;
1974;Jun 3, 2019 11:08:31 am;Jun 3, 2019 12:05:27 pm;Complete;;;English;https://wiki.mozilla.org/WeeklyUpdates/EmergingTechnology;1559585311_5cf5621f52b0b6.41082583;;;nested vs proposal 2;5-10 years;Intermediate;C++;;115;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;"add "", 2"" between lines 10 and 11";173;;;;;;;;;;;;;;;;Line 10;"change line 10 to be ""sauerkraut.takeOne()""";161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;93;???;;;;;a bowl of jogurt with berries;Other - Write In (Required);nested ternary operators;;;;;;;;;;The proposal;;The pipe character feel strange to type consistently but I could get used to it;
1975;Jun 3, 2019 11:18:45 am;Jun 3, 2019 12:41:13 pm;Complete;;;English;;1559585925_5cf56485120842.18507803;;;nested vs both;more than 10 years;Expert;JavaScript;;150;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 11;pass 14 as second arg on line 11 (or line 10 I guess);1254;;;;;;;;;;;;;;;;Line 10;pass # to wait e.g. `|> await #`;572;;;;;;;;;;;;;Line 5;add another parens at end of line 5;224;;;;;;;;;;;;;;;;;;;;;1351;"// 1. Just okay // I'm not a big fan of the introduction of new syntax to represent // the return object from the stream. const kimchi = ""cabbage""      |> wash      |> cut      |> salt      |> new Jar(#)     |> add(""spice it up!"", #)      |> stir      |> ferment(#, 2)      |> await #  // 2. Worst // I like this approach the least, it's pretty verbose. However, it encourage decoupling // of logic as seen in the third option  const kimchi2 = ""cabbage""      |> wash      |> cut      |> salt      |> _ => new Jar(_)     |> _ => add(""spice it up!"", _)      |> stir     |> _ => ferment(_, 2)      |> await  // 3. imo the best option // I like this best because it encourages explicit and decoupled functional // programming, which helps with testing and readability. Also, we only introduce // the pipe syntax and not new functionality (implicit use of await keyword) or // additional new syntax (the pound #). const fillAJar = vegetable => new Jar(vegetable) const spiceJar = jar => add(""spicy"", jar) const fermenter = (days) => (jar) => ferment(jar, days) const waitForit = async p => await p  const best = ""cabbage""     |> wash      |> cut      |> salt      |> fillAJar     |> spiceJar     |> stir     |> fermenter(2) // ferment everything for 2 days     |> waitForit";;;;;;;;;;;;;;;Other - Write In (Required);"I'd prefer the pipe always passes previous argument to next function - e.g. `const waitForIt = async p => await p; const result = ""help"" | helpIsComing |> waitForIt`";;;Nice actually.;"I'd love to encourage more explicit function writing. Each stage of a pipe is super important, and I'm not sure encouraging anonymizing the stages with # is a good idea.  Also, how does one add typing or hinting to the # proposal? `|> #: Jar ferment(#, 2)` seems pretty odd. Maybe better to be super clear. `|> (_: Jar => ferment(_, 2)` or event better `fermenter = (jar: Jar) => ferment(jar, 2); |> fermenter;` etc"
1979;Jun 3, 2019 11:13:33 am;Jun 3, 2019 11:52:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559585613_5cf5634d49e6e7.60139631;;;flattened vs proposal 2;more than 10 years;Intermediate;Other - Write In (Required);C#;125;"""number""";"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkraut = await ferment(saltyCabbageJar, 14);";199;;;;;;;Line 9;await #;78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;78;;;;;;a bowl of jogurt with berries;nested pipelines;;line 8: making sense of logical operators line 10: not sure what it really does;;;;;;;;;The Status quo;;;
1980;Jun 3, 2019 11:36:48 am;Jun 3, 2019 12:05:10 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559587008_5cf568c0206919.74434397;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;175;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;",2);";132;;;;;;;;;;;;;;;;Line 9;await #;86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;308;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar (#) |> add (""spicy paste"", #) |> stir |> ferment (#, 2) |> await #";;;;;a bowl of jogurt with berries;density of operators;;self-executing arrow function was tricky;;;;;;;;;The proposal;;it was hard at first, but after couple of minutes I can do it without any problems;
1981;Jun 3, 2019 11:46:29 am;Jun 3, 2019 12:09:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559587589_5cf56b052f4d05.03399777;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;97;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);Async and functions are common for me, but I work in an environment that writes JS in as functional a way as possible. So I don't encounter classes/constructors/the new keyword all that often in JS these days.;;;I like the proposal better;;;;;;;;;;Line 6;"""saltCabbageJar"" -> ""saltyCabbageJar"" (there is a typo in the variable name)";131;;;;;;;Line 8;"We're using await, which implies async behavior (as does the return of a Promise), but we haven't used the async keyword anywhere to specify that our function is async. So perhaps we'd need to use it like ""|> async ferment(#, 14)""";317;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;250;"const kimchi = ""cabbage""          |> wash          |> cut(#)          |> salt(#)          |> new Jar(#)          |> add(""spicy paste"", #)          |> stir(#)          |> ferment(#, 2)          |> await #          |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;I only really had to slow down with the last couple of lines -- lines 11-13. I dislike deeply nested conditional expressions, but I got through it fine. When I got to the false condition of the ternary, though, the inconsistent style, a second nested ternary, and an IIFE threw me for a little bit, and I had to stop and consider whether those lines even needed to be read to get my answer, when I normally wouldn't have to.;;;;;;;;;The proposal;;Pretty easy. I've been working a bit in E lixir at my job, so I'm used to |> now.;Please please please make this a reality. I love it!
1984;Jun 3, 2019 12:18:39 pm;Jun 3, 2019 12:49:32 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559589518_5cf5728ee8c427.98266330;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;248;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);our team would use ramda pipe or sanctuary pipe. And it is OFTEN;;;I like the proposal better;Line 11;pass a number of days to ferment, or change ferment to be curried;137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a closing paren;146;;;;;;;;;;;;;;;;;;;;;331;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> cabbage => new Jar(cabbage)   |> jar => add(""spicy paste"", jar)   |> stir   |> jar => ferment(jar, 2)";a bowl of jogurt with berries;Other - Write In (Required);"not naming variables other than with ""_""";the indentation of the pipes in 14 and 15 is pretty hard to read. I think a lot of the readability could be improved by just having a helper parseResponse function.  Another big improvement IMO would be to not only name the arguments to the anonymous functions in the pipeline, but to allow inline destructuring like any other arrow fn  Short hand for calling a method on some object (toJson for instance) would no doubt cutdown on the boilerplate of having object patterns mixed in with functional ones;;;;;;;;;;;;;Other - Write In (Required);"mixing OO and other non-functional JS elements like toupling of params in fns leads to a lot of (_ => foo(""bar"", _)). We should really think about how to curry by default with arrow functions if this is going to become part of the language ";No problems with it. it's pretty common in other langs and I think overall consistency is good. No major ergonomic issues IMO;I know I'm repeating myself here, but...  The introduction of arrow fns, and now the proposal for a pipe operator to me are strong steps towards better JS code. One of the issues though is that the old features still exist. I think a LOT of the readability issues are going to come from the lack of default function currying in JS and the intermingling of Classes. If we could deprecate classes and curry functions by default, I think then we'd really be on a decent path
1987;Jun 3, 2019 12:40:16 pm;Jun 3, 2019 12:46:55 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559590816_5cf577a0a18cf9.29338224;;;nested vs flattened;3-5 years;Expert;JavaScript;;67;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 10;add numOfDays to ferment;163;;;;;;;;;10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1988;Jun 3, 2019 12:41:39 pm;Jun 3, 2019 1:02:54 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559590898_5cf577f2e94291.11391046;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;287;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the status quo better;Line 11;", 14) ;";161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));48;;;;;;;;;;;;;;;;;;;;;278;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy pasteÂ¨, _) |> stir |> (_ => ferment(_, 2);";a bowl of jogurt with berries;inconsistent style;;- Constants (need to look up the constant to figure out the boolean expression) - The return expression wasn't styled correctly.;;;;;;;;;;;;;The proposal;;well, in Latin American keyboards is hard until you get used to.;
1989;Jun 3, 2019 12:55:16 pm;Jun 3, 2019 1:16:29 pm;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1559591716_5cf57b248fe304.14337562;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;226;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;156;;;;;;;;;;;;;;;;Line 9;|> await #;109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;229;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2);  const kimchi = kimchiJar.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Mainly the ternary operator with this complex conditions. Other than that, it was fairly straightforward.;;;;;;;;;The proposal;;It was ok.;Come kind of currying support would be nice to have.
1991;Jun 3, 2019 1:05:58 pm;Jun 3, 2019 1:34:04 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559592358_5cf57da6162511.65058812;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;149;Number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the status quo better;Line 11;Add 14 as second parameter for ferment;447;;;;;;;;;;;;;;;;Line 9;await ferment(...) perhaps;227;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;287;Prefer # notation;;;;;a bowl of jogurt with berries;too many if statements;;Ternary operators with complex expressions based on local variables and result from json;;;;;;;;;The proposal;;It's like chain of promises, so there is no much troubles. But syntax is too syntetic.;
1992;Jun 3, 2019 1:11:03 pm;Jun 3, 2019 1:25:09 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559592663_5cf57ed75de2b4.82730104;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;134;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;add missing parameter;118;;;;;;;;;;;;;;;;Line 9;await #;57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;too many if statements;;nested ternaries :(;;;;;;;;;The proposal;;not worse than the OR operator!;it's a great proposal!! :)
1993;Jun 3, 2019 1:30:56 pm;Jun 3, 2019 1:44:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559593856_5cf5838089ca05.37093918;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;62;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);301;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));56;;;;;;;;;;;;;;;;;;;;;173;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ferment |> await";a bowl of jogurt with berries;identifiers;;;;;;;;;;;;;;;The proposal;;;
1995;Jun 3, 2019 1:42:38 pm;Jun 3, 2019 1:55:18 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559594558_5cf5863e35d3c8.58533048;;;flattened vs both;5-10 years;Advanced;JavaScript;;51;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;178;;;;;;;Line 10;Wrap in small arrow function;151;;;;;;;;;;;;;Line 5;Add ) to the end of the line;57;;;;;;;;;;;;;;;;;;;;;115;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await fermet(#) ";;;;;;;;;;;;;;;Pipeline with #;;;;;
1996;Jun 3, 2019 1:57:15 pm;Jun 3, 2019 2:25:21 pm;Complete;;;English;https://hacks.mozilla.org/;1559595435_5cf589abd3c2c9.40410781;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;41;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"changing ""saltCabbageJar"" for ""saltyCabbageJar""";251;;;;;;;;;;;;;;;;;;;;;;Line 5;"removing initial ""(""";106;;;;;;;;;;;;;;;;;;;;;396;"const kimichiJar = ""cabbage"" |> wash |> cut |> salt |> _ => new Jar(_) |> jar => add(""spycy paste"", jar) |> _=> ferment(_,2) |> await |> _ => _.takeOne();";a bowl of jogurt with berries;inconsistent style;;Long conditions in the if's were annoying. The pipe in one line (reminding the terminal pipe) was actually easier to read than the vertical one.;;;;;;;;;;;;;The proposal;;"In spanish keyboard type ""|>"" implies LAlt + 1 and LShift + > really prefer something like any other combination. In british keyboard not so bad.";I cannot quite like the parentesis in the inline functions.
2000;Jun 3, 2019 2:49:14 pm;Jun 3, 2019 3:10:21 pm;Complete;;;English;https://hacks.mozilla.org/;1559598554_5cf595da5c4fc1.08250954;;;flattened vs both;5-10 years;Intermediate;JavaScript;;133;function;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 1;remove the quotes;125;;;;;;;Line 7;change to salt(#);184;;;;;;;;;;;;;Line 9;change _.takeOne() to takeOne();73;;;;;;;;;;;;;;;;;;;;;434;"const greens = ""cabbage"" |>wash(greens) |>cut(greens) |>salt(greens) |>jar(#) |>add(greens,#) |>stir(#) |>ferment(#, 2)";;;;;;;;;;;;;;;Pipeline with #;;;;"Lots of ""\>"", it was a little tough.";
2002;Jun 3, 2019 3:53:24 pm;Jun 3, 2019 4:15:32 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559602404_5cf5a4e45ba819.30067557;;;flattened vs proposal 2;3-5 years;Expert;TypeScript;;227;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"await fermet(saltyCabbageJar, 14);";148;;;;;;;Line 9;await #;102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;220;"const kimchi = cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Starting on line 8, the parenthesis and whitespace/indentation is asinine. Also, it'd be slightly easier to read if line 10 were pulled up onto line 9.  I just noticed the IIFE on line 12. Who hurt this developer?;;;;;;;;;The proposal;;Been waiting for the pipeline operator for years. Had never seen the placeholder (#) concept in JS or any other language until this survey. I love it.;I want all of this. Plz proceed 2 proposal immediately.
2003;Jun 3, 2019 4:43:25 pm;Jun 3, 2019 5:04:57 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559605405_5cf5b09d69b437.50532798;;;nested vs both;more than 10 years;Beginner;C++;;174;Number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;",14);";142;;;;;;;;;;;;;;;;Line 9;|> await #;141;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));93;;;;;;;;;;;;;;;;;;;;;238;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;"I keep typing ""|.""   I prefer to avoid using shift because I tend to press it out of phase.";
2005;Jun 3, 2019 5:21:21 pm;Jun 3, 2019 5:39:02 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559607681_5cf5b981b0ea86.08370819;;;nested vs flattened;more than 10 years;Intermediate;Python;;185;"""number""";"""function""";;;"y => add(10, y);";;;;;;Sometimes;Almost never;I like Pattern 1 better;;;;;;Line 10;, 14);155;;;;;;;Line 6;saltyCabbageJar;107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const initialPrepWork = salt(cut(wash(""cabbage""))); const packedJar = add(new Jar(initialPrepWork), ""spicy paste""); const readyJar = stir(packedJar); const finishedJar = await ferment(readyJar, 2);  const kimchi = finishedJar.takeOne();";;;;;;;;;;"Needs to be more like Lisp for it to be easily readable; readability.";It is terse, and breaking it up is easy.;Too many steps for something very simple. Will increase the gunk on the screen when my attention could be better spent.;It is easier to follow than Pattern 1 from first glance due to its linearity.;Something better than Pattern 1 & 2 needs to be introduced to handle this kind of structuring. This is fairly easily expressed in Lisp languages.;;;;;;
2006;Jun 3, 2019 5:32:40 pm;Jun 3, 2019 6:02:40 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559608360_5cf5bc28484414.28046381;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;127;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Other - Write In (Required);I frequently see people assigning the return values of multiple function calls to variables in series so as to avoid nesting hell.;;;I like the proposal better;Line 11;Add the missing numdays argument;131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing parens. Holy cow is this easier to read. I love how you can add an await to the pipe.;107;;;;;;;;;;;;;;;;;;;;;537;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> ferment   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);The conditionals on line 13 were too long.;I know people who would write this kind of code: bad tabbing, pyramids of doom, too much logic on one line, an addiction to verbose anonymous functions. They'd be writing in this style with or without pipelines.;;;;;;;;;;;;;The proposal;;"Even easier than typing ""=>"".";There are a lot more functional gems to bring to JavaScript. Illegitimi non carborundum.
2008;Jun 3, 2019 6:19:04 pm;Jun 3, 2019 6:50:26 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559611144_5cf5c7083396c4.47742835;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;280;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";264;;;;;;;Line 9;|> await #;400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;293;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;The obfuscation in line 12 took me some time to understand.;;;;;;;;;The Status quo;;It was OK. I worry about error handling and reusing intermediate results.;
2009;Jun 3, 2019 6:30:19 pm;Jun 3, 2019 6:53:54 pm;Complete;;;English;android-app://com.innologica.inoreader;1559611819_5cf5c9ab613f20.30426728;;;nested vs both;more than 10 years;Advanced;JavaScript;;123;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 11;", 2);";113;;;;;;;;;;;;;;;;Line 5;Follow the streamlined proposal;285;;;;;;;;;;;;;Line 5;|> (_ => new Jar (_));119;;;;;;;;;;;;;;;;;;;;;374;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment (_, 2))   |> await   |> (_ => _.takeOne ());";;;;;;;;;;;;;;;Pipeline;;;;On a mobile keyboard, horrible... but then any coding task is challenging on a mobile on-screen keyboard. ;
2011;Jun 3, 2019 7:32:16 pm;Jun 3, 2019 7:49:00 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559615536_5cf5d83052f851.56471417;;;nested vs flattened;more than 10 years;Expert;TypeScript;;288;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;), 14;220;;;;;;;Line 6;saltyCabbageJar;178;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2012;Jun 3, 2019 7:33:30 pm;Jun 3, 2019 8:08:49 pm;Complete;;;English;https://hacks.mozilla.org/;1559615610_5cf5d87a6cb3a7.00573745;;;nested vs proposal 2;5-10 years;Expert;TypeScript;;90;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;"Append "",\n\t14"" to the end of line 10";209;;;;;;;;;;;;;;;;Line 9;"replace ""await"" with ""await #""";139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;465;"const add2 = (x) => (y) => add(x, y); const jar = (x) => new Jar(x); const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> jar |> add2(""spicy paste"") |> stir |> ferment |> await const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;"- Cultural: Spelling of ""jogurt"" vs ""yogurt"" is strange to this American. :) - My internal parser came to a full stop on line 12 with the IIFE (causing inconsistent style) which was employed in order to use the destructuring operator. - I was actually confused at the end because I didn't know what was ""returned"" -- Was this expression employed for its side effects, or did it return a value? The ""fillGlass()"" and ""add()"" functions were not defined so the intent was unclear. - My status quo is currently to assign values to variables every couple operations, and in a code review I would advise the programmer to do that here as well. Besides cutting down on the length of the statement, breaking down long operations allow you to place debugger breakpoints more easily.";578;;;;;;;;The proposal;;"On an en-US keyboard: Slightly awkward due to the lateral movement of the right hand. I also kept typing ""\>"" or ""|."". In time I might get used to it.";"I love the concept of a pipeline operator. I miss it greatly from using Bash.  With a pipeline operator we might see more curried functions, as ""add(""foo"", #"")"" seems wrong to me. I don't like either placeholder solution.  Between the two placeholders, I think I prefer the fat-arrow solution because even though it's more legible, I know what's going on. The ""#"" placeholder is its own separate feature and it would take time for me to get used to it. I'm not sure we need a *third"" way of making something into a function.  In a code review I would still advise cutting down long chains for two reasons: First, it increases legibility because being forced to name a variable helps document what the code is doing; and second, it creates more opportunities to add breakpoints between operations when debugging."
2016;Jun 3, 2019 10:07:30 pm;Jun 4, 2019 12:05:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559624850_5cf5fc92aff099.46453687;;;nested vs proposal 1;5-10 years;Intermediate;Other - Write In (Required);C#;108;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;"Change the line from "")"" to ""), 14"".";204;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add a "")"" to the end of the line.";48;;;;;;;;;;;;;;;;;;;;;364;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);"A bunch of little things, but I guess one I could point out was that the lambda parameter ""jogurt"" looked too much like ""_.jogurt"" (my mind was sort of ignoring the ""_."" part after a while).";"There were a some things that had nothing to do with pipelines, but also some things that did.  First off, I panicked a little when I saw the ""cors"" thing since I don't know anything about web servers. I also don't know anything about modern AJAX, so I just ignored the ""_.json()"" thing and figured that by the end of line 9, the code would produce an object I could actually start reasoning about. I was also confused as to how I'd know what the result of the AJAX call was because I didn't notice the comment with the JSON literal.  I recognized the whole ""idk && idk.mem"" idiom for handling if ""idk"" is possibly undefined/null, so that sped up reading those parts. I noticed on Line 13 how the ""ready"" test was unnecessarily repeated; I figured that was just to make the code more ugly, but in a real world situation, it might make me read the code more carefully to check if I misread it or if there's a subtle gotcha I missed.  As for pipelines, I had to think about which order ""fillBowl"" and ""add"" were. That is, to determine whether it was ""fillBowl(add(""berries"" , _.jogurt))"" or ""add(""berries"", fillBowl(_.jogurt))"" (I determined that it's the second one).  Also, I wasn't thinking too hard about how the code mapped to the problem domain, so I didn't realize until after answering the question that ""|> fillBowl"" shifted the subject of the pipeline from the jogurt to the bowl, and that ""add(""berries"", ...)"" was adding to the bowl and not to the jogurt, so the berries and the jogurt were equal participants in the bowl. I think the pipeline is confusing if it shifts the subject like this. (By subject, I mean the mental translation to the problem domain, not object identity; creating a new object that represents the same thing, as in the Decorator pattern. is fine.) FWIW, I'm familiar with the pipeline operator since I've used F# and Elm. An operation that would be represented as a mutating method in e.g. JavaScript would instead be represented as a pure function returning a ""new object"" in F# and Elm. Some of the uses of pipelines in F# and Elm are to replace what would be sequences of mutating method calls in e.g. JavaScript. This probably influences my view here.";;;;;;;;;;;;;The proposal;;I mean, I'm already familiar with it from F# and Elm, so it's not like I'm learning something new.;
2017;Jun 3, 2019 11:00:54 pm;Jun 3, 2019 11:22:46 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559628054_5cf60916269696.33511082;;;nested vs both;more than 10 years;Intermediate;Other - Write In (Required);C#;458;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;) , numDays);123;;;;;;;;;;;;;;;;Line 9;unable to find a bug here..;192;;;;;;;;;;;;;Line 5;add ) at the end of line;64;;;;;;;;;;;;;;;;;;;;;179;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Pretty ok.;Somehow await in the pipeline does not look good.. I probably would always put it outside of pipeline..
2020;Jun 3, 2019 11:27:33 pm;Jun 3, 2019 11:56:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559629653_5cf60f554b37a1.99243873;;;nested vs proposal 2;more than 10 years;Advanced;TypeScript;;163;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";194;;;;;;;;;;;;;;;;Line 9;await #;235;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;282;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;"Actually everything starting at line 8 looks a bit too compact and might be more readable if some const variables might hold the intermediate results, while using regular if-statements for control flow. Nested ternary operators are already hard to understand - but now in combination with pipe and logical operators? Wow! ;-)";;;;;;;;;The proposal;;Easy, but I am on US keyboard layout. With German layout it might be slightly more difficult as one has to press AltGr for the |, and no modifier key for the >.;
2021;Jun 3, 2019 11:30:16 pm;Jun 4, 2019 2:52:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559629816_5cf60ff8c94543.42713739;;;flattened vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);C#;198;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"saltCabbageJar->saltyCabbageJar; but really depends on programmers preferences and knowledge of English, maybe the bug is in #5 and we need to rename that :)";220;;;;;;;Line 9;8:> await ferment(#, 14);9140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;702;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2)";;;;;a bowl of jogurt with berries;too many if statements;;"Matching # to the ""root"" variable due to repetitive # usage for all inner sentences. I'm still not sure if # is using the top-root pipe or the most nested pipe. If its the most nested (as it seems) - how can I reference the outer one? Ex., add(""berries"", #) - is this # for jogurt and bowl (kind of makes sense) or is this for full json object? how can I reference full json then?";;;;;;;;;The proposal;;easy, nice, straight-forward;"Its a helper in some situations for sure. But the status quo allows me to reuse some of previously defined variables in more than 1 sentence. I understand that ""pipe"" means always to reuse the previous result, so it makes sense then. But in general I still see situations where I start writing pipe'd syntax and end up reverting back to status quo. Which is not nice unless can be done automatically by tooling."
2022;Jun 3, 2019 11:42:42 pm;Jun 4, 2019 12:47:21 am;Complete;;;English;;1559630562_5cf612e23d2a31.00191672;;;nested vs proposal 2;more than 10 years;Intermediate;Other - Write In (Required);ABAP;1690;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;176;;;;;;;;;;;;;;;;Line 9;await #;397;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;608;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;a bowl of jogurt with berries;density of operators;;What causes slowdown: to jump ahead and back and to keep several different items in memory.;;;;;;;;;The proposal;;Hmm, this is truly tedious work. I copypasted it including the leading and the trailing white space.  I expect that editors and IDEs will offer a macro for it.;
2023;Jun 3, 2019 11:47:22 pm;Jun 4, 2019 12:30:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559630842_5cf613fad6f236.67759371;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;269;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Pass saltyCabbageJar as the first argument for ferment instead of saltCabbageJar;601;;;;;;;Line 9;await #;483;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;310;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);Not knowing the signature of fillBowl function and add function.;;;;;;;;;;The proposal;;For me, it doesn't matter whether |> is used or some other operator. What matters to me is the ability to pass output from one function to another. ;"I prefer typing just ""await"" instead of ""await #"" as it is implicit that the output from the previous step can go to only one place in the await syntax."
2027;Jun 4, 2019 12:09:11 am;Jun 4, 2019 12:24:03 am;Complete;;;English;;1559632151_5cf61917441b54.82461862;;;flattened vs both;5-10 years;Intermediate;Python;;86;number;"""object""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Rename saltCabbageJar to saltyCabbageJar;219;;;;;;;Line 9;await #;44;;;;;;;;;;;;;Line 5;"Add missing paren at the end "")""";36;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It's Ok;On first glance `await #` feels weird, why do I have to specify `#` there? Explicitness is great and would explain it but then why there was no argument in the pipeline with functions?
2029;Jun 4, 2019 12:15:10 am;Jun 4, 2019 1:04:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559632510_5cf61a7e0e6a02.31475368;;;nested vs both;0-2 years;Beginner;Other - Write In (Required);R;361;integer;"""function""";;;;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;",2);";505;;;;;;;;;;;;;;;;Line 5;new Jar;1320;;;;;;;;;;;;;Line 5;(_ => new Jar(_));38;;;;;;;;;;;;;;;;;;;;;189;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"",#)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Comfortable;I dont really care for the pipeline or status quo, but after some practice, the pipeline will probably be easier to read
2031;Jun 4, 2019 12:25:34 am;Jun 4, 2019 12:50:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559633134_5cf61ceec27699.99524009;;;nested vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);php;335;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;",14);";242;;;;;;;;;;;;;;;;;;221;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;123;;;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;The Status quo;;;
2032;Jun 4, 2019 12:26:55 am;Jun 4, 2019 1:10:15 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559633215_5cf61d3f54c782.31528726;;;flattened vs proposal 1;5-10 years;Expert;TypeScript;;200;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Rename the variable to saltyCabbageJar;61;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing brace to the end of the line;1265;;;;;;;;;;;;;;;;;;;;;205;"const kimchi = wash(""cabbage"")   |> cut   |> salt   |> ((_) => new Jar(_))   |> ((_) => add(""spicy paste"", _))   |> stir   |> ((_) => ferment(_, 2)   |> await   |> ((_) => _.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);If statement inside of the pipeline;Jumping round different parts of the code to get the context and figure out what the current thing we're operating against is.;;;;;;;;;;;;;The Status quo;;I picked it up relatively quickly. I think the lack of names on the parameters for the function form made it more difficult to keep track of the context and I think the syntax doesn't really suit more complicated examples;The status quo while more verbose I think is clearer and easier to follow, you can maintain the current context in your mental model (with good names for each variable). With the pipeline you have to keep tracking back to remind yourself what the current value you are operating on is.
2038;Jun 4, 2019 12:54:02 am;Jun 4, 2019 1:18:29 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559634842_5cf6239a4448e5.53430841;;;flattened vs proposal 2;0-2 years;Advanced;JavaScript;;75;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Replace saltCabbageJar by saltyCabbageJar;142;;;;;;;Line 9;Putting the await together with ferment, so that # is the bound to a Jar in the next line;392;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;215;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;The code wasn't too hard to read. The pipelines, however, cease to be very clear when inside the ternary statements.;;;;;;;;;The proposal;;It was fine. That seems a very good choice for the pipeline operator.;
2040;Jun 4, 2019 12:57:42 am;Jun 4, 2019 1:13:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559635062_5cf62476505807.04260312;;;flattened vs both;5-10 years;Expert;JavaScript;;208;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;await ferment(saltyCabbageJar, 14);165;;;;;;;;;114;;;;;;;;;;;;;Line 5;(_ => new Jar(_));37;;;;;;;;;;;;;;;;;;;;;159;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add (""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not very convenient. Especially with non-english keyboard typing this is pretty difficult;
2041;Jun 4, 2019 1:01:02 am;Jun 4, 2019 1:34:01 am;Complete;;;English;https://qsurvey.mozilla.com/;1559635262_5cf6253e85bcb6.79217028;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;277;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 1 better;;;;;;Line 11;", 14);";155;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;const cabbage = salt(cut(wash('cabbage'))) const kimchiJar = stir(add('spicy paste', new Jar(cabbage))) const { takeOne } = await ferment(kimchiJar, 2) const kimchi = takeOne();;;;;;;;;;The cascading;Less code;More code / variables;Breaking it down into more steps makes it easier to follow ;;;;;;;
2047;Jun 4, 2019 1:28:38 am;Jun 4, 2019 1:58:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559636918_5cf62bb63ffa45.53194042;;;flattened vs both;3-5 years;Advanced;JavaScript;;178;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the status quo better;;;;;;;;;;;Line 6;I would rename saltCabbageJar to saltyCabbageJar.;318;;;;;;;Line 6;I would remove the line, because provided recipe doesn't require water. By the way line 10 looks sketchy, but I don't know enough about pipeline operator to know if it is correct or not.;364;;;;;;;;;;;;;;;283;;;;;;;;;;;;;;;;;;;;;301;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;;
2051;Jun 4, 2019 1:52:31 am;Jun 4, 2019 2:12:13 am;Complete;;;English;;1559638351_5cf6314fc33dc3.31031772;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;140;int;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;add a number of days as second argument to the ferment function;154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add the missing parenthesis at line 5;30;;;;;;;;;;;;;;;;;;;;;276;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |>(_ => add(""spicy paste"", _)) |>stir |> (_=> ferment(_, 2)) |> await |>(_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;the if statements, requiring to check back the value of the result and the constants;;;;;;;;;;;;;The proposal;;cool ! ;
2052;Jun 4, 2019 1:58:07 am;Jun 4, 2019 2:23:26 am;Complete;;;English;https://hacks.mozilla.org/;1559638687_5cf6329f7d5dc2.64253682;;;flattened vs proposal 2;0-2 years;Intermediate;Python;;171;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;replace saltCabbageJar with saltyCabbageJar;139;;;;;;;Line 8;await ferment(#, 14);352;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;425;"const washedCabbage = wash('cabbage'); const cutCabbage = cut(washedCabbage); const salted = salt(cutCabbage); const jarCabbage = new Jar(salted); const spicedCabbage = add(""spicy paste"", jarCabbage); const stirred = stir(spicedCabbage); const kimchiJar = await ferment(stirred, 2); const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;Uncomfortable. Specially the '|' character.;
2053;Jun 4, 2019 12:30:37 am;Jun 4, 2019 2:32:16 am;Complete;;;English;;1559633437_5cf61e1d226ed9.38826464;;;nested vs flattened;5-10 years;Advanced;JavaScript;;86;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 2 better;;;;;;Line 11;, 14;155;;;;;;;Line 5;const saltCabbageJar = ...;114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;All in one line;The relationship between in and out function parameter ;;It is good that all things have a name;;;;;;;
2055;Jun 4, 2019 2:13:09 am;Jun 4, 2019 2:14:12 am;Complete;;;English;;1559639589_5cf63625480da6.07815055;;;nested vs flattened;more than 10 years;Beginner;Java;;3;;;;;;;;;;;;;;;;;;;;;21;;;;;;;;;9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2056;Jun 4, 2019 2:16:30 am;Jun 4, 2019 6:06:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559639790_5cf636ee60bd02.19372948;;;nested vs flattened;3-5 years;Beginner;Java;;123;number;"""error""";;;"y => add(10, y);";;;;;;Almost never;Very often;I like Pattern 1 better;;;;;;Line 11;And a value for the numdays parameter;186;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;7925;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbageJar = new Jar ( salt( cut(   wash(""cabbage"");  const kimchiJar = await ferment( stir( add(""spicy paste"", cabbageJar);";;;;;;;;;;It may lead to repeated code as each time you create a new cucumber jar - so state isn't shared with any other function or class. This could be a good thing. It's a bit messy when an outer function has multiple parameters. It may also make it hard to trace any type errors. ;Simple, concise and it reads like a sentence in English. ;Messy, confusing, not intuitive to walk through. Easy to make typos (as in the previous question). Hard to keep it all in your head.;Preserves state for re-use (e.g. with the 'Jar'). ;It would be interesting to see which code is more 'testable'.;;;;;;
2058;Jun 4, 2019 2:20:07 am;Jun 4, 2019 4:35:51 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559640007_5cf637c76289b5.98850065;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;197;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;"replace line with `, 14);`";259;;;;;;;;;;;;;;;;Line 1;I don't know where the bug is;370;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5871;"const kimchi = ""cabbige""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;a bowl of jogurt with berries;inconsistent style;;For me, nested ternary operator was biggest issue in understanding code. Nevertheless, code was easy to read.;;;;;;;;;The proposal;;For me, on US keyboard it is easier to write it using left hand to hold shift, while fast typing pipe and greater than with right hand. Overall, it is easier than lambda (=>);"In status quo, `new Jar` takes two arguments (wash ""cucumber"" and number 10), while in proposal it only takes on. That was very hard for me to spot. I would see it much easier using proposal syntax."
2063;Jun 4, 2019 2:57:28 am;Jun 4, 2019 3:31:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559642248_5cf64088614fd3.10050075;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;97;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);180;;;;;;;Line 10;|> takeOne();98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;160;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;inconsistent style slowed down, for better clarity conditionals should have been refactored;;;;;;;;;The proposal;;Reminds me of Haskell;Good for deeply nested actions. However, when pipelines composed of smaller pipelines begin to be introduced, the level of abstraction is greatly increased, therefore providing diminishing return. And possibly only the few ones, that are really interested in the newest stuff, would unsterstand it. Moreover, for newer programmers it would be hard to google the meaning of this, since operators themselves are really unfriendly to google search.
2068;Jun 4, 2019 4:37:15 am;Jun 4, 2019 4:56:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559648235_5cf657eba1f7b6.45231468;;;flattened vs both;more than 10 years;Advanced;JavaScript;;113;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";195;;;;;;;Line 9;await #;114;;;;;;;;;;;;;Line 5;(_ => new Jar(_));73;;;;;;;;;;;;;;;;;;;;;239;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;not cool (German keyboard layout);Pipeline operator FTW!
2069;Jun 4, 2019 4:45:15 am;Jun 4, 2019 5:07:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559648715_5cf659cbb06f54.52500549;;;nested vs flattened;more than 10 years;Intermediate;Other - Write In (Required);C#;223;3;"""function""";;;"y => add(10, y);";;;;;;Almost never;Almost never;I like Pattern 1 better;;;;;;Line 10;), 14;269;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;One cannot read the code naturally from left to right, but from the middle (as it were) backwards.;It's on only two lines --> less vertical scrolling;Too much code to read due to many (unnecessary) variables being introduced.;It can be read in a more natural manner.;Some combination of these two patterns would probably work best (for me, anyway).;;;;;;
2071;Jun 4, 2019 5:03:29 am;Jun 4, 2019 5:12:30 am;Complete;;;English;https://qsurvey.mozilla.com/;1559649809_5cf65e11c43690.56198736;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;69;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 10;), 14;114;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const kimchiJar = await Promise.resolve(wash('cabbage'))   .then(cut)   .then(salt)   .then(result => new Jar(result))   .then(jar => add('spicy paste', jar))   .then(stir)   .then(jar => ferment(jar, 2));  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Nested calls - unable to find at first what exact values are passed to `ferment`.;;Multiple variable declarations, need to go through all of them;Everything is in a separate line. Easier to read.;;;;;;;
2072;Jun 4, 2019 5:40:17 am;Jun 4, 2019 5:49:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559652017_5cf666b185b3d8.41819461;;;flattened vs both;3-5 years;Advanced;Python;;153;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);)";170;;;;;;;Line 5;new Jar('#');49;;;;;;;;;;;;;Line 4;;46;;;;;;;;;;;;;;;;;;;;;61;;;;;;;;;;;;;;;;Pipeline;;;;;
2073;Jun 4, 2019 5:46:35 am;Jun 4, 2019 6:20:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559652395_5cf6682bd31168.07815590;;;flattened vs both;more than 10 years;Advanced;TypeScript;;107;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;correct the `saltCabbageJar` to `saltyCabbageJar`;206;;;;;;;Line 10;unsure;429;;;;;;;;;;;;;Line 5;add `)` at the end of the line;81;;;;;;;;;;;;;;;;;;;;;760;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment (#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;quite ergonomic;
2074;Jun 4, 2019 5:48:53 am;Jun 4, 2019 5:53:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559652533_5cf668b59c08f3.37878957;;;flattened vs both;more than 10 years;Advanced;JavaScript;;114;number;"""function""";;;;;;;;;;;;Other - Write In (Required);NEVER! it's unreadable for humans;;I like the status quo better;;;;;;;;;;;;;23;;;;;;;;;4;;;;;;;;;;;;;;;11;;;;;;;;;;;;;;;;;;;;;18;;;;;;;;;;;;;;;;;;;;;
2075;Jun 4, 2019 6:17:16 am;Jun 4, 2019 6:24:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559654236_5cf66f5ccd8192.36443495;;;nested vs flattened;more than 10 years;Advanced;TypeScript;;151;number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 11;", 2);";67;;;;;;;Line 4;"const cabbageJar = Jar(crushedCabbage);";67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2076;Jun 4, 2019 6:22:35 am;Jun 4, 2019 7:00:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559654555_5cf6709b472bd6.44517910;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;131;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;217;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));53;;;;;;;;;;;;;;;;;;;;;1042;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;I'd rewrite part with awaits to smth like `await fetch('https://fermentation.endpoint', {mode: 'cors'}).then(res => res.json())`.  Underscores remind of lodash, I'd rename it or even destructure(?).;;;;;;;;;;;;;The proposal;;Slightly inconvenient. Need to get used to it;
2080;Jun 4, 2019 6:30:58 am;Jun 4, 2019 7:01:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559655058_5cf67292aab8f8.39241791;;;flattened vs proposal 1;3-5 years;Intermediate;Other - Write In (Required);PHP;138;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;246;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing );60;;;;;;;;;;;;;;;;;;;;;441;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await;";a bowl of jogurt with berries;density of operators;;It's tricky parsing all the underscores, periods, and ampersands in the long if statements. But this could be easily fixed to be more readable by refactoring the statements into functions.;;;;;;;;;;;;;Other - Write In (Required);Conflicted - the proposal does improve things a bit, but it's still not ideal IMO. We've really just replaced variable names with more syntax to memorize. Over time, I'm sure the syntax will become second nature, but there could def be a learning curve.;Yeah, it's a little hard to reach all the way up to the | symbol...not sure if that's a deal breaker or not...almost would need to use it for a few days to see.;"Would it be possible to just use the pipe vs. |>? IDK, I use Linux as my daily driver with some MacOS thrown in and the | is immediately more familiar than |> is...to me that feels a bit like I'm at a command prompt and I'm typing on multiple lines, like how you can type ""cd \"" and the cursor goes to a new line where you can continue typing...but I do that like never percent of the time, so |> feels a little bit like I made a mistake...probably just me.  I can see this syntax being abused because it's so easy to put an inline function in the |> chain. The current syntax does discourage that a bit. It's at least C-like, so it feels more natural to call a function vs. trying to create an inline anonymous function for add(), salt(), etc.  I appreciate you guys taking the time to think through this...the status quo can definitely can be improved :)"
2082;Jun 4, 2019 6:31:16 am;Jun 4, 2019 6:58:43 am;Complete;;;English;https://qsurvey.mozilla.com/;1559655076_5cf672a41cb8a3.22479322;;;nested vs proposal 2;3-5 years;Expert;JavaScript;;88;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 11;Add `, 14` before the closing parens;156;;;;;;;;;;;;;;;;Line 6;Remove the line;217;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;209;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;;198;;;;;;;;The proposal;;Easy;It is a bit confusing (without explanation) that: - Without the #, the expression after `|>` should be a function (like `wash`) - With the #, the expression after `|>` should be a function expression (like `wash(#)`)  I would almost have expected the last line here not to have the parens  ``` const pickle = fermentedPicklePromise   |> await #   |> #.takeOne()   // I would have expected the following instead   |> #.takeOne ``` Since takeOne is a function (well, a method) that takes no argument, like `wash`. But due to the use of `#`, we need to add the parens, which I think is a bit confusing.  I'm also a bit surprised by the need of the # in `await #`, but it makes sense considering what's awaited after `|>` depending on the presence of #.  Overall, I really like the proposal, it's just this first point that I think will create a few bugs (especially if # is hidden somewhere).
2083;Jun 4, 2019 6:32:35 am;Jun 4, 2019 6:44:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559655155_5cf672f3ba10f9.17482797;;;flattened vs both;5-10 years;Expert;JavaScript;;111;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar or change both to saltedCabbageJar;113;;;;;;;Line 9;await #;160;;;;;;;;;;;;;Line 5;add a paren to the end of the line.;27;;;;;;;;;;;;;;;;;;;;;124;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Pretty awkward, I immediately switched to copy-paste.;
2085;Jun 4, 2019 6:35:58 am;Jun 4, 2019 6:48:47 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559655358_5cf673bea66254.20609837;;;flattened vs both;5-10 years;Expert;Other - Write In (Required);ReasonML;125;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;use the correct name of the variable from line 5: `saltyCabbageJar`;179;;;;;;;Line 9;`await #`;71;;;;;;;;;;;;;Line 5;add paren to the end of the line;37;;;;;;;;;;;;;;;;;;;;;161;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;Love it! I have been using ReasonML and it feels very familiar to me.;I think I would prefer `_` to `#` as the placeholder and still maintain the point-free style.
2089;Jun 4, 2019 6:46:40 am;Jun 4, 2019 7:37:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559656000_5cf676405a69a6.60038581;;;flattened vs both;3-5 years;Intermediate;JavaScript;;222;nimber;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";541;;;;;;;Line 9;|> await #;158;;;;;;;;;;;;;Line 8;|> (_ => await _);68;;;;;;;;;;;;;;;;;;;;;347;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #)  |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;unusual, every time I type incorrectly...;
2096;Jun 4, 2019 7:22:48 am;Jun 4, 2019 7:40:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559658168_5cf67eb8819bf0.28514379;;;nested vs both;more than 10 years;Advanced;JavaScript;;66;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;, 14);138;;;;;;;;;;;;;;;;Line 9;await #;105;;;;;;;;;;;;;Line 5;(_ => new Jar(_));33;;;;;;;;;;;;;;;;;;;;;186;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;On a french macbook, | is option + shift + L. That's not the easiest to type but I'm used to it (shell pipes, flow exact types);The example shows: |> ferment(#, 2) |> await # |> #.takeOne()  but I really want to write: |> await ferment(#, 2) |> #.takeOne()
2098;Jun 4, 2019 7:27:07 am;Jun 4, 2019 8:18:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559658427_5cf67fbb698429.03594328;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;207;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"Correct the typo - should be ""ferment(saltyCabbageJar, 14);"", not ""...saltCabbageJar...""";170;;;;;;;Line 9;Line 9 should read |> await #;294;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;243;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;"I'm just really getting hung up on the placeholders, and remembering what they are on each line. '#' means a different thing each time it occurs, which is harder still on lines 8-13 where it all represents the same thing (the parsed json object), because I've already been thinking ""this means the result of the previous line"". To understand this code I have to read it top to bottom every time I look at it. Heaven forbid I have to debug it.  I'd rather at least be able to name the placeholder, so I don't have to parse through the whole block of pipes when I come back to this in a few months just to find out what's happening on the nth pipe. In fact i'd like it if that was mandatory, to avoid this kind of ""cleverness"".  I also keep getting caught up on how await is used. I want to put await in front of the function whose promise I'm awaiting, not pipe the promise from the function into await and then pipe the the resolved promise. Also, how do I catch a rejected promise like this? Do I have to wrap the whole pipeline in try/catch and do a bunch of checks to figure out what I caught if there's more than one await? That sounds awful. Can I just shove try/catch in between pipes? That doesn't sound great either, tbh.  Furthermore, I don't see the point of piping a statement into the first function in the chain. This feels like it adds rather than reduces cognitive load. I'd rather only be able to pipe the result of a function, not just any statement or expression, just to stop people doing this.  Something like this would be preferable:   `const snack = new Jar('cabbage') |> add('salt', #jar) |> await ferment(#jar, 10) |> #fermentedJarOfCabbage.takeOne()`";;;;;;;;;The Status quo;;A little awkward to be honest, the | is kind of far away, the > is under the same hand, and both are shifted. It requires a lot of movement. I could do without the > if that's possible, but I can live with it if not (I don't have any better ideas).;See my comments on the previous page. As it is proposed above, I'd honestly rather not use it or have to look at it when other people do - the occasional utility is just not worth the headache (especially when we have currying, arrows and the builder pattern among other approaches to chaining functions).  With the changes and restrictions I mentioned I could see it being occasionally useful, but I'm still not sure Javascript needs Yet Another Way to do something we can already do. A big problem with the language is that it refuses to be opinionated about anything, resulting in radically varying code styles and patterns. I just don't know if we need another way to impress and befuddle our peers with bizarre syntax and methodology.  Sorry to be a wet blanket!
2101;Jun 4, 2019 7:38:41 am;Jun 4, 2019 7:58:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559659120_5cf68270f41280.48794720;;;flattened vs both;more than 10 years;Advanced;Java;;167;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;s/saltCabbageJar/saltyCabbageJar/ (i.e. salt â salty);121;;;;;;;Line 9;await #;257;;;;;;;;;;;;;Line 5;add ) at the end of the line;32;;;;;;;;;;;;;;;;;;;;;168;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;On a French keyboard, | is at AltGr+6. I regularly typed [ (AltGr+5) instead. Muscle memory, but otherwise OK.;
2103;Jun 4, 2019 7:40:14 am;Jun 4, 2019 8:13:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559659214_5cf682ce1eee40.72791018;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;117;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 7;return something in takeOne;293;;;;;;;;;;;;;;;;;;;;;;;Remove first open parenthesis, (and remove them in other lines too);103;;;;;;;;;;;;;;;;;;;;;376;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> _ => new Jar(_) |> _ => add(""spicy paste"", _) |> stir |> _ => ferment(_, 2) |> await  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;whitespace formating;;The only thing that really slowed me down was the missing tab line 15. I expect a statement starting on one line and finishing on another to have lines 1+N more indented that line 1, by one tab.;;;;;;;;;;;;;The proposal;;"I just don't understand why it can't just be ""|"" like in bash. I think that it would be way more used than the binary operator |. Moreover, at least on an azerty keyboard, it's 4 key pressed, which is a lot. (alt gr + 6 and shift + < )";"[""I'm"", 'so', 'excited'] |> _ => _.join(' ') |> alert "
2104;Jun 4, 2019 7:43:35 am;Jun 4, 2019 8:01:57 am;Complete;;;English;;1559659415_5cf6839714f301.48893520;;;nested vs flattened;more than 10 years;Advanced;Python;;134;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;"Add "", {day}""";95;;;;;;;Line 6;"mispelled variable (""salty"" instead of ""salt"")";45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;To understand the first line we need to actually count commas and parenthesis, it is tedious and error prone.  We need to read the code in a right to left kind of way to understand what object is passed to the next function.;The logical succession of operations is understandable-ish. (wash then add then salt then ferment). ;The logical succession of operation can be mixed up.;The parameters of each function is clear, it's explicit. It requires more self-discipline to write clear code (variable name convention, order of lines) but it is clearer.;;;;;;;
2106;Jun 4, 2019 7:48:07 am;Jun 4, 2019 8:08:48 am;Complete;;;English;https://l.messenger.com/;1559659687_5cf684a768a913.29672640;;;nested vs both;5-10 years;Advanced;JavaScript;;87;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 11;", 14);";124;;;;;;;;;;;;;;;;Line 9;|> await #;544;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));43;;;;;;;;;;;;;;;;;;;;;187;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;A bit difficult;
2107;Jun 4, 2019 7:51:22 am;Jun 4, 2019 8:39:19 am;Complete;;;English;https://qsurvey.mozilla.com/;1559659882_5cf6856a2cb138.42242764;;;flattened vs proposal 1;3-5 years;Advanced;TypeScript;;144;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;200;;;;;;;;;;;;;;;;;;;;;;Line 5;add a ) at the end of the line;48;;;;;;;;;;;;;;;;;;;;;235;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await const kimchi = kimchiJar.takeOne()";a bowl of jogurt with berries;density of operators;;"It's hard to keep track of what is transformed into what at each line (especially because js isn't typed). Nesting pipelines is a bit hard to follow too. And maybe the checks in the if/else should be factored out for readability ;)";;;;;;;;;;;;;The proposal;;I think it makes it way easier to reason about the order of operations and I really like functional programming.;
2109;Jun 4, 2019 8:12:38 am;Jun 4, 2019 9:11:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559661158_5cf68a664df935.29679017;;;flattened vs proposal 1;more than 10 years;Expert;TypeScript;;75;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;s/Salt/Salty/;90;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) at the end of line;221;;;;;;;;;;;;;;;;;;;;;1132;;a bowl of jogurt with berries;too many if statements;;|> await |> Also some ifs ahould be easier to read as switch;;;;;;;;;;;;;The proposal;;No hussle at all;Ocaml'y
2114;Jun 4, 2019 8:37:40 am;Jun 4, 2019 8:53:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559662660_5cf69044b024d3.24526605;;;nested vs proposal 2;3-5 years;Intermediate;Other - Write In (Required);Dart;121;int;"""object""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;provide numdays as second argument to ferment;118;;;;;;;;;;;;;;;;Line 10;not sure;103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;151;"const kimchiJar =  ""cabbage""  |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"" , #) |> stir";;;;;a bowl of jogurt with berries;nested pipelines;;still processing the pipe #.jogurt }> fillBowl |> add(berries. #) I currently have to read it backwards (but I like the style);;;;;;;;;The proposal;;ideally it would only be 1 char but the readability of it looking like an arrow is worth it;I think (like all functional style programming) for a beginner this new proposal is harder to grasp
2118;Jun 4, 2019 9:01:50 am;Jun 4, 2019 9:27:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559664110_5cf695eeba5d03.30102548;;;nested vs proposal 1;3-5 years;Advanced;TypeScript;;134;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;add number of days;208;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;add a );166;;;;;;;;;;;;;;;;;;;;;338;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;- the nested pipelines - checking all the if-clauses while memorizing what the variables result to;;;;;;;;;;;;;The proposal;;Unusual, will likely need some time to type this without thinking;"I was confused by the ""find the bug""-examples, because I was searching for semantical bugs (wrong order) and not syntax bugs. Maybe you could update the survey to make this more clear."
2120;Jun 4, 2019 9:05:59 am;Jun 4, 2019 9:54:34 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559664359_5cf696e7807816.25606095;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;173;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;",14);";328;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));110;;;;;;;;;;;;;;;;;;;;;487;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_,2)) |> await;";a bowl of jogurt with berries;Other - Write In (Required);missing functions fillPlate fillBowl add;things that slowed me down: 1.global constants 2. inconsistent highlighting of code 3. multiple inline return statements 4. lines that are too long eg line 13 and should be broken down at the OR operator 5. new operator that looks too much like conparison operator => < >  This code is very easy to read otherwise, there are much worse out there and general rule of thumb is that this is quite pleasent;;;;;;;;;;;;;Other - Write In (Required);status quo written properly in order of execution one statement per line holding onto any result is necessary and passing it along to the functions on the following lines;got used to it pretty quickly like that it's the same modifier key I have to press for both  |  and > so they can can typed in one go dislike that it looks too much like comparison operators and dislike the aditional sugar that has to come with it;"What is the need of this with the availability of promise await?  The more I look at the syntax that uglier it gets and very unnatural. If I was a newcommer to the language this would make me think I have to be a genius to use and I'd stay away from it since it's got too many symbols and thus way too many things to typo  The new syntax looks awful, like some minified production code  and any half decent senior person would tell whoever wrote the status quo to break it apart and write it in order  var washed = wash() new Jar(washed); ...  adding a little syntax sugar to eliminate some variable declarations does not seem like a worthwhile effort for the language when time could better be spent on other things  "
2126;Jun 4, 2019 9:23:45 am;Jun 4, 2019 9:50:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559665424_5cf69b10ca0af4.33103981;;;flattened vs proposal 1;5-10 years;Expert;TypeScript;;112;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";116;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));67;;;;;;;;;;;;;;;;;;;;;131;"const kimchi = wash(""cabbage"")   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> ferment   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;Processing the if statements is the most hard thing for me, specially that else if, the condition is too big.;;;;;;;;;;;;;The Status quo;;Fine;I really dislike having to define these arrow functions
2131;Jun 4, 2019 9:29:36 am;Jun 4, 2019 9:59:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559665776_5cf69c70adcf94.63144531;;;nested vs proposal 2;more than 10 years;Advanced;TypeScript;;136;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 14);";115;;;;;;;;;;;;;;;;Line 5;|> Jar(#) // ?;853;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;222;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;Slightly obnoxious. A single character would be better, or something less obtuse.;
2136;Jun 4, 2019 9:48:51 am;Jun 4, 2019 10:12:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559666931_5cf6a0f3bf5763.26109451;;;nested vs proposal 1;more than 10 years;;JavaScript;;122;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Rarely;;;;I like the status quo better;Line 10;"append "", 2";133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 8;rm await;76;;;;;;;;;;;;;;;;;;;;;360;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;The proposal;;pretty tough to type, I put it on the clipboard;
2137;Jun 4, 2019 9:49:40 am;Jun 4, 2019 10:37:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559666980_5cf6a1248363c7.00046184;;;nested vs both;0-2 years;Beginner;JavaScript;;1816;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;) , 2;94;;;;;;;;;;;;;;;;Line 6;"let product = add(""water"", #)";149;;;;;;;;;;;;;Line 5;(_ => new Jar (_));66;;;;;;;;;;;;;;;;;;;;;177;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar (#) |> add (""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It was fine, I don't think I've ever used that character combo for anything else.;Thanks for this, was fun!
2138;Jun 4, 2019 9:51:46 am;Jun 4, 2019 10:12:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559667106_5cf6a1a21318e2.88257035;;;nested vs both;5-10 years;Expert;JavaScript;;122;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;, 1;243;;;;;;;;;;;;;;;;Line 9;await #;158;;;;;;;;;;;;;Line 5;(_ => new Jar(_));53;;;;;;;;;;;;;;;;;;;;;193;"const kimchiJar = ""cabbage"" |> watch(#) |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;not so good, but it's understandable.;
2140;Jun 4, 2019 10:00:31 am;Jun 5, 2019 6:33:07 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559667631_5cf6a3afa48551.76798718;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;103;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;82;;;;;;;;;;;;;;;;;;;;;;Line 5;add a trailing );58;;;;;;;;;;;;;;;;;;;;;2807;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> add('spicy paste', _)   |> stir   |> await   |> ferment;a bowl of jogurt with berries;inconsistent style;;Line 12 slowed me down for the inconsistent style. Line 13 slowed me down for its length and compound conditional. Lines 14-15 slowed me down for inconsistent style.;;;;;;;;;;;;;The proposal;;Nothing I couldn't get used to!;
2141;Jun 4, 2019 10:02:51 am;Jun 4, 2019 10:13:02 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559667771_5cf6a43b78da71.90297349;;;nested vs flattened;3-5 years;Expert;TypeScript;;52;"""number""";"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;), 10;287;;;;;;;Line 6;const sauerkrautJar = await ferment(waltyCabbageJar, 14);82;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;keeping track of which arguments are provided to which function.;;More verbose. Take more time to type out.;It's clear what arguments are passed to what function.;;;;;;;
2145;Jun 4, 2019 10:12:29 am;Jun 4, 2019 10:34:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559668349_5cf6a67d0dec62.10173587;;;flattened vs both;0-2 years;Intermediate;TypeScript;;102;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"""saltCabbageJar"" is misspelled, so change it to ""saltyCabbageJar""";249;;;;;;;Line 10;"Not sure, but my guess is to change line 10 to ""takeOne()"" instead of ""#.takeOne()""";302;;;;;;;;;;;;;Line 5;"Add a "")"" to the end of line 5";39;;;;;;;;;;;;;;;;;;;;;204;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It was kinda weird, probably because I don't think I've ever typed those two characters consecutively before. It's a little awkward to do it on a keyboard, but I'm sure I'd get used to it.;
2147;Jun 4, 2019 10:23:58 am;Jun 4, 2019 10:34:51 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559669038_5cf6a92e533391.56794269;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;67;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Replace `saltCabbageJar` with `saltyCabbageJar`;44;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a `)` at the end.;21;;;;;;;;;;;;;;;;;;;;;120;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => ferment(_, 2)   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;The added lines for await and the extra boilerplate of `|> (_ => ` was distracting. The `|>` on the line after the return was easily missed. The really long conditional on a single line was tough to go through.;;;;;;;;;;;;;The Status quo;;Not terrible, but slightly annoying.;It seems like we need to make a lot of new fat-arrow functions, instead of being able to call existing functionsâ¦ It's like this is aiming for a more fluent style (`a.b().c().d()`), but can't quite get there.
2148;Jun 4, 2019 10:27:12 am;Jun 4, 2019 10:41:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559669232_5cf6a9f071cdf4.41400449;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;73;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 4;"const cabbageJar = Jar(crushedCabbage);";160;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));94;;;;;;;;;;;;;;;;;;;;;230;"const kimchiJar =   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> await   |> (_ => _.takeTwo());";;nested pipelines;;;;;;;;;;;;;;;The proposal;;Great;Get functional!
2150;Jun 4, 2019 10:49:12 am;Jun 4, 2019 11:39:43 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559670552_5cf6af182993e8.51241387;;;flattened vs proposal 2;3-5 years;Expert;JavaScript;;129;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";141;;;;;;;Line 9;|> await #;322;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;263;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;Line 12 seems incorrect, though that branch is not executed. It should be   ? (({wine}) => wine |> fillGlass)(#) or   ? #.wine |> fillGlass;;;;;;;;;Other - Write In (Required);Use pipeline with # only (disallow to pipe to functions);I don't care.;Pipeline with # is inconsistent with pipeline to functions. e.g.  42 |> x + # + # is x + 42 + 42 and 42 |> x + # is x + 42, then 42 |> x should be x, not x(42).
2152;Jun 4, 2019 10:49:47 am;Jun 4, 2019 11:00:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559670587_5cf6af3bb6c2b4.92155459;;;nested vs flattened;5-10 years;Intermediate;Python;;98;function;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;Never;Almost never;I like Pattern 2 better;;;;;;Line 1;Add an additional parameter 14.;120;;;;;;;Line 6;Use saltyCabbageJar instead of saltCabbageJar.;34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const clean_cabbage = wash(""cabbage""); const cut_cabbage = cut(clean_cabbage); const salted_cabbage = salt(cut_cabbage); var jar = new Jar(salted_cabbage); jar = add(""spicy paste"", jar); const kimchiJar = await ferment(jar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;The order of operations must be unpacked from right to left (from inside to outside).;It is terse.;There's many intermediate variables to keep track of.;The operations are in the proper order (from top to bottom).;add should be a method on Jar.;;;;;;
2153;Jun 4, 2019 10:51:30 am;Jun 4, 2019 11:15:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559670689_5cf6afa1d3f735.23485121;;;nested vs proposal 1;0-2 years;Intermediate;TypeScript;;175;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;Remove closing bracket;139;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add closing bracket;118;;;;;;;;;;;;;;;;;;;;;148;;a bowl of jogurt with berries;Other - Write In (Required);"Condition inside pipe operator or i can say pip operator syntax loss its usage when start writing more and more code just like first ""else if""";Remove after fetching data use rshould invoke another to pass json data, then do validate and other stuff;;;;;;;;;;;;;The proposal;;I think if we need nested function calling then pipeline operator is good but need to cautous if people start writing to much nested operator with different condition, level complexity decreases, if people follow standard, people start showing idiotic optimization using one line pipeline operator  One thing pipe line operator or linter tools can add rule for simplicity and readbility. Also readbility will be less when more contional code added;
2154;Jun 4, 2019 11:00:19 am;Jun 4, 2019 11:19:45 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559671219_5cf6b1b39abd97.57371393;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;82;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;add ', 14' before the ')';140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add a ')' at the end of the line;77;;;;;;;;;;;;;;;;;;;;;223;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> takeOne";a bowl of jogurt with berries;whitespace formating;;Filling a bowl with '{ ready: true} '  ;;;;;;;;;;;;;The proposal;;Awkward, but I could get used to it. ;
2156;Jun 4, 2019 11:05:46 am;Jun 4, 2019 2:05:26 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559671546_5cf6b2fa7d9813.30939611;;;nested vs both;3-5 years;Advanced;TypeScript;;371;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;Line 1;Pass second argument with value 14 to the `ferment` method.;215;;;;;;;;;;;;;;;;Line 10;;9190;;;;;;;;;;;;;Line 5;Close parenthesis at end of the line;54;;;;;;;;;;;;;;;;;;;;;354;"const kimchi = ""cabbage""     |>wash     |>cut     |>salt     |>new Jar(#)     |>add(""spicy paste"", #)     |>stir     |>ferment(#, 2)     |>await #     |>#.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It was fine, the font I use(fira code) even has a ligature for it, so it looks pretty nice in editor.;
2162;Jun 4, 2019 11:31:37 am;Jun 4, 2019 11:53:00 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559673097_5cf6b9096e1d46.63976251;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;96;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Rename variable saltCabbageJar to saltyCabbageJar;228;;;;;;;Line 9;|> await #;90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;192;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne";;;;;a bowl of jogurt with berries;whitespace formating;;"I had hard time reading lines 12 and 13. It looks like there's extra closing parenthesis in line 13 `: null);` but it's hard to figure out if that true.  After finding out that line 12 is ok, I was sure line 13 had syntax error.";20;;;;;;;;The proposal;;I'm fine with typing this. You can do it with right hand while holding shift key with left hand.;I would prefer just '|' character but I understand that's not possible.
2163;Jun 4, 2019 11:35:08 am;Jun 4, 2019 11:42:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559673308_5cf6b9dc70f768.97156776;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;31;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"add y to ""saltCabbageJar""";54;;;;;;;Line 5;;53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;133;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await #  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;step-thru each line & manually check given the provided await #.json() result & defined constants;;;;;;;;;The proposal;;annoying at first if only because | and > are typed using the same hand, can't quickly move between the two unlike ? & : which are adjacent.;
2166;Jun 4, 2019 12:18:15 pm;Jun 4, 2019 1:11:26 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559675895_5cf6c3f74545b9.55890510;;;nested vs flattened;more than 10 years;Intermediate;C++;;351;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 1 better;;;;;;Line 11;add comma at end of line 10 followed by a new line with a number (I would not change the line with the bug, rather prevent it from being a bug);268;;;;;;;Line 6;fix the spelling;59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const kimchiJar = await ferment(   stir(     add(       ""spicy paste"",       new Jar(         salt(           cut(             wash(""cabbage"")           )         )       )     )   ), 2 );  const kimchi = kimchiJar.takeOne();";;;;;;;;;;It's harder to see the order in which things happen.;It's compact, thus better when looking at the code at a higher level.;The intermediate names make the code noisy.;It's easier to understand if you've never seen the code before.;"Having both conciseness and natural ordering would probably be the easiest to read. E.g.:  const pickleJar = wash(""cucumber"").putInJar().add(""water"").salt().await(ferment, 2);  Not so easy to implement, though!";;;;;;
2167;Jun 4, 2019 12:22:57 pm;Jun 4, 2019 12:42:03 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559676177_5cf6c5112e0e76.39129370;;;flattened vs both;more than 10 years;Expert;Python;;122;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";139;;;;;;;Line 9;I'm not sure. This line was different 2 slides ago (saying `await #`), but I don't know why or if it's wrong here, really. The error message would be confusing if this is the problem.;284;;;;;;;;;;;;;Line 5;Add a close paren on the end;24;;;;;;;;;;;;;;;;;;;;;234;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #;  // though I'd rather say just `await` // Kept separate because it keeps the same end definitions as above. // If earlier not wanted, pipe above into #.takeOne() const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;I think others are easier to type and clearer to me personally (such as `->` or `>>` or if it weren't taken just `|`), but I get why `|>` is used.;In your final examples, not using `await` for the `#`-less example is unfair, though I prefer `#` personally. And as I mentioned before, I don't understand why `await` alone isn't good enough for `#` version.
2168;Jun 4, 2019 12:42:05 pm;Jun 4, 2019 12:57:16 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559677325_5cf6c98d252966.92492346;;;nested vs proposal 1;0-2 years;Advanced;JavaScript;;68;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;), 1;85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) at the end;69;;;;;;;;;;;;;;;;;;;;;129;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await";a bowl of jogurt with berries;identifiers;; await separate from function which return promise;;;;;;;;;;;;;The proposal;;easy;Maybe there are way to use await not separately from other lines?
2169;Jun 4, 2019 12:44:30 pm;Jun 4, 2019 1:00:16 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559677470_5cf6ca1e0039c0.55234139;;;nested vs proposal 2;more than 10 years;Advanced;TypeScript;;74;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;0,14;113;;;;;;;;;;;;;;;;Line 10;;134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;267;"const KimchiJar = ""cabbage"" |> wash |>cut |> new Jar(#) |> add(""salt"",#) |> add(""spicy paste"",#) |> ferment(#,2) |>await";;;;;a bowl of jogurt with berries;;;No issues - looked logical;;;;;;;;;The proposal;;a little awkward but would get used to it.;Much easier to understand what is happening - far simpler than nested functions.
2171;Jun 4, 2019 1:21:51 pm;Jun 4, 2019 2:38:54 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559679711_5cf6d2df11fd46.16324025;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;50;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;142;;;;;;;Line 9;await #;3778;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;198;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;density of operators was tough, but the hard part was parsing the conditional out of the dense operators and mentally referencing the object thru #  this is further complicated by the new types of organization which are used for the pipeline operators;;;;;;;;;The proposal;;a bit awkward because I want to hold shift with my right hand and then I have to rotate it in an awkward position to hit | then rotate back for >;The reuse of # multiple times can get confusing because that symbol means different things on each line. It would probably become easier as I become more familiar with the symbol and operator.  It is definitely more complicated to parse mentally than the type of functional programming see with map-filter-reduce for me currently.  Regardless, I really hope to see this added to the spec. thanks!
2174;Jun 4, 2019 1:31:23 pm;Jun 4, 2019 1:47:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559680283_5cf6d51bb93844.96860050;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;271;Number;"""error""";;;;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 3;;165;;;;;;;;;;;;;;;;Line 8;;65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34;;;;;;;;;;;;;;;;;;The proposal;;;
2175;Jun 4, 2019 1:33:35 pm;Jun 4, 2019 1:57:39 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559680415_5cf6d59f3e8847.81307012;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;94;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;add the numdays argument;153;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add the closing ')';79;;;;;;;;;;;;;;;;;;;;;413;"const kimchiJar = ""cabbage""  |> wash |> cut |> salt |> (x => new Jar(x)) |> (j => add(""spicy paste"", j)) |> (j => stir(j, 2)) |> ferment |> await; const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;too many if statements;;The constants caused me to slow down the most because I had to go back and see what there values were to know which branches the code would be taking.;;;;;;;;;;;;;The proposal;;Good (no problems);
2179;Jun 4, 2019 1:43:43 pm;Jun 4, 2019 2:24:30 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559681023_5cf6d7ff845757.58170171;;;flattened vs proposal 2;5-10 years;Expert;TypeScript;;189;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;change 'saltCabbageJar' to 'saltyCabbageJar';270;;;;;;;Line 9;await #;813;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;347;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);nested ternary;the pipelines were easy to read.  i find nested ternary slow me down the most;;;;;;;;;The proposal;;First few times I accidentally typed `\>` and `|.` but then I got used to it. ;I use RxJs alot and would really like the pipeline operator
2181;Jun 4, 2019 1:45:46 pm;Jun 4, 2019 2:10:21 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559681146_5cf6d87a06aab4.08051546;;;flattened vs both;more than 10 years;Expert;JavaScript;;123;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";185;;;;;;;;;244;;;;;;;;;;;;;Line 5;(_ => new Jar(_));48;;;;;;;;;;;;;;;;;;;;;452;"// naming all the variables _ is a really bad idea in a daisy-chain this long const kimchiJar = ""cabbage""   |> ( veggie => wash(veggie) )   |> ( veggie => cut(veggie) )   |> ( veggie => salt(veggie) )   |> ( veggie => new Jar(veggie) )   |> ( jar => add(""spicy paste"", jar )   |> ( jar => stir( jar ) )   |> ( jar => ferment(jar, 2))   |> ( promise => await promise ) ;  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Current status quo;;;;A bit awkward.;I would be much more sold on pipeline with # if the example had included different named variables (see previous page) and code comments.
2183;Jun 4, 2019 2:47:56 pm;Jun 4, 2019 3:29:27 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559684876_5cf6e70c41a6c7.51562315;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;119;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";577;;;;;;;Line 9;|> await #;167;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;231;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);nested conditional operators;Complex conditions slowed me down. Altough not the worst it's harder to evaluate in head. Change of # variable value when nesting pipelines makes me uncertain. The whole mixing of pipelines and conditional operators looks very error-prone in this case. Inconsistent style just makes me unhappy.;;;;;;;;;The proposal;;I'm already familiar with exact syntax from Elixir language and I'm ok with it.;
2186;Jun 4, 2019 3:42:01 pm;Jun 4, 2019 4:16:19 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559688121_5cf6f3b92bfed6.78874937;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;129;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;replace ferment(saltCabbageJar, 14) with ferment(saltyCabbageJar);149;;;;;;;Line 9;replace await with await #;93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;141;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;Other - Write In (Required);repetition & unoptimized logic;"Interestingly, the thing that tripped me up the most was the use of an inline (anonymous) function being passed to the pipeline operator.  It's simple enough, just picking the ""wine"" property out and calling fillGlass with that property.  it seems like, in this case, fillGlass(#.wine) would have been a lot clearer.  I actually didn't have too much probably with this code except that the logic seemed ""backward to me.  I probably would have written it as  |> isBreakfast || isSnackTime   ? #.jogurt && #.jogurt.ready     ? #.jogurt |> fillBowl |> add(""berries"", #)     : null   : isDinner     ? #.wine && #.wine.ready       ? fillGlass(#.wine)       : null    : null  Yeah, now that I look at it, it looks awful too.  I love the ternary operator, but it doesn't do a good job when there are more than two branches because you've got to chain them.  I think pattern matching would really help here, obvs.  That's the proposal I *really* want to see in JS.   ";;;;;;;;;The proposal;;No problem.;I think one of the challenges with JavaScript is the proliferation of alternative syntax.  On the one hand, I love it...the expressive power of JS keeps growing, and I'm a fan of that.  This syntax will be much clearer and less repetitive in certain situations, but in others, it will be *harder* to read.  I think it works really well when it's clearest from the perspective of the thing that's going through the process (cumber), or when it's important to understand the steps.  The opposite situation is when you want to start form the big picture (the pickle jar world).  You care less about how you got there, and if you do, you want to work backwards and stop as soon as you reach the level of abstraction that you care about.  What remains to be seen to me is how this additional syntactic sugar will play out in the real world...will be people mix it in with function composition syntax (f(g(x)) or use it exclusively?  It's just hard to tell without having it available, which I know is not helpful.
2187;Jun 4, 2019 3:54:46 pm;Jun 4, 2019 4:15:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559688885_5cf6f6b5d8c143.59813072;;;nested vs proposal 1;5-10 years;Intermediate;Python;;90;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;add the second parameter to ferment;106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Close the parens;42;;;;;;;;;;;;;;;;;;;;;382;"// We again start with cabbage, then we wash it, cut it, and salt it. We add a spicy paste to it, and then we let it ferment for 2 days.   const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste'))   |> stir   |> (_ => ferment(_, 2)))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;Reading the conditionals made me take a second look. Also, the styling of lines 14-15 made me slow down. Think that'd be easier to read as a single line.;;;;;;;;;;;;;The proposal;;a bit strange, the pipe is not something I type that often;
2189;Jun 4, 2019 4:57:34 pm;Jun 4, 2019 5:20:13 pm;Complete;;;English;https://qsurvey.mozilla.com/;1559692654_5cf7056e5899a9.54882328;;;flattened vs both;5-10 years;Advanced;JavaScript;;80;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbaeJar;132;;;;;;;Line 9;put await on line 8 with ferment?;316;;;;;;;;;;;;;Line 5;add closing parens;60;;;;;;;;;;;;;;;;;;;;;183;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;Easy;The # is a nice shortcut, but I would want to clearly understand when it's needed and when not.
2191;Jun 4, 2019 5:18:54 pm;Jun 4, 2019 5:45:07 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559693934_5cf70a6eb0c369.06790183;;;flattened vs proposal 1;3-5 years;Intermediate;TypeScript;;77;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 4;"const cabbageJar = Jar(crushedCabbage);";196;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));158;;;;;;;;;;;;;;;;;;;;;47;;a bowl of jogurt with berries;nested pipelines;;not sure why sometimes function calls need to be in arrow function, sometimes just state the function name.;;;;;;;;;;;;;The Status quo;;Strange;I hope there's easier-to-understand proposal
2192;Jun 4, 2019 5:55:03 pm;Jun 4, 2019 6:10:32 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559696102_5cf712e6276d13.44761191;;;nested vs flattened;3-5 years;Intermediate;JavaScript;;53;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 10;Add day length number;129;;;;;;;Line 6;Fix typo on line 6;216;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;All functions are invoked on a single line. ;The fact that the code is written in one line. ;I don't find anything difficult to read regarding this patttern;Each function is invoked and stored sequentially in their own respective variables. ;If the API to the functions are available to the developer, I'd suggest refactoring the code to use function chaining. ;;;;;;
2194;Jun 4, 2019 6:40:04 pm;Jun 4, 2019 7:03:28 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559698804_5cf71d748defb4.80053334;;;nested vs proposal 2;5-10 years;Expert;TypeScript;;78;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;Line 11;ferment is missing the 2nd parameter;92;;;;;;;;;;;;;;;;;I don't know. It shouldn't happen since it's a valid placeholder in the pipeline context.;189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;364;"const originalJar = new Jar(""cabbage"" |> wash |> cut |> salt) const secondStep = originalJar |> add(""spicy paste"", #) |> stir const kimchiJar = await ferment(secondStep, 2)  const kimchi = kimichiJar.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Start from line 5, 6, 7. Then 2 expressions, I checked isBreakfast and isSnackTime first. Then the 2nd expression dropped. It's a || operator so continue to check the 1st one. It's true. So I goto line 9 and 10. Done;;;;;;;;;Other - Write In (Required);This is abusing the new syntax. Should split into 2 or 3 parts with |> operator.;Not very convenient but acceptable.;
2198;Jun 4, 2019 6:43:09 pm;Jun 4, 2019 7:23:45 pm;Complete;;;English;;1559698989_5cf71e2d124776.80263646;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;252;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"plus a ""y""";152;;;;;;;Line 9;await #;273;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;474;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;the second last line: fillGlass is not similar with fill Bowl  ;;;;;;;;;The proposal;;|>  shift + \ , shift + .;
2200;Jun 4, 2019 6:53:01 pm;Jun 4, 2019 7:42:09 pm;Complete;;;English;;1559699581_5cf7207d632290.59392099;;;flattened vs both;5-10 years;Intermediate;JavaScript;;163;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 4;"const cabbageJar= Jar(crushedCabbage);)";387;;;;;;;Line 5;|>Jar;1115;;;;;;;;;;;;;Line 5;|>(_=>new Jar(_));311;;;;;;;;;;;;;;;;;;;;;628;"const kimchi =""cabbage"" |>wash |>cut |>salt |>new Jar(#) |>add(""spicy paste"",#) |>stir |>ferment(#,2) |>await # |>#.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;;
2202;Jun 4, 2019 7:04:18 pm;Jun 4, 2019 7:19:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559700258_5cf72322cc0d96.63880054;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;217;;"""function""";;;;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;salty;207;;;;;;;;;;;;;;;;;;;;;;Line 5;Add ), but entire block looks like a total mess;49;;;;;;;;;;;;;;;;;;;;;116;status quo like here. wash() cut() salt() new Jar() add() stir() ferment(blabla) But this one data model is not good enough;a bowl of jogurt with berries;Other - Write In (Required);dirty mess;i don't know, just check fetch result and solve if statements;;;;;;;;;;;;;The Status quo;;;Please stop it.
2206;Jun 4, 2019 7:19:59 pm;Jun 4, 2019 7:34:49 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559701199_5cf726cfa350e5.28410071;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;84;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;59;;;;;;;;;;;;;;;;Line 10;(#) => #.takeOne();215;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;189;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Working through all of the code branches was a pain :(;;;;;;;;;The proposal;;It's OK. Not the easiest thing to type, but I'm sure it would get better with muscle memory.  It's also quite nice to read, so that's cool.;
2207;Jun 4, 2019 7:19:34 pm;Jun 4, 2019 8:15:38 pm;Complete;;;English;;1559701174_5cf726b684dbc8.29426389;;;nested vs proposal 2;3-5 years;Intermediate;TypeScript;;175;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 1;;582;;;;;;;;;;;;;;;;Line 9;;70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;553;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste} |> stir |> ferment |> await |> #.takeOne() ";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;not good.... I need snippet;
2211;Jun 4, 2019 7:42:41 pm;Jun 4, 2019 8:01:39 pm;Complete;;;English;;1559702561_5cf72c21a4c451.50613899;;;flattened vs proposal 2;3-5 years;Advanced;Other - Write In (Required);C#;60;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;change `salt` to `salty`;171;;;;;;;Line 9;await #;198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;224;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;a bowl of jogurt with berries;whitespace formating;;Read back the result of fetch very often;;;;;;;;;The proposal;;;
2213;Jun 4, 2019 8:07:28 pm;Jun 4, 2019 8:24:01 pm;Complete;;;English;;1559704047_5cf731efe69ff0.09472213;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;194;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 4;not new;85;;;;;;;;;;;;;;;;;;;;;;Line 5;add );38;;;;;;;;;;;;;;;;;;;;;255;const kimchi = 'cabbage' |> wash |> cut |> salt |> (_=> new Jar(_)) |>(_=> add('spicy paste')) |>stir |>(_=> ferment(_, 2)) |> await |> (_=> _.takeOne());a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;;;;;The proposal;;;
2216;Jun 4, 2019 8:36:39 pm;Jun 4, 2019 9:00:28 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559705798_5cf738c6dd6e00.63434356;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;281;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 10;), 14;148;;;;;;;;;;;;;;;;Line 7;|> salt(#);121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;485;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);I think I was able to follow;;;;;;;;;;The proposal;;easy;
2222;Jun 4, 2019 10:05:47 pm;Jun 4, 2019 10:24:46 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559711146_5cf74daae56cd7.10734296;;;nested vs flattened;5-10 years;Advanced;TypeScript;;217;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 10;add the number of days after `salt`;118;;;;;;;Line 6;rename `saltCabbageJar` to `saltyCabbageJar`;40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Figuring out which arguments go into which function;One can start reading at the end and everything is compact;Constantly having to go from variable name on the left to the function on the right;Figure out which arguments go into which function;;;;;;;
2223;Jun 4, 2019 10:13:45 pm;Jun 4, 2019 10:27:06 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559711625_5cf74f896e3383.51138108;;;flattened vs both;5-10 years;Advanced;TypeScript;;143;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14); // but typescript would prevent it entirely";173;;;;;;;Line 9;|> await #;85;;;;;;;;;;;;;Line 5;(_ => new Jar(_));23;;;;;;;;;;;;;;;;;;;;;180;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ((_) => await ferment(_, 2)) |> _ => _.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;not really bad;await # is kinda error prony but i guess typescript would handle it for us (as well as salsa language services for js)
2227;Jun 4, 2019 11:24:00 pm;Jun 4, 2019 11:42:47 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559715840_5cf76000c31052.09681037;;;nested vs both;more than 10 years;Advanced;C++;;114;3;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the status quo better;;Line 12;;269;;;;;;;;;;;;;;;;Line 10;takeOne();114;;;;;;;;;;;;;Line 8;) await;103;;;;;;;;;;;;;;;;;;;;;294;"kimchi =  |> wash |> cut |> new Jar(_) |> salt |> add(""spicy paste"", _) |> ferment(_, 2) |> await";;;;;;;;;;;;;;;Other - Write In (Required);the pipeline with #, but use the _ char, instead;;;;
2228;Jun 4, 2019 11:38:33 pm;Jun 5, 2019 12:04:20 am;Complete;;;English;;1559716713_5cf763697ba632.85557294;;;nested vs both;3-5 years;Intermediate;JavaScript;;184;3;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;Add numdays param to ferment;316;;;;;;;;;;;;;;;;Line 7;Pass # to salt ?;315;;;;;;;;;;;;;Line 5;Close parenthesis;80;;;;;;;;;;;;;;;;;;;;;328;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", 2) |> stir |> ferment(#, 2) |> await # |> #.takeone()";;;;;;;;;;;;;;;Pipeline with #;;;;Felt natural;
2229;Jun 4, 2019 11:45:03 pm;Jun 5, 2019 12:06:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559717103_5cf764ef088bf1.71637299;;;flattened vs proposal 1;more than 10 years;Intermediate;JavaScript;;79;function;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;rename parameter;145;;;;;;;;;;;;;;;;;;;;;;Line 5;add bracket at the end of the line;36;;;;;;;;;;;;;;;;;;;;;248;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await";a bowl of jogurt with berries;inconsistent style;;not the operator, only re-checking the JSON response comment and the const variables at the beginning.;;;;;;;;;;;;;The proposal;;ok and while I understand that the optics of '|>' represent the operators purpose best, typing '>|' seems to be easier (US keyboard layout).;you should ask about the keyboard layout and platform ppl. use as its affects the answers given.   E.g. on German MacOS keyboard it's really hard to type some symbols (I think pipe is alt-6), while Windows/PC layout can be more natural. In any case, US key mapping is the easiest.
2231;Jun 4, 2019 11:53:38 pm;Jun 5, 2019 12:13:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559717618_5cf766f2a18933.88532351;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;99;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";200;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));65;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => takeOne())";a bowl of jogurt with berries;Other - Write In (Required);"no definition of ""fillBowl"" func";;;;;;;;;;;;;;The proposal;;Strange but its matter of getting used to to the new grammar.;
2234;Jun 5, 2019 1:21:29 am;Jun 5, 2019 1:38:20 am;Complete;;;English;;1559722889_5cf77b890e35c5.87486644;;;flattened vs both;5-10 years;Advanced;TypeScript;;165;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Fix typo to `saltyCabbageJar` from `saltCabbageJar`;159;;;;;;;Line 10;;162;;;;;;;;;;;;;Line 5;Fix syntax `(_ => new Jar(_))`;49;;;;;;;;;;;;;;;;;;;;;196;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Smooth.;
2235;Jun 5, 2019 1:29:05 am;Jun 5, 2019 2:13:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559723344_5cf77d50f32027.08438338;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;1347;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar --> saltyCabbageJar;145;;;;;;;;;;;;;;;;;;;;;;Line 5;Add parantheses;29;;;;;;;;;;;;;;;;;;;;;231;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ => stir(_, 2)) const kimchi = kimchiJar.takeOne()";a bowl of jogurt with berries;identifiers;;line 12 - Using the pipe operator for a single function call is not effective '_' identifier is hard to keep track of;;;;;;;;;;;;;The proposal;;8/10;Do we *have* to put parentheses around the arrow function? If yes it is not convenient Also, would there be a way to include the await in one Pipeline operation?
2237;Jun 5, 2019 1:38:14 am;Jun 5, 2019 1:50:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559723893_5cf77f75e00448.66169835;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;151;function;"""function""";;;;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;use correct variable name;115;;;;;;;;;;;;;;;;;;;;;;Line 5;add the closing parenthesis;88;;;;;;;;;;;;;;;;;;;;;59;;a bowl of jogurt with berries;too many if statements;;inconsistent style, too many if statements, whitespace formatting, density of operators;;;;;;;;;;;;;Other - Write In (Required);i like both. Depends on the context (eg clarity etc);It takes a lotta key presses;
2240;Jun 5, 2019 2:24:09 am;Jun 5, 2019 3:01:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559726649_5cf78a39adcdf5.87627495;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;81;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Amend the variable name passed to ferment to saltyCabbageJar;76;;;;;;;Line 9;Needs to await #;425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;189;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);Nested ternaries!! Satan's if statements;Up until line 9 it was fine, maybe not amazing but perfectly readable. When it hit the nested ternaries with internal pipes I had to read things twice, because the pattern of line breaks especially makes it really hard to follow the logical flow.;;;;;;;;;The proposal;;It's fine, I'd prefer it to be a single keystroke but I'm sure it'll quickly get aliased in my text editor.;Really, really like this idea of doing user research with developers on language proposals- much better than endless arguing in Github threads!  Might also be useful to ask people about their preferred style(s) of programming with some proposals. I'm predisposed towards this proposal because I already do a decent amount of FP, other people are probably not the same.
2241;Jun 5, 2019 2:41:26 am;Jun 5, 2019 3:37:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559727686_5cf78e469dbf00.96072265;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;152;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";46;;;;;;;Line 9;|> await # // you should await for something ??;122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;73;;;;;;a bowl of jogurt with berries;density of operators;;hardest to understand was line 9.  because i wasnt really understanding what you do with the #.jogurt. also the # all over the place.  Line 12 is terrible as well  2 much terseness is also not so good I guess.;;;;;;;;;Other - Write In (Required);why pipe ? why not compose? why #?;"I guess I understand the reasoning since we all end up reading stuff from left to right but the begining is a bit weird:  const a = ""input""  |> doStuffWithIt  |> butNotItsInAnotheParamOhNo (1, 2, #)  |> await # // but what about  just await ? will it even work?   we could also follow some more declarative approach and in the end we apply the input (so more compose styled)";i'm scared about what this implies . i think functional programming is amazing , I am still learning more about it. This can be so badly used though.  I am just glad I am not the one having to decide this . I wish you guys good luck!   
2246;Jun 5, 2019 4:28:42 am;Jun 5, 2019 5:00:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559734122_5cf7a76a9dcfe9.84560757;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;82;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"fix typo in line 6, add the ""y"" (or remove the ""y"" in line 5)";164;;;;;;;;;;;;;;;;;;;;;;Line 5;Add missing parenthesis in line 5;76;;;;;;;;;;;;;;;;;;;;;520;"const sauerKraut = ( await ferment( salt( add( ""water"", new Jar( wash( ""cucumber"" ) ) ) ), 2 ) ).takeOne();";a bowl of jogurt with berries;whitespace formating;;"No problems reading it except for lines 14-15 which I had to re-read because of the badly placed newline, especially following the badly written ""if"" test, which, of course, would have been better as ""(_.jogurt && _.jogurt.ready && ( isBreakfast || isSnackTime ) )"". The use of the pipeline operator in line 12 would have been easier to read as ""fillPlate( _.pickles )"" so I guess that slowed me down out of irritation. :)";;;;;;;;;;;;;The proposal;;Felt great.;JavaScript is the most expressive language I know. Having many ways of writing code is great. The pipeline operator has its niche and I'd use it when it would make my code more readable. FWIW.
2247;Jun 5, 2019 5:02:40 am;Jun 5, 2019 5:22:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559736159_5cf7af5fed53a7.16409393;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;77;funciton;"""object""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 11;providing a default value to the second argument;165;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add the missing brace;116;;;;;;;;;;;;;;;;;;;;;285;const kimchi = await (_ => ferment) |> (_ => stir) |> (_ => add('spicy paste')) |> (_ => new Jar()) |> (_ => salt) |> (_ => cut) |> (_ => wash) ('cabbage');a bowl of jogurt with berries;density of operators;;Going up and down to check the Bool values;;;;;;;;;;;;;The proposal;;a bit uncomfortable, but it's a combination I never wrote;
2248;Jun 5, 2019 5:06:44 am;Jun 5, 2019 8:48:52 am;Complete;;;English;;1559736404_5cf7b0548fd550.74187054;;;flattened vs proposal 1;5-10 years;Intermediate;JavaScript;;189;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";309;;;;;;;;;;;;;;;;;;;;;;Line 5;(_=>new Jar(_));85;;;;;;;;;;;;;;;;;;;;;284;"const ferment = ""cabbage"" |> ( _ => wash(_) ) |> ( _ => cut(_) ) |> ( _ => salt(_) ) |> ( _ => new Jar(_) ) |> ( _ => add( 'spicy paste', _) ) |> ( _ => stir(_) ) |> ( _ => ferment(_, 2) ) |> await;";a bowl of jogurt with berries;Other - Write In (Required);result of a line is passed as parameter to the operation executed in the second line ... once you got this you will read it quickly. moreover, all those if statements in the last function make the code less easier to read. _ instead of a named parameter can be confusing.;I start from a String ... I imagine it passing down to the other functions and producing all the results ... then I arrive at the last function and I imagine all the if statement working with the json produced in the comment.  I am also not sure if I got the exact result of this operation :D ;;;;;;;;;;;;;Other - Write In (Required);proposal seems to have a lot of pro ... syntactically it is not so easy to grasp ;Not very nice, but nothing better come to my mind;Thank for everything you do for the web! :) 
2250;Jun 5, 2019 5:07:54 am;Jun 5, 2019 5:51:29 am;Complete;;;English;https://qsurvey.mozilla.com/;1559736474_5cf7b09a3b3280.96156447;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;95;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;provide numday argument;360;;;;;;;;;;;;;;;;Line 10;sauerkraut.takeOne();326;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;422;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;line 8 has a very big condition, nested ternary expressions made the code a bit hard to reason about. and I was wondering why use # at line 9 and use object destructuring at line 12 within an IIFE. too much wrapping;;;;;;;;;Other - Write In (Required);"the proposal but without the need for ""#"" in await #. seems redundant";I found myself doing \> more often. also, having two characters both with (SHIFT). these two characters are awkwardly placed relative to each other on the keyboard. I found myself struggling a bit to write it fast;I like the idea of piping. But the syntax is very weird and not pleasant to write for my hands. 
2252;Jun 5, 2019 5:22:44 am;Jun 5, 2019 5:40:37 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559737363_5cf7b413da2af1.66320733;;;flattened vs both;3-5 years;Intermediate;JavaScript;;158;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);)";166;;;;;;;Line 9;|> await #;82;;;;;;;;;;;;;Line 5;|> (_=>new Jar(_));95;;;;;;;;;;;;;;;;;;;;;254;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not too bad. I'm used to the wonky pipeline operator in R (%>%) so I'm used to typing or shortcutting pipeline operators. Still saves typing over the alternatives.;
2260;Jun 5, 2019 6:04:10 am;Jun 5, 2019 6:52:47 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559739850_5cf7bdca830880.85929466;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;179;3;"""error""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 12;well, you need to add the number of days as the second argument to ferment, line 10 or 11 would work depending on however you want to do it.;1362;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;remove the first ( on line five or add another at the end;114;;;;;;;;;;;;;;;;;;;;;392;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> _ => new Jar(_) |> _ => add('spicy paste',_) |> stir |> _ => ferment(_,2) |> await const kimchi = kimchiJar.takeTwo()";a bowl of jogurt with berries;Other - Write In (Required);honestly no complaints, its not terrible;longest part was to verify the conditionals i suppose;;;;;;;;;;;;;Other - Write In (Required);both are fine;fine;both are good i guess.  status quo visualizes the const type right in front of it where the proposal has you trace to the bottom, but proposal makes it easier to read whats actually happening, easier to write too
2262;Jun 5, 2019 6:13:42 am;Jun 5, 2019 6:47:18 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559740422_5cf7c006b9ab03.00426971;;;nested vs proposal 1;3-5 years;Advanced;TypeScript;;280;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));52;;;;;;;;;;;;;;;;;;;;;274;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;Reading through the first 10 lines was nice and easy (I've decided I like pipelines over the current means now). The number of conditions evaluated in each of the if statements caused the most slow down. The function block was jarring in it's inconsistency. Line 15 with it's parameter not being _ was also derailed things a bit.;;;;;;;;;;;;;The proposal;;A little weird at first but after a few goes it was starting to feel as natural as typing =>.;I have read about the pipeline operator before but always felt it looked a bit weird and didn't feel that exciting. Actually writing some code with it I'm convinced I could find some nice uses for it.
2265;Jun 5, 2019 6:54:08 am;Jun 5, 2019 7:07:36 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559742848_5cf7c98046ce63.48263670;;;nested vs flattened;3-5 years;Expert;JavaScript;;78;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 4;add(;123;;;;;;;;;348;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const washedCabbage = wash(""cabbage""); const cutCabbage = cut(washedCabbage); const saltedCabbage = salt(cutCabbage); const kimchiJar = new Jar(saltedCabbage); const kimchiJarWithPaste = add(kimchiJar, ""spicy paste""); const stirredJar = stir(kimchiJarWithPaste); const jar = ...";;;;;;;;;;readability;none;;;;;;;;;
2268;Jun 5, 2019 8:15:45 am;Jun 5, 2019 8:55:06 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559747745_5cf7dca16b6e15.23876682;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;194;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;s/saltCabbageJar/saltyCabbageJar;151;;;;;;;Line 10;I have no idea;482;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;215;"const kimchiJar = ""cabbage""    |> wash    |> cut    |> salt    |> new Jar(#)    |> add(""spicy paste"" #)    |> stir    |> ferment(#,2)    |> await #    |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;Other - Write In (Required);I just prefer writing in a different style, I guess.;_Very_ bad.  I'm using a Spanish keyboard atm, and the pipe | uses AltGr+1 (right hand AltGr, left hand 1) and then the > needs Shift+< (right hand on Shift, left hand on < ).  I can't say I like it.  (Also, the # is AltGr+3);
2270;Jun 5, 2019 8:33:55 am;Jun 5, 2019 8:51:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=www.mozilla.org&utm_medium=referral&utm_campaign=developer-hub;1559748835_5cf7e0e34bf268.01191006;;;nested vs both;3-5 years;Intermediate;Other - Write In (Required);php;131;integer;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;, 14;151;;;;;;;;;;;;;;;;Line 9;|> await #;158;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;137;"const kimchiJa = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> ferment(#, 2);";;;;;;;;;;;;;;;Pipeline with #;;;;Fast, but unusual (need to think from the inside out).;Wouldn't want to miss this feature
2271;Jun 5, 2019 9:06:31 am;Jun 5, 2019 9:31:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559750791_5cf7e88757db50.08760056;;;flattened vs both;more than 10 years;Expert;JavaScript;;159;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Correct the typo of the variable;142;;;;;;;Line 5;Remove the new keyword;188;;;;;;;;;;;;;Line 5;Add a closing parenthesis;105;;;;;;;;;;;;;;;;;;;;;206;;;;;;;;;;;;;;;;Other - Write In (Required);"Pipeline with # but I feel it should appear also in the lines like ""salt"" to let the programmer ""see"" what is passing to the function and not imagine it. It is confusing to me to see just a stand alone function name which accepts args but I dont see them passed. Also the open closing parenthesis for the args feel more familiar";;;I could get used to it I think.;
2274;Jun 5, 2019 9:29:05 am;Jun 5, 2019 9:46:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559752145_5cf7edd1aecbf7.45193410;;;nested vs flattened;more than 10 years;Expert;TypeScript;;44;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 11;"add `, 14` before the `);`";108;;;;;;;Line 5;s/saltyCabbageJar/saltCabbageJar/;49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const prepared = pipe(   ""cabbage"",    wash,    cut,    salt,    Jar,    j => add(""spicy paste"", j),    stir) const kimchiJar = await ferment(preparedJar, 2)  function pipe(x, fs) {   let result = x   for (const f of fs) {     result = f(result)   }   return result }";;;;;;;;;;"The process is written backward and has to be read backward. Subparts are visible but are sometimes misleading -- compare `salt(add(""water""`, which is useless, to `new Jar(wash(""cucumber""))`.  JS formatting is not obvious, so humans can argue about the correct style.";Dependencies are implicit in position, which the human eye is decent at picking up. Long programs written this way have more variety in line length and complexity, which makes the code easier to scan.;Dependencies are not obvious. You have to come up with temporary names at each step. Both are easy to (1) get wrong (2) unintentionally swap. (1) will break your code, but (2) just breaks the readability of it.  Long programs written this way are harder to scan because everything looks the same, and takes three times as much vertical space.;It's easier to read this style carefully than the expression-only style.;;;;;;;
2276;Jun 5, 2019 9:41:10 am;Jun 5, 2019 10:12:14 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559752870_5cf7f0a6d25b71.67853583;;;flattened vs proposal 2;5-10 years;Intermediate;JavaScript;;175;3;"""string""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrutJar = await ferment(saltyCabbageJar, 14);";116;;;;;;;Line 7;salt(#);126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;327;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;null;too many if statements;;I essentially had to format this in my head before I could even read it. Nested pipelines seems like it's defeating the purpose of pipelines.;;;;;;;;;The proposal;;It'd be easier if it were |};
2279;Jun 5, 2019 9:52:00 am;Jun 5, 2019 10:11:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559753520_5cf7f3309bfe99.00980901;;;nested vs both;0-2 years;Intermediate;C++;;240;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;Add number of days (14);138;;;;;;;;;;;;;;;;Line 9;|> await #;233;;;;;;;;;;;;;Line 5;add closing );33;;;;;;;;;;;;;;;;;;;;;169;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;There are other good languages implementing forward pipeline using this operator, so I am used to it;
2284;Jun 5, 2019 1:41:51 pm;Jun 5, 2019 1:58:46 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559767311_5cf8290f459d95.37251277;;;nested vs flattened;more than 10 years;Beginner;Other - Write In (Required);C, Lisp, Lua;71;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 1 better;;;;;;Line 11;"insert "", 14"" at start of line 11 or end of line 10";149;;;;;;;Line 6;"Fix typo.  Missing ""y"" in ""saltyCabbageJar""";47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;It is formatted badly but looks correct.  Why rewrite it?;;;;;;;;;;"Only one thing: It's a little hard to see which function has ""2"" as its argument.  It should be ""ferment"" but then why are there 2 close parens after ""2""?  I think there should be one.";It's easy to read the order of the steps.  Functions should compose like mathematical functions do.;"First, I assume all those vars are needed for some reason other than to create ""pickleJar"" -- but I can't think of why that might be.  This code is a mess because you don't know it's a composition of functions (or a pipeline) from how it looks.  You have to match each var's definition with how it is used in order to see what is happening.  And that is made difficult by all the unneeded var names.";"One thing: It's easy to see that the ""2"" is an arg to ""ferment"".";Was the syntax error in Pattern 1 on this page intentional?  There are 5 open parens and 6 close parens.;;;;;;
2286;Jun 5, 2019 2:45:56 pm;Jun 5, 2019 3:00:15 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559771156_5cf8381453d4c7.77382127;;;flattened vs proposal 2;5-10 years;Expert;TypeScript;;55;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";128;;;;;;;Line 10;;70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;129;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2) |> ferment |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;multiple use of # within one expression;;;;;;;;;The Status quo;;ok;"I almost never notice this pattern in production code. If functions are piped, then it is usually ""merged"": const a = compute1(); const b = compute2(); const c = compute3(a, b);"
2290;Jun 5, 2019 4:10:03 pm;Jun 5, 2019 4:24:19 pm;Complete;;;English;https://hacks.mozilla.org/;1559776203_5cf84bcb092f50.36520884;;;flattened vs proposal 1;more than 10 years;Beginner;Java;;73;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar;39;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));45;;;;;;;;;;;;;;;;;;;;;190;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> Jar |> (_ => add(""spicy paste"", _)) |> (_ => ferment(_, 2)) |> await;";a plate of pickles;Other - Write In (Required);Too many awaits. Mixture of dataflow pipelines with control flow conditionals.;;;;;;;;;;;;;;The proposal;;;Have you considered first class support for fan-outs (tee) and fan-ins? I.e. where a single source supplies data to several sinks, and where a single sink collates data from multiple sources?
2291;Jun 5, 2019 4:18:40 pm;Jun 5, 2019 4:38:21 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559776720_5cf84dd0b1f571.33694511;;;flattened vs proposal 2;0-2 years;Beginner;Other - Write In (Required);BASIC;160;I don't know.;;;;;;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;;I don't know.;70;;;;;;;;I don't know.;83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;104;I'd just copy the code... ?;;;;;a bowl of jogurt with berries;Other - Write In (Required);It has verbose - much to read to arrive to an answer quick;Calculations and recalculations of mostly booleans. I like booleans but... I guess it has much to do with the subject. I'm more of a mathematician and scientist than a cook... ?;;;;;;;;;Other - Write In (Required);The proposal has much less verbose!;I will take time to get used to it.;This survey was fun- despite my being green with JS. I loved JS since I found out about about a year ago. I used to program in BASIC beginning in 1983, though. I'm learning JS now cause it's standard now.
2293;Jun 5, 2019 4:48:19 pm;Jun 5, 2019 5:12:15 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559778499_5cf854c3311c96.65650971;;;flattened vs both;3-5 years;Intermediate;Python;;218;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;Replace saltCabbageJar with saltyCabbageJar;67;;;;;;;Line 10;Unsure. Not confident on this answer.;400;;;;;;;;;;;;;Line 5;Add additional closing paren;29;;;;;;;;;;;;;;;;;;;;;419;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> ferment   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;I often accidentally typed a backslash instead of |.;
2295;Jun 5, 2019 5:57:11 pm;Jun 5, 2019 6:43:17 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559782631_5cf864e7878026.82013768;;;nested vs proposal 2;0-2 years;Expert;JavaScript;;208;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";390;;;;;;;;;;;;;;;;Line 8;|> await ferment(#, 14);203;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1051;"const kimChi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;whitespace formating;;Mixing some operators on new lines and some not on new lines made it difficult to scan the code, especially inside of the ternary with a complex condition.;;;;;;;;;The proposal;;Completing this survey on a mobile keyboard was rather inconvenient, but no more difficult than writing code on a mobile keyboard on general. I do find typing the combination a little slow on a regular keyboard, using my right pinky for both keys.;I definitely prefer the '#' placeholder to the anonymous functions with '_'
2296;Jun 5, 2019 6:27:26 pm;Jun 5, 2019 7:23:01 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559784446_5cf86bfe60f728.58637193;;;nested vs proposal 1;5-10 years;Intermediate;JavaScript;;431;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"Add "", 14"" after "")"" on line 10.";461;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add "")"" to the end on the line 5.";182;;;;;;;;;;;;;;;;;;;;;352;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))";a bowl of jogurt with berries;inconsistent style;;"""If a function has multiple arguments, it must be wrapped in a function"". For me, this causes rereading a line. For an example: My eye movement goes from left to right on ""foo"" |> func1 But it goes back to left on ""bar"" |> (_ => func1(_))";;;;;649;;;;;;;;Other - Write In (Required);better, but hope partial application syntax added;|>;
2299;Jun 5, 2019 9:13:37 pm;Jun 5, 2019 9:35:03 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559794417_5cf892f11c31d5.87624619;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;64;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;", number);";132;;;;;;;;;;;;;;;;Line 9;await #;130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;264;"const kimchiJar = ""cabbage"" |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;nested pipelines;;The destructuring arrow function was confusing given that it could be #.wine.  Having a conditional in the pipeline breaks the flow (so to say), since now we have two conceptual pipelines. Splitting it into two separate steps would fix that.  Putting the nested pipelines on one line might also help make it clear they belong together.;;;;;;;;;The proposal;;Easy enough. `|` would be even nicer if it didn't have an existing behavior but this is a close second.;I think it may make sense to enforce using `#` on all lines, including for single functions that take one argument.  Also I'd hope that this proposal would allow currying outside of pipelines using #.  Finally making sure this works well with sync and async iterators is critical (including by lazily executing the pipeline). Maybe having the option to return a composed but unexecuted pipeline (first argument = #)?) could help, e.g. with `.map` or other stream/iterator objects.
2303;Jun 5, 2019 11:44:02 pm;Jun 5, 2019 11:58:21 pm;Complete;;;English;;1559803442_5cf8b6329f3ad7.02419286;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;449;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 4;;155;;;;;;;;;23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6;;;;;;;;;;;;;;;;;;;;;
2304;Jun 5, 2019 11:59:44 pm;Jun 6, 2019 1:03:29 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559804384_5cf8b9e04162e0.09707499;;;nested vs both;5-10 years;Advanced;TypeScript;;55;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the streamlined pipeline proposal better;;Line 10;, 2;142;;;;;;;;;;;;;;;;Line 9;await #;112;;;;;;;;;;;;;Line 5;(_ => new Jar(_));24;;;;;;;;;;;;;;;;;;;;;182;"conts kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ferment |> await |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;;First pipeline example seems to support tuple destructuring, that's a nice thing to have
2310;Jun 6, 2019 2:28:59 am;Jun 6, 2019 2:46:18 am;Complete;;;English;;1559813339_5cf8dcdb1f7e99.68975365;;;flattened vs both;3-5 years;Intermediate;JavaScript;;35;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 4;lack of add;219;;;;;;;;;16;;;;;;;;;;;;;;;10;;;;;;;;;;;;;;;;;;;;;622;;;;;;;;;;;;;;;;;;;;;
2313;Jun 6, 2019 2:56:12 am;Jun 6, 2019 3:04:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559814972_5cf8e33c48d9a6.80815665;;;nested vs flattened;3-5 years;Intermediate;Java;;103;number;"""error""";;"add.call(null, 10);";;;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 12;;56;;;;;;;Line 6;"const sauerkrautJar await ferment(saltyCabbageJar,14);";170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;it's pretty hard to read multiple function in one line.;use more variable?;too much variable;it's more readable;;;;;;;
2319;Jun 6, 2019 3:09:49 am;Jun 6, 2019 3:16:05 am;Complete;;;English;;1559815788_5cf8e66ce54d72.98331232;;;flattened vs both;3-5 years;Advanced;JavaScript;;102;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbagejar);)";84;;;;;;;;;21;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));34;;;;;;;;;;;;;;;;;;;;;7;;;;;;;;;;;;;;;;;;;;;
2321;Jun 6, 2019 3:10:39 am;Jun 6, 2019 3:30:01 am;Complete;;;English;;1559815839_5cf8e69f1c41d7.05710148;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;135;3;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltyCabbageJar;162;;;;;;;Line 9;await #;59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;172;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Hardest part was working out conditions. I have a bit of Haskell background and code density is the hardest part of understanding such code. Too much stuff going on.;;;;;;;;;The proposal;;"Always missed ""|"" part and had to go back and add it.";"""await #"" is awkward. I think it shouldn't differ from  one-argument function. Or even more. I'd prefer ""|> await ferment(#,2)"" instead of ""|> ferment(#,2)|>await"""
2323;Jun 6, 2019 3:10:57 am;Jun 6, 2019 3:52:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559815855_5cf8e6af74e4f6.40809509;;;flattened vs both;3-5 years;Advanced;JavaScript;;250;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbagejar, 14);)";719;;;;;;;Line 9;await #;301;;;;;;;;;;;;;Line 5;(_ => new Jar(_));105;;;;;;;;;;;;;;;;;;;;;317;"const kimchiJar = ""cabbage""  |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline with #;;;;just fine;do I must return ???
2327;Jun 6, 2019 3:31:09 am;Jun 6, 2019 3:51:48 am;Complete;;;English;https://old.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559817069_5cf8eb6d62dcb0.03804825;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;212;"""number""";"""error""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;Add , 14 before the parenthesis on line 11.;88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a closing parenthesis on line 5.;55;;;;;;;;;;;;;;;;;;;;;391;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (saltedCabbage => new Jar(saltedCabbage))   |> (kimchiJar => add(""spice paste"", kimchiJar)   |> stir   |> (kimchiJar => ferment(kimchiJar, 2))   |> await   |> (kimchiJar => kimchiJar.takeOne())";a bowl of jogurt with berries;density of operators;;The logic operators from line 11 through 19 make the code very hard to read. The pipeline syntax on line 14 and 15 are unexpected, I would have expected regular syntax to fill the bowl rather than a pipeline.;;;;;;;;;;;;;The proposal;;Not any more difficult than any other combination of two characters used in JS (e.g. arrow functions).;I really dislike using the underscore to pass parameters to arrow functions. I would much rather see descriptive names in those places.
2333;Jun 6, 2019 3:36:13 am;Jun 6, 2019 3:47:10 am;Complete;;;English;;1559817373_5cf8ec9d9e9346.55054924;;;nested vs flattened;0-2 years;Advanced;TypeScript;;89;number;"""function""";"add.bind(null, 10);";;;;;;;;Very often;Sometimes;I like Pattern 1 better;;;;;;Line 11;Pass numdays;80;;;;;;;Line 5;Rename saltyCabbageJar to saltCabbageJar;63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const getKimchJar = async () => {       const jar = new Jar(salt(cut(wash(""cabbage""))));      return ferment(stir(add(""spicy paste"", jar))); };  const kimchiJar = await getKimchiJar(); const kimchi = kimchiJar.takeOne();";;;;;;;;;;The execution order of the functions are backward from reading order  Everything is on one line;No intermediate varibles, much more consise;"Multiple variables that only get used once; too cluttered";Spread out over multiple lines;Pattern 1 but with fixed order and better multiline would be best;;;;;;
2334;Jun 6, 2019 3:43:30 am;Jun 6, 2019 4:01:06 am;Complete;;;English;;1559817810_5cf8ee522f60c4.69382290;;;flattened vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);php;71;3;"""function""";;;"y => add(10, y);";;;;;;;;;;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;192;;;;;;;Line 9;await -> await #;68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;140;"const kimchi = ""cabbage"" |> wash |>cut |>salt |>new Jar(#) |>add(""spicy paste"", #) |>stir |>await ferment(#, 2) |>#.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);ternary on top of piping is a bit abstraction dense. I would pipe it to a function that does the heavy lifting...;Lines 9 and 10, as well as 11 and 12 were the most complex for me to read, because ternary and pipe are unusual to see in actual code.  Plus there is not definition of fillBowl, so I was confused for a second.;;;;;;;;;The proposal;;Took 5 tries before it became straightforward. It would(will) stick to muscle memory in no time.;Mozilla is good people :)
2335;Jun 6, 2019 3:47:02 am;Jun 6, 2019 4:45:06 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559818022_5cf8ef265baf39.20448809;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;2478;"""number""";"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Often;;;;I like the proposal better;Line 11;", 2);";150;;;;;;;;;;;;;;;;Line 9;|> await #;174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;230;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;137;;;;;;;;The proposal;;Super easy. It's so much better that the flow of ready is the same as the order the functions executes.;
2336;Jun 6, 2019 3:51:11 am;Jun 6, 2019 4:07:31 am;Complete;;;English;;1559818271_5cf8f01f64e342.88275221;;;nested vs proposal 1;5-10 years;Expert;TypeScript;;203;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;"at line 10 add "", 14""";152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;at line 5 add closing bracket;40;;;;;;;;;;;;;;;;;;;;;264;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => add(""spicy paste"", new Jar(_))) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;whitespace formating;;mostly formatting and if statements;;;;;;;;;;;;;The proposal;;Easy enough;
2337;Jun 6, 2019 3:52:26 am;Jun 6, 2019 4:47:42 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559818345_5cf8f069e20173.75926146;;;nested vs both;5-10 years;Advanced;JavaScript;;328;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;"add the parameter ""numberOfDays"" to the function ""ferment""";89;;;;;;;;;;;;;;;;Line 9;await #;2467;;;;;;;;;;;;;Line 5;add a closing parens at the end;48;;;;;;;;;;;;;;;;;;;;;195;"const cabbage = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#)   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;easier than deeply nested functions, easier to see the flow of the pipeline;
2338;Jun 6, 2019 3:52:52 am;Jun 6, 2019 4:26:36 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559818372_5cf8f0848ef949.88419561;;;nested vs both;5-10 years;Advanced;JavaScript;;207;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;), 14;297;;;;;;;;;;;;;;;;Line 9;await #;312;;;;;;;;;;;;;Line 5;(_ => new Jar(_));131;;;;;;;;;;;;;;;;;;;;;335;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not so hard ^^ (but i use a BÃPO keyboard);Good initiative !
2347;Jun 6, 2019 4:00:14 am;Jun 6, 2019 4:08:04 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559818814_5cf8f23e56e1b0.78624605;;;nested vs flattened;5-10 years;Expert;TypeScript;;104;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Sometimes;I like Pattern 1 better;;;;;;Line 10;Add number of days argument;79;;;;;;;Line 4;remove New keyword (if I'm reading type defs correctly);78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Pipeline operator would be ideal here;;;;;;;;;;Nested functions are difficult to read inside-out;Few variables to track;Lots of variables to keep track of, even if they're unassignable;Follow the logic top-down as opposed to inside-out;Pipeline operator!;;;;;;
2349;Jun 6, 2019 4:04:53 am;Jun 6, 2019 4:17:46 am;Complete;;;English;;1559819092_5cf8f354dcb339.74461134;;;nested vs proposal 1;5-10 years;Expert;Other - Write In (Required);F#;58;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 1;Add a number;77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add );30;;;;;;;;;;;;;;;;;;;;;242;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> await |> (_ => ferment(_, 2))";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The Status quo;;;As an F# developer, I know about the useful of the pipe operator. Where it falls flat in JS is the lack of automatic function currying and partial function application. This means that to fully utilize the pipeline operator, suddenly a lot of anonymous functions to be written within the pipeline to use the operator. Alternatively, each function needs to be first rewritten to allow for function currying. As the proposal is right now, that is without function currying, it doesn't provide any benefit without introducing a lot of other more difficult to read complexities
2350;Jun 6, 2019 4:07:03 am;Jun 6, 2019 4:47:10 am;Complete;;;English;;1559819223_5cf8f3d72c4c50.62186031;;;flattened vs both;3-5 years;Advanced;TypeScript;;435;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 7;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";146;;;;;;;Line 9;|> await #;103;;;;;;;;;;;;;Line 5;(_ => new Jar(_));1326;;;;;;;;;;;;;;;;;;;;;164;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await #   |> #.takeOne(); ";;;;;;;;;;;;;;;Pipeline with #;;;;Dull, which is good;ð³
2351;Jun 6, 2019 4:07:25 am;Jun 6, 2019 4:24:37 am;Complete;;;English;;1559819245_5cf8f3ed09bcf6.72811760;;;flattened vs proposal 1;0-2 years;Intermediate;Java;;82;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;;;101;;;;;;;;;;;;;;;;;;;;;;Line 5;put a right parenthesis on eol 5;48;;;;;;;;;;;;;;;;;;;;;259;"let kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;It's mostly the length of the conditionals in the if sentence. That and the declarations of booleans at the beginning. There's also bad formatting in the line 14/15, but it's not very serious.;;;;;;;;;;;;;The proposal;;Well, considering that I use a spanish keyboard distribution, it's not so good, but that's just a matter of getting used to. Leaving that aside, quite good.;
2353;Jun 6, 2019 4:14:14 am;Jun 6, 2019 4:29:56 am;Complete;;;English;;1559819654_5cf8f586574c66.81963630;;;nested vs flattened;5-10 years;Advanced;JavaScript;;71;;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Very often;I like Pattern 2 better;;;;;;Line 1;(It's line 1 because the call is line 1). At line 10 I could add a coma and line 11 I would put the literal number 14.;161;;;;;;;Line 6;i would replace `saltCabbageJar` by `saltyCabbageJar`.;38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const saltyCabbageJar = new Jar(salt(cut(wash(""cabbage')))); const spicyCabbageJar = add('spicy paste', saltyCabbageJar); const kimchiJar = await ferment(stir(spicyCabbageJar), 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;"- Knowing when to close parentheses. - Knowing to which function the argument ""2"" is provided (I notice that it applies to `salt`, which I guess is wrong) - Understanding the order in which operations take place";- It's more terse, so there is less useless noise. If I'm only interesting by what I do with the pickleJar, I don't need to concern myself with much else (however an intermediate function would have done just as much good);"- There's too much noise. - Everything must have a name. It's kind of ok in this context because the ""domain"" makes it clear but it's often a struggle to name these intermediate variables.";"- The order of operations is very clear - It just ""reads well"" because it's obvious";Pattern 2 seems always better to me. It's just a bit noisy to read, and it's a pain to write. I think this is what deserves to be alleviated. Pattern 1 would be a no go, unless we're dealing with a mathematical formula that would be 1:1 with the code on a piece of paper (which is not the case for a recipe).;;;;;;
2376;Jun 6, 2019 5:22:51 am;Jun 6, 2019 6:04:28 am;Complete;;;English;;1559823771_5cf9059bc54e13.89384475;;;nested vs both;3-5 years;Advanced;TypeScript;;391;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;"by adding "", 14"" after salt's closing brace";738;;;;;;;;;;;;;;;;Line 10;by converting takeOne to a helper function that accepts a jar;184;;;;;;;;;;;;;Line 5;by adding a brace;27;;;;;;;;;;;;;;;;;;;;;629;"const kimchi = ""cabbage""    |> wash   |> cut   |> salt   |> ((_) => new Jar(_))   |> ((_) => add(""spicy paste"", _))   |> stir   |> ((_) => ferment(_, 2))   |> await   |> ((_) => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Quite easy, am used to it from other languages;Even though the # makes some parts slightly more complex, the added braces without it aren't ideal either
2378;Jun 6, 2019 5:32:24 am;Jun 6, 2019 5:49:35 am;Complete;;;English;;1559824344_5cf907d8c48066.36469823;;;nested vs both;more than 10 years;Advanced;JavaScript;;166;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 1;make numdays optional or add a numdays to end of line 10;215;;;;;;;;;;;;;;;;Line 10;add # to end of line 9;45;;;;;;;;;;;;;Line 5;add missing ) to end of line 5;30;;;;;;;;;;;;;;;;;;;;;234;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> takeOne";;;;;;;;;;;;;;;Pipeline;;;;;"const pickle = ""cucuber"" |> wash |> Jar.new |> add([""water""]) |> salt |> ferment(2) |> await |> takeOne"
2387;Jun 6, 2019 5:45:45 am;Jun 6, 2019 6:06:24 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559825145_5cf90af975e520.04267099;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;136;;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 4;Add needs to be called;170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Needs a closing paren;37;;;;;;;;;;;;;;;;;;;;;358;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;Having the await operators on their own lines causes a little disconnect while you try to figure out what exactly you're awaiting.  The lengthy if statement was a little jarring against the rest of the otherwise clean-ish syntax.  Having to safely check if something is ready adds some extra code that doesn't make things easier for the reader.;;;;;;;;;;;;;The proposal;;It would take a little while to get used to, but really not too bad.;I don't like having await on its own line. I would prefer it all in one.
2388;Jun 6, 2019 5:48:13 am;Jun 6, 2019 6:11:10 am;Complete;;;English;;1559825292_5cf90b8cf14361.73427363;;;nested vs flattened;more than 10 years;Expert;TypeScript;;168;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Very often;I like Pattern 2 better;;;;;;Line 10;add a comma and a number;147;;;;;;;Line 6;replace salt with salty;66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const jarContents = salt(cut(wash(""cabbage""))); const jar = new Jar(jarContents); const stirredJar = stir(add(""spicy paste"", jar)); const kimchiJar = await ferment(stirredJar, 2); const kimchi = kimchiJar.takeOne();";;;;;;;;;;It's hard to see which function is taking the 2 as an argument, and generally hard to keep track of the parentheses in my head when I'm looking at it, or editing it.;"The conciseness of, say, new Jar(wash(""cucumber"")) makes it easier to read than declaring washedCucumber and then using it.  In general, whenever it isn't hard to see what goes with what, such as when a function or constructor takes one argument, using nested expressions is more readable, in my opinion.";This code is harder to read for being longer (more verbose), and introducing a bunch of variable names, which I have to match up with each other to follow the data flow.;It's easy to see how many arguments each function takes, and what they are.;I would normally write a middle ground between these patterns, sometimes nesting function calls, sometimes declaring variables.;;;;;;
2389;Jun 6, 2019 5:51:44 am;Jun 6, 2019 6:20:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559825504_5cf90c60c57987.64843204;;;flattened vs proposal 2;5-10 years;Expert;JavaScript;;148;'number';"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 5;fix wrong variable name;59;;;;;;;Line 9;At first I thought it's line 5 but I guess the # is missing after await? Honestly, this is ugly as hell.;234;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;488;"# if you program like this, please stop...jesus  const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#)  // Why do I need a placeholder here? |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await #  // this is ugly, why not just await ferment(#, 2) ?  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;nested pipelines;;Tertiary operator and the nested pipes causing a pipe split down the line.;;;;;;;;;Other - Write In (Required);Proposal but improved await;Fine on US ANSI keyboard but a huge PITA on German keyboard;"I like the pipes but the whole ""await #"" business is really ugly, I'd replace it with   |> await fermented(#, 2)  because  |> fermented(#,2) |> await #  looks to me like the fermented functions turns the placeholder itself into a promise"
2400;Jun 6, 2019 6:14:07 am;Jun 6, 2019 6:44:03 am;Complete;;;English;;1559826847_5cf9119f3787b1.63142675;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;95;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;add the 'y' in salty;195;;;;;;;Line 9;await #;536;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;219;"const kimchiJar = ""cabbage""  |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment |> await";;;;;a bowl of jogurt with berries;too many if statements;;th inner # inside the ternary expressions get confusing;11;;;;;;;;The proposal;;ok, similar to =>;
2413;Jun 6, 2019 6:31:28 am;Jun 6, 2019 7:10:07 am;Complete;;;English;;1559827888_5cf915b00cd484.03907371;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;75;3;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;change saltCabbageJar to saltyCabbageJar;247;;;;;;;Line 9;add # after the await, if that syntax is supported, otherwise prepend await to the ferment call;312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;717;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt  // salt says that it takes a string, I assume that is a typo   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;Other - Write In (Required);too many conditionals and nested ternaries;The null property checking and multiple conditionals makes the ternary harder to evaluate.  The nested ternary added additional noise.  fillBowl isn't defined, I assumed it was defined elsewhere and assumed it's behavior.;;;;;;;;;The proposal;;It's fine. Less difficult than trying to track down a missing paren.;I wish that the first argument would always be filled/curried if no # was used to define otherwise. This seemed inconsistent in the examples, for instance with new Jar(#) or await #.
2417;Jun 6, 2019 6:44:15 am;Jun 6, 2019 7:12:56 am;Complete;;;English;;1559828655_5cf918af254636.87814301;;;nested vs both;3-5 years;Intermediate;JavaScript;;493;"The console log itself results in ""undefined"" and the argument for it results in ""function""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;", 14);";145;;;;;;;;;;;;;;;;Line 9;await #;202;;;;;;;;;;;;;Line 5;(_ => new Jar(_));38;;;;;;;;;;;;;;;;;;;;;386;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Seems quite natural.;
2418;Jun 6, 2019 6:49:11 am;Jun 6, 2019 7:18:41 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559828951_5cf919d7cf5150.47659758;;;flattened vs both;5-10 years;Advanced;TypeScript;;88;number;"""function""";;;;"add.apply(null, [10]);";;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;salt -> salty;254;;;;;;;Line 10;dunno for sure, but # is not in function context there?;647;;;;;;;;;;;;;Line 5;new Jar(_) -> new Jar(_));51;;;;;;;;;;;;;;;;;;;;;380;"const kimchi = wash(""cabbage"")   |> cut   |> salt   |> (x => new Jar(x))   |> (x => add(""spicy paste"", x))   |> stir   |> (x => ferment(x, 2))   |> await   |> (x => x.takeOne())  But for my taste, parenthesis is unnecessary, so   |> (x => ferment(x, 2)) can be changed to   |> x => ferment(x, 2)";;;;;;;;;;;;;;;Pipeline;;;;"fine, need a bit of time to make a habit, but clearly more convenient, than trying to insert another call in a(b(c(d(""xx"")))) :-)";From AST point of view, I'm not sure, is parenthesis around arrow func is required?
2419;Jun 6, 2019 6:52:21 am;Jun 6, 2019 7:32:31 am;Complete;;;English;https://old.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559829141_5cf91a95270231.15722687;;;nested vs proposal 1;3-5 years;Expert;JavaScript;;26;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 4;[...] add(pound(....), DAYS) [...];92;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Add the missing parenthsis at then end of the line.;32;;;;;;;;;;;;;;;;;;;;;146;"kmchiJar = 'cabbage' =>  |> wash |> cut |> salt |> new Jar |> (_ => add('spicy paste', _) |> stir |> await ferment  const kimchi = kimchJar.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);The amount of ifs mixed with nested pipelines. But it took some time to understand the pipeline on the return at line 14/15.;Reading instruction by instruction and calculate the result of each line. took some time to understand the pipeline on the return at line 14/15.;;;;;;;;;;;;;The proposal;;Alright. Using ABNT2 PT-BR keyboard.;Maybe propose another form. Also the proposal using '#' may cause confusion with private atributtes/methods in classes.
2421;Jun 6, 2019 6:47:46 am;Jun 6, 2019 7:34:15 am;Complete;;;English;;1559828866_5cf91982821de7.48201182;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;84;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;add numdays argument to after line 10;232;;;;;;;;;;;;;;;;Line 10;|> x => x.takeOne();468;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;484;"""cabbage"" |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> (x => x.takeOne())";;;;;a bowl of jogurt with berries;inconsistent style;;"- Line 6 and line 7 disrupt my imaginary ""flow"" of pipeline. It should have been ""'url' |> fetch(...) |> await |> #.json() |> await"".  - After line 6 and 7, I just deduce the result";;;;;;;;;The proposal;;"Few slow. As I have to hold `shift` with one finger and use the other finger to press `|` and move to `>`.  I suggest a combination of same character. Such as "">>>"" or ""|||"".";
2422;Jun 6, 2019 7:01:27 am;Jun 6, 2019 7:27:14 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/?st=jwkq79lt&sh=3446420c;1559829687_5cf91cb77c3a31.12051087;;;nested vs proposal 2;more than 10 years;Advanced;Ruby;;247;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;Add the final argument for numdays;88;;;;;;;;;;;;;;;;Line 9;;172;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;272;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";;;;;a bowl of jogurt with berries;density of operators;;The hardest part was having to re-read the conditionals to see which branch to follow. If that logic was pulled out into a separate function it would be much easier to reason about.;;;;;;;;;The proposal;;Nice! The syntax will take some getting used to but the overall readability is greatly improved.;Coming from Elixir this is an operator that I truly miss in other languages. Really hoping to see this in JS in some form in the near future.
2425;Jun 6, 2019 7:08:49 am;Jun 6, 2019 7:26:31 am;Complete;;;English;;1559830129_5cf91e710bcf63.41578905;;;flattened vs both;5-10 years;Expert;TypeScript;;136;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Pass the function in directly, or rename the variable;207;;;;;;;Line 10;move the await to line 8;140;;;;;;;;;;;;;Line 5;remove the left param on line 5, or add one to the end of the line;46;;;;;;;;;;;;;;;;;;;;;256;"const kimchiJar = ""cabbage""      |> wash      |> cut      |> salt      |> new Jar(#)      |> add(""spicy paste"", #)      |> stir      |> await ferment      |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A little annoying, but I could see prettier being a big help here;I like the idea of putting the await on the same line as ferment. Makes it a bit cleaner and more readable
2434;Jun 6, 2019 7:30:29 am;Jun 6, 2019 7:46:42 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559831429_5cf92385774259.63256824;;;flattened vs both;5-10 years;Expert;JavaScript;;49;;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;96;;;;;;;Line 10;Not use pipe operator?;111;;;;;;;;;;;;;Line 5;Add closing parenthesis to end of line;102;;;;;;;;;;;;;;;;;;;;;283;"const kimchi = ""cucumber"" 	|> wash 	| cut 	|> salt  	|> (_ => new Jar(_)) 	|> (_ => add('spicy paste', _)) 	|> stir 	|> (_ => ferment(_, 2)) 	|> await 	|> (kimchiJar => kimchiJar.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;Awkward at first but I think I got used to it;"You should take the best of both worlds.  I like the pipeline proposal with functions but I also like the ""|> await"" syntax without the # (or whatever character is chosen)."
2435;Jun 6, 2019 7:35:03 am;Jun 6, 2019 7:54:11 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559831703_5cf92497d53b56.11387448;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;156;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 10;Add day length to same line or line after;112;;;;;;;;;;;;;;;;Line 10;Not sure;106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;256;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);Nested ternaries;The long chains of boolean checking took a second to process but the use of nested ternaries make it very hard to read.;;;;;;;;;The proposal;;A little unnatural since I'm not used to it. It is a bit awkward reaching for those two keys in succession but with some practice it could become more natural.;"I don't know if I like having # as the placeholder, but it's not too big a deal. Having to put the placeholder after await doesn't feel as natural as simply calling ""|> await"""
2436;Jun 6, 2019 7:34:02 am;Jun 6, 2019 7:42:58 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559831642_5cf9245a38ee87.27853500;;;flattened vs both;5-10 years;Advanced;JavaScript;;14;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"await ferment(saltyCabbageJar, 14);";55;;;;;;;Line 9;"Move 8 ""ferment"" to 9";49;;;;;;;;;;;;;Line 8;Move 7 function to 8;27;;;;;;;;;;;;;;;;;;;;;132;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> await ferment(#, 2)  |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;I like it, it lines up and works well.;I don't like `|> await`, it's weird that it's a keyword and seems like function call in this. I either would write `|> await #` or `|> await ferment(#, 2)` which both seems more reasonable (but I prefer the last).
2441;Jun 6, 2019 7:50:11 am;Jun 6, 2019 8:13:18 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559832611_5cf928231b0f28.94322653;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;141;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";193;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));44;;;;;;;;;;;;;;;;;;;;;206;"const kimchi = ""kimchi""     |> wash     |> cut     |> salt     |> (_ => new Jar(_)),     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne())";null;Other - Write In (Required);complex function definintion in a pipeline & underscore as parameter;I said above that the complex function definition and choice of parameters was the worst bitâthat's the stuff that seems directly related to pipelines. Of course, handling five conditionals without better care is the real issue. I'd ask somebody to refactor this to handle the conditional logic more cleanly. Which is neither here nor there regarding pipelines, exactlyâalthough I do think that writing multiline function definitions in a pipeline is definitely the big anti-pattern here.;;;;;;;;;;;;;The proposal;;Just fine. I've written code in Elixir and F# before.;I've seen some other versions of this proposal, and I have to say that I find this version, with parentheses around function expressions, to be rather bewildering. If we can pass function expressions as arguments in normal function calls without parentheses (nested ones even!), why do we need to wrap these function expressions?
2445;Jun 6, 2019 8:03:32 am;Jun 6, 2019 8:17:09 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559833412_5cf92b44da3d32.06413261;;;flattened vs both;0-2 years;Intermediate;JavaScript;;99;"""number""";"""function""";"add.bind(null, 10);";;;;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix typo;125;;;;;;;Line 9;await #;87;;;;;;;;;;;;;Line 5;add ) at end;78;;;;;;;;;;;;;;;;;;;;;251;"const kimchiJar = 'cabbage'     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)";;;;;;;;;;;;;;;Pipeline with #;;;;;
2446;Jun 6, 2019 8:03:50 am;Jun 6, 2019 8:24:25 am;Complete;;;English;;1559833430_5cf92b5676a086.35176424;;;flattened vs proposal 1;more than 10 years;Expert;TypeScript;;168;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"Change line 6 ""saltCabbageJar"" => ""saltyCabbageJar""";277;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add "")"" at end of line 5";71;;;;;;;;;;;;;;;;;;;;;160;"const kimchi =   ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> (_ => _.takeOne())";a bowl of jogurt with berries;Other - Write In (Required);"Dense conditionals; Pattern matching + optional chaining would make the intent much more readily apparent";"The conditions in the if-checks were the most dense portions.  Also, inconsistent splitting of the ""|>"" made it hard to follow: ""oh, we are still piplining"".";;;;;;;;;;;;;The proposal;;As far as keyboard layout: it involves holding the shift key down and an awkward pinky-right-ring-finger stretch.  It is not ideal, but the clarity of the symbol cannot be matched.;I have been waiting for this to land for a long time!  I really hope it gets through soon!
2447;Jun 6, 2019 8:01:06 am;Jun 6, 2019 8:18:12 am;Complete;;;English;;1559833266_5cf92ab25c5da8.59671816;;;nested vs flattened;more than 10 years;Expert;TypeScript;;87;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Very often;Almost never;I like Pattern 2 better;;;;;;Line 10;), 14 // add number of days;71;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14); // fix typo";43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const cabbageJar = new Jar(salt(cut(wash(""cabbage"")))); const kimchiJar = await ferment(stir(add(""spicy paste"", cabbageJar)));  const kimchi = kimchiJar.takeOne();";;;;;;;;;;- Easy to miss extra arguments, particularly higher in the tree of nested calls (e.g., number of days). - When the tree branches, it's difficult to tell nesting level at a glance.;Terseness and lack of extra names needed. In some cases, tree structure of calls can be plainly visible, whereas it would be broken up by assignments.;- Longer code, more to read and keep track of. - Names don't always clearly communicate what they represent - Tree structure can be obscured if every call is split into its own line - Functions on separate branches of the tree can be called in arbitrary order, making it harder to understand nesting at a glance;- Names sometimes communicate extra information - Easier to spot bugs in how functions are called, missing arguments, etc. - Lines do not overflow horizontal margin or use weird indentation - Thrown exceptions will have a clear line number;The ideal approach is a mix of styles 1 and 2, keeping code just terse enough to be readable without confusion.;;;;;;
2449;Jun 6, 2019 8:08:12 am;Jun 6, 2019 8:37:26 am;Complete;;;English;;1559833692_5cf92c5c2887b4.15852764;;;nested vs both;0-2 years;Intermediate;JavaScript;;139;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 11;",14);";1079;;;;;;;;;;;;;;;;Line 9;await #;59;;;;;;;;;;;;;Line 5;(_ => new Jar(_));45;;;;;;;;;;;;;;;;;;;;;190;"const kimchi = ""cabbage"" |> wash |> cut |> Jar(#) |> add(""spicy paste"", #) |> sitr |> ferment(#,2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;A bit cumbersome, but not much more than >=.;
2458;Jun 6, 2019 8:59:02 am;Jun 6, 2019 9:20:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1559836742_5cf93846395bc4.01237251;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;116;number;"""error""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;Line 11;add a number as a second parameter to ferment();149;;;;;;;;;;;;;;;;Line 10;Not sure. I think the bug is related to the Promise, but it's not obvious to me what '#' means in the context of 'await'.;252;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;219;"const pickle=""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);ternary operators;I always find ternary operators ( ? : ) much harder to read than if-then-else.;;;;;;;;;The proposal;;Fine on this Mac keyboard, where both characters are fairly close to one another, but might be more of an issue on my PC, where they're at separate sides, and both require Shift.;
2463;Jun 6, 2019 9:10:38 am;Jun 6, 2019 9:25:15 am;Complete;;;English;;1559837438_5cf93afe8b28c2.85528682;;;flattened vs both;more than 10 years;Expert;TypeScript;;82;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;cosnt sauerkrautJar = await ferment(saltyCabbageJar, 14);141;;;;;;;Line 9;await #;124;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));28;;;;;;;;;;;;;;;;;;;;;119;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Great! The flow of operations feels far clearer that the traditional method, and it feels like there are fewer places to cause bugs because of the lack of intermediary variables;My only concern with this is that debugging intermediary products becomes more labor intensive.  If this operator is implemented, will it be simple to stop a debugger at a given line and inspect the current value in the pipeline?
2464;Jun 6, 2019 9:10:58 am;Jun 6, 2019 9:53:28 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559837458_5cf93b12225548.67676235;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;233;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;Add numdays argument;182;;;;;;;;;;;;;;;;Line 9;Add the reference #;887;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;218;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);Too many conditionals combined with nested ternaries;The jogurt conditional was the slowest part, second being the nested ternaries. The pipes were clear (unless I got it wrong...).;;;;;;;;;The proposal;;Nice on Windows while doing this (same key on a Swedish keyboard). The mac at work will be slightly worse, but not a problem.;I want this!
2465;Jun 6, 2019 9:10:39 am;Jun 6, 2019 9:35:56 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559837438_5cf93afeea3a66.21270182;;;flattened vs both;more than 10 years;Advanced;JavaScript;;126;function;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;On line 6 pass saltyCabbageJar instead of saltCabbageJar;319;;;;;;;Line 9;Since await is just a normal keyword, it probably doesn't know what it's supposed to refer to, so it does nothing. Might need to replace with: await #;214;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));67;;;;;;;;;;;;;;;;;;;;;335;"const kimchi =  ""cabage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await #   |> #.takeOne();  ";;;;;;;;;;;;;;;Pipeline with #;;;;I didn't like this, it's uncomfortable on my keyboard. Perhaps something like :> instead?;
2467;Jun 6, 2019 9:22:43 am;Jun 6, 2019 9:31:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559838163_5cf93dd3c19946.26551405;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;61;"""function""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;32;;;;;;;Line 10;await #;83;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;78;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;Multiple references to '#' in the same expression took some time to interpret.;;;;;;;;;The Status quo;;It looks a little awkward but I could get used to it;I don't like '#' as the symbol. 
2469;Jun 6, 2019 9:33:26 am;Jun 6, 2019 9:45:11 am;Complete;;;English;;1559838806_5cf940562bdf82.46100715;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;145;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"Change ""saltCabbageJar"" to ""saltyCabbageJar""";57;;;;;;;;;;;;;;;;;;;;;;Line 5;Add a ) at the end.;36;;;;;;;;;;;;;;;;;;;;;186;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;Having the pipelines all bunched together slowed me down the most, I think.;;;;;;;;;;;;;The proposal;;Not any different from curly brackets everywhichway.;I'm not a huge fan of the inline functions, but I don't imagine there's a better way. I *am* concerned about the performance implications, though. That's a lot of one-off functions getting garbage collected.
2472;Jun 6, 2019 9:37:28 am;Jun 6, 2019 9:59:35 am;Complete;;;English;;1559839048_5cf941484fd650.56605030;;;nested vs proposal 2;5-10 years;Beginner;JavaScript;;177;number;"""function""";;;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 11;", 14);";226;;;;;;;;;;;;;;;;Line 7;salt(#);140;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;381;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;null;whitespace formating;;Ternaries on multiple lines, nested pipelines, too many operators;;;;;;;;;The proposal;;I realized it was easier to read the pipeline format and to think of things in the order they're meant to happen. The pipeline itself is awkward to type, though.;
2473;Jun 6, 2019 9:38:44 am;Jun 6, 2019 10:01:04 am;Complete;;;English;;1559839124_5cf941944816b8.58148601;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;168;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;Line 10;,\n14;126;;;;;;;;;;;;;;;;Line 9;await #;196;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;229;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;Read top down the fillBowl and add would have been better on separate lines.  ?: are always fun ;212;;;;;;;;The proposal;;the |> is not part of my muscle memory and is kinda awkward to type.  If this is as useful as I think it's going to be I would prefer a different operator like -> but | is the traditional marker for this kind of work.;This is such an awesome improvement can't wait to use it.
2474;Jun 6, 2019 9:39:55 am;Jun 6, 2019 12:30:35 pm;Complete;;;English;;1559839195_5cf941dbc63a70.42650883;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;286;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;"...), 14);";200;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));93;;;;;;;;;;;;;;;;;;;;;8991;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""water"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The proposal;;It's very intuitive.;
2478;Jun 6, 2019 9:44:17 am;Jun 6, 2019 10:02:43 am;Complete;;;English;;1559839457_5cf942e1586374.36010840;;;flattened vs both;5-10 years;Advanced;TypeScript;;356;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;264;;;;;;;Line 10;I honestly can't find it. I don't like this syntax.;56;;;;;;;;;;;;;Line 5;Add the missing );29;;;;;;;;;;;;;;;;;;;;;222;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Satisfying.;Pipeline with # is awful, just delete it.
2479;Jun 6, 2019 9:45:38 am;Jun 6, 2019 10:13:37 am;Complete;;;English;;1559839538_5cf94332288095.61936174;;;nested vs flattened;3-5 years;Advanced;JavaScript;;267;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;, 14;192;;;;;;;Line 6;saltyCabbageJar;373;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;358;"const washedCab = wash('cabbage'); const cutCabbage = cut(washedCab); const slatCabbage = salt(cutCabbage); const cabJar = new Jar(saltCabbage); const spiceJar = add(""spicy paste"", cabJar); const stirJar = stir(spiceJar);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;its kinda hard to read, but over time you can get use to it.;;;This is easy to read and understand what is happening with each function and easy to follow.;Thanks for getting data behind this!!!;;;;;;
2481;Jun 6, 2019 9:47:30 am;Jun 6, 2019 10:33:17 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559839650_5cf943a2d80282.53504297;;;flattened vs proposal 1;0-2 years;Intermediate;Other - Write In (Required);VisualBasic;230;"""number""";"""error""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;saltCabbageJar > saltyCabbageJar;390;;;;;;;;;;;;;;;;;;;;;;Line 5;Add parenthesis;256;;;;;;;;;;;;;;;;;;;;;621;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;jogurt as field and variable. add() in incumbent style, not vertical pipe.;;;;;;;;;;;;;Other - Write In (Required);Concerned about testing;Fine. SHIFT for both.;How will this work with testing, or is the idea to test each individual piece, then string together with |> ?
2482;Jun 6, 2019 9:48:01 am;Jun 6, 2019 10:23:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559839681_5cf943c1d32c07.46067053;;;flattened vs both;5-10 years;Advanced;TypeScript;;154;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the status quo better;;;;;;;;;;;Line 6;using correct variable;307;;;;;;;Line 10;pulling out takeOne function from jar to a standalone function, and passing jar to it;513;;;;;;;;;;;;;Line 5;by adding parenthesis;71;;;;;;;;;;;;;;;;;;;;;250;"const kimchi = ""cabbage"" |> wash |>cut |>salt |>new Jar(#) |>add(""spicy paste"", #) |>stir |>ferment(#,2) |>await # |>#.takeOne()";;;;;;;;;;;;;;;Other - Write In (Required);Better and concise implementation is possible;;;Alien;"In a way the pipeline proposal resembles closely to the lazy evaluation of the LINQ statements (IQueryable in .NET), at least too me. It would be cool if a pipeline can be composed in several step and can be passed on as a function argument. The pipeline can then be executed on command, instead of eagerly evaluating at every step. What I am trying to say is it is sort of ""pipline lambda""  (?). But the syntax looks really odd, like the syntax-for-private-field odd. "
2485;Jun 6, 2019 9:53:46 am;Jun 6, 2019 10:13:21 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559840026_5cf9451ab9da06.52498476;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;50;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;"Add a value for the parameter ""numdays"" for the call to ferment.";87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 4;Swap lines 3 and 4 as the cabbage is being pounded before being cut.;98;;;;;;;;;;;;;;;;;;;;;250;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> ((_) => new Jar(_))   |> ((_) => add(""spicy paste"", _))   |> stir   |> ((_) => ferment(_, 2))   |> await   |> ((_) => _.takeOne())";a bowl of jogurt with berries;too many if statements;;The flow up to the if statements was easy to process and it is easy to see what will happen if a particular branch is followed. There are so many conditions in the if statements it is hard to understand when they will be followed.;;;;;;;;;;;;;The proposal;;Easy, left hand hits shift, right hand hits the pipe and angle bracket.;
2486;Jun 6, 2019 9:59:32 am;Jun 6, 2019 10:22:13 am;Complete;;;English;;1559840372_5cf94674d84000.15920511;;;flattened vs both;3-5 years;Advanced;TypeScript;;159;number;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 6;rename first argument of ferment to saltyCabbageJar on line 6;224;;;;;;;Line 5;;77;;;;;;;;;;;;;Line 5;add closing parenthesis at the end of line 5;59;;;;;;;;;;;;;;;;;;;;;410;"const kimchi = ''cabbage""   |> wash   |> cut   |> salt   |> _ => newJar(_)   |> _ => add('spic past', _)   |> stir   |> _ => await ferment(_, 2)";;;;;;;;;;;;;;;Other - Write In (Required);I understand the use of # and the pusrpose it serves, but there is nothing javascript about it, the operator is for functional programming, let's stick to functions and to javascript, that's why i'm chosing streamline pipeline operator WITHOUT #;;;cool;Let's stick to functions and to javascript, although # is cool to use, the code doesn't look like javascript and it's confusing to read, it's way more comprehensible with functions even though you have to write a little bit more code. Syntaxe Suggar is not always good!
2488;Jun 6, 2019 10:04:19 am;Jun 6, 2019 10:18:19 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559840659_5cf947935fc282.19174116;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;137;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));54;;;;;;;;;;;;;;;;;;;;;180;const kimchi = 'cabbage'  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add('spicy paste', _)  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne());a bowl of jogurt with berries;too many if statements;;;;;;;;;;;;;;;The proposal;;;
2489;Jun 6, 2019 10:05:08 am;Jun 6, 2019 10:22:14 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559840708_5cf947c482b104.15174943;;;nested vs proposal 2;0-2 years;Intermediate;TypeScript;;104;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;127;;;;;;;;;;;;;;;;Line 9;await #;174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;172;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;;
2494;Jun 6, 2019 10:17:07 am;Jun 6, 2019 10:31:54 am;Complete;;;English;;1559841427_5cf94a93406bb4.66836898;;;nested vs both;5-10 years;Advanced;TypeScript;;114;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;0,14;185;;;;;;;;;;;;;;;;Line 9;await #;100;;;;;;;;;;;;;Line 8;(_ => await _);75;;;;;;;;;;;;;;;;;;;;;193;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;Great, will be easier with IDEs and code editors;# is more readable than (_
2498;Jun 6, 2019 10:26:26 am;Jun 6, 2019 10:27:41 am;Complete;;;English;;1559841986_5cf94cc2216096.18186046;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;10;;;;;;;;;;;;;;;;;;;;;13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6;;;;;;;;;;;;;;;;;;;;;5;;;;;;;;;;;;;;;;;;;;;
2513;Jun 6, 2019 11:19:42 am;Jun 6, 2019 12:11:56 pm;Complete;;;English;;1559845181_5cf9593de9cbb7.22885597;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;303;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"Add the missing ""y""";220;;;;;;;;;;;;;;;;;;;;;;Line 5;"Add the missing parenthesis "")""";73;;;;;;;;;;;;;;;;;;;;;309;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy taste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;The code was easy to follow until I reached the if-statements, then I had to think about how every condition would evaluate.  I would have much preferred if the code block was refactored into a function or if it used the ternary operator instead of if/else-statements;;;;;;;;;;;;;The proposal;;"It was annoying. The travel distance is significant and I have to switch modifier keys.  I'm using the Swedish keyboard layout on a 13-inch Macbook. I have to press ""Alt + 7"" for ""|"", and ""Shift + < "" for "">"" (the keys for ""7"" and ""< "" are far apart).";The syntax looks a bit noisy when passing an arrow function to the pipeline operator. Overall, I very much like the pipeline operator.
2514;Jun 6, 2019 11:30:03 am;Jun 6, 2019 11:48:01 am;Complete;;;English;https://old.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559845803_5cf95bab4922e1.11570116;;;flattened vs both;3-5 years;Expert;TypeScript;;63;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Change saltCabbageJar to saltyCabbageJar;80;;;;;;;Line 10;Move await onto the same line as ferment;249;;;;;;;;;;;;;Line 5;Add a closing paren at the end of the line;34;;;;;;;;;;;;;;;;;;;;;415;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Good, much easier to browse deeply nested functions;
2516;Jun 6, 2019 11:32:00 am;Jun 6, 2019 11:50:29 am;Complete;;;English;;1559845920_5cf95c208a9c92.40765544;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;56;Number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;",14);";168;;;;;;;;;;;;;;;;Line 9;|> await #;60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;163;"const kimchi = ""cabbage""   |>  wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy page"", #)   |> stir   |> ferment(#, 2)";;;;;a bowl of jogurt with berries;too many if statements;;Read top to bottom.  The existence checks and ternaries made it harder to read.  ;;;;;;;;;The proposal;;Not a problem.  Prepares you for elm.;This would be great to combine with the null propagation operator.
2517;Jun 6, 2019 11:34:57 am;Jun 6, 2019 11:42:26 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559846097_5cf95cd17ce4b9.77730853;;;nested vs flattened;more than 10 years;Advanced;JavaScript;;113;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 11;", 2*7);";102;;;;;;;Line 6;Fix variable name;75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2518;Jun 6, 2019 11:46:22 am;Jun 6, 2019 11:59:37 am;Complete;;;English;;1559846781_5cf95f7df25fe8.08052929;;;nested vs flattened;3-5 years;Advanced;JavaScript;;91;number;"""function""";;;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 11;"By adding a 14 to give the amount of days "");"" becomes "", 14);""";174;;;;;;;Line 6;"The name of the variable is miswritten, we must replace ""saltCabbageJar"" with ""saltyCabbageJar""";74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const saltedJar = new Jar(salt(cut(wash(""cabbage""))) const spicedJar = add(""spicy paste"", saltedJar) const kimchiJar = await ferment(stir(spicedJar), 2)  const kimchi = kimchiJar.takeOne()";;;;;;;;;;"When we have more than 2-3 nested brackets, it may be difficult to identify which of the functions takes several arguments.  I have no issue with ""function1(function2(function3(x)))"" but ""function1(functiuon2(42, function3(x))) is very hard to work with";"It's shorted and with less ""useless variables"" which mean less potentially bad named variables.";It's very verbose so in a true code it can make finding important informations harder.;It's easier to sea which function take which arguments and which function is asynchronous.;"My favorite solution (without future features) would be to group the calls to avoid lines with more than 2-3 nested brackets and to put ""await"" and multi arguments call in plain sight.";;;;;;
2519;Jun 6, 2019 11:50:59 am;Jun 6, 2019 12:11:57 pm;Complete;;;English;;1559847059_5cf96093d16707.54987306;;;nested vs proposal 1;0-2 years;Expert;TypeScript;;75;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the proposal better;Line 11;add argument of 14;315;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;add trailing parenthesis;43;;;;;;;;;;;;;;;;;;;;;192;"const kimchi = ""cabbage""   |> wash |> cut |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;just way too many operators;;;;;;;;;;;;;The proposal;;a bit of a finger exercise;
2520;Jun 6, 2019 11:54:03 am;Jun 6, 2019 12:55:11 pm;Complete;;;English;https://old.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/?st=jwl0rrxp&sh=e26fd65d;1559847243_5cf9614bc1d955.17363268;;;nested vs both;3-5 years;Advanced;JavaScript;;163;number;"""function""";;;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 10;), 2;52;;;;;;;;;;;;;;;;Line 9;await #;14;;;;;;;;;;;;;Line 5;(_=> new Jar(_));16;;;;;;;;;;;;;;;;;;;;;212;"const kimchiJar = ""cabbage"" |> wash  |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment (_, 2)) |> await |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;wasn't to wierd;
2523;Jun 6, 2019 12:02:38 pm;Jun 6, 2019 12:16:58 pm;Complete;;;English;;1559847758_5cf9634e6c3903.26504043;;;nested vs both;5-10 years;Advanced;JavaScript;;40;3;"""function""";"add.bind(null, 10);";;;;;;;;;;;Rarely;;;I like the status quo better;;Line 11;pass numbays to ferment function;163;;;;;;;;;;;;;;;;Line 9;need placeholder # for await since not a method invocation.;185;;;;;;;;;;;;;Line 5;add closing paren );56;;;;;;;;;;;;;;;;;;;;;187;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", 3)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;;;;;;;;;;;Current status quo;;;;Not hard to type, but I confused it for a terminal start line that is often used in documentation for running shell scripts, especially in the introduction that says the new operator is similar to piping in shells.;status quote is very clean to me and easy to debug with stepping over vs stepping into.
2524;Jun 6, 2019 12:06:38 pm;Jun 6, 2019 12:51:17 pm;Complete;;;English;;1559847998_5cf9643e5273e9.61164679;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;115;number;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;saltyCabbageJar;102;;;;;;;;;;;;;;;;;;;;;;Line 5;add ) to the end of the line;39;;;;;;;;;;;;;;;;;;;;;373;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> (_ => stir(_)) |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;"The result/use of the line ""return _.pickles |> fillPlate;"" is unclear.";;;;;253;;;;;;;;The Status quo;;So much shift.;
2526;Jun 6, 2019 12:07:16 pm;Jun 6, 2019 12:35:47 pm;Complete;;;English;;1559848036_5cf964647b1775.77519812;;;nested vs proposal 2;3-5 years;Advanced;Java;;95;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;138;;;;;;;;;;;;;;;;Line 9;await #;234;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;170;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;the fact that the ? and : of the ternary operators were aligned allowed me to read it clearer.  when multiple operators were on a single line that was when it got confusing.;;;;;;;;;The proposal;;not too difficult;
2527;Jun 6, 2019 12:25:23 pm;Jun 6, 2019 12:53:44 pm;Complete;;;English;;1559849122_5cf968a2ebe040.87749885;;;nested vs proposal 2;more than 10 years;Intermediate;JavaScript;;149;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 11;pass 2 as a second param to ferment;242;;;;;;;;;;;;;;;;Line 9;await #;87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;425;"const kimchi = ""cabbage"" |> wash |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;I didn't find it difficult to read this code until the else block which de-structure wine and I didn't initially realize it was possible but then realized the system automatically passes in the expression and then the de-structure makes sense. But after that it became easy to understand the else block too.;;;;;;;;;The proposal;;not a major concern for me and other languages like ocaml has this syntax for the same behavior and I think keeping it same would help. Also editor maps can help in enabling shortcut keys for this anyways.;Would love to see this in JS soon. Please make it happen!
2528;Jun 6, 2019 12:29:34 pm;Jun 6, 2019 12:44:52 pm;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559849374_5cf9699e4f2722.79982999;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;149;number;"""function""";;;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;0,1;131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;);55;;;;;;;;;;;;;;;;;;;;;232;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;;;;;;;;;;;;;;The proposal;;awkward at first but probably doable in the future.;
2534;Jun 6, 2019 12:48:51 pm;Jun 6, 2019 1:43:58 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559850531_5cf96e238e9918.94386863;;;flattened vs proposal 1;0-2 years;Advanced;JavaScript;;153;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);156;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));108;;;;;;;;;;;;;;;;;;;;;317;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;1. I read the constant statements (And I somehow managed to remember their names, but not their values)  2. Then I saw the constant with a string (My first thought would be that we are assigning the string to that  constant but then I saw the pipeline operator and refactored my thinking)  3. So we are playing the fetch game, next statement must be the `await` keyword.  4. There is the await keyword, and we are converting the result object from JSON (I already know that there must be another await keyword but I never cared to find out why)  5. I see this: `(_ => {`, and I think: `are we are wrapping the result in another object?`. But then if I saw the `if` statement on the next line and I realised that it's actually the arrow function (stupid me)  6. With each statement between the && (and) operator, I had to refer to the previous line to see what value will be there.  7. On the line No. 13, After I evaluated the first batch of && chained statements, I fought for myself 'well, I guess it's the wrong block', only to realize that there is another batch of them after || (or) operator.  8. After finding out that the jogurt is ready to be eaten, I checked my answer.  So if statements were definitely the bottleneck here.;;;;;;;;;;;;;The proposal;;Definitely the cleaner version than `Status quo`. I really liked how you can easily avoid intermediate constants by just passing the `_` underscore around. There is just one question that I had stuck in my mind all the time. Do we have to wrap arrow functions in `()` parentheses?;I'd be cool if we could put the function invocation and await keyword on the same line (just like calling the normal function) for example: ` |> await ferment `
2535;Jun 6, 2019 12:49:20 pm;Jun 6, 2019 1:10:11 pm;Complete;;;English;;1559850560_5cf96e40a5cd80.87245115;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;138;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;94;;;;;;;;;;;;;;;;Line 9;await #;329;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;164;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;The pipelining was easy to follow, the hard part was the nested conditional operators.  Reading along it is not hard to understand the first 7 lines, but when you hit line 8 you need to consider what this boolean expression in used for, and then realize that there is one more nested conditional, after which you can continue to read the pipeline.;;;;;;;;;The proposal;;perfectly fine;The wording of the survey was a little strange when the two different styles were shown. It sounded like I had already been shown the second one, but I'm pretty sure that was the first time it was presented.
2536;Jun 6, 2019 12:49:12 pm;Jun 6, 2019 1:04:01 pm;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559850551_5cf96e37d8ac46.49884495;;;flattened vs both;more than 10 years;Expert;TypeScript;;175;number;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;rename saltCabbageJar to saltyCabbageJar;88;;;;;;;Line 9;change it to await #;96;;;;;;;;;;;;;Line 5;add the closing ) to the end;26;;;;;;;;;;;;;;;;;;;;;206;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;not bad at all;
2537;Jun 6, 2019 12:51:35 pm;Jun 6, 2019 1:02:56 pm;Complete;;;English;;1559850695_5cf96ec76e58d1.45359458;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;10;3;"""function""";;"add.call(null, 10);";;;;;;;;;;Every now and then;;;;I like the proposal better;Line 10;) ,2;40;;;;;;;;;;;;;;;;Line 9;await #;86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;157;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;The proposal;;Too much of a pinky workout;
2540;Jun 6, 2019 1:05:53 pm;Jun 6, 2019 1:31:45 pm;Complete;;;English;https://old.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559851553_5cf97221865101.50730751;;;nested vs proposal 1;5-10 years;Intermediate;JavaScript;;183;"""number""";"""function""";;"add.call(null, 10);";;;;;;;;;;Rarely;;;;I like the proposal better;Line 11;", 14);";645;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));69;;;;;;;;;;;;;;;;;;;;;184;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => add(""spicy paste"", new Jar(_))   |> (_ => stir(_, 2))   |> ferment   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;The pipeline operators for the pickles and jogurt not being on new lines;;;;;;;;;;;;;The proposal;;It was alright.;
2542;Jun 6, 2019 1:11:08 pm;Jun 6, 2019 1:39:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559851868_5cf9735c686288.86945092;;;flattened vs both;3-5 years;Advanced;JavaScript;;129;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 5;"const saltCabbageJar = salt(add(""water"", cabbageJar))";337;;;;;;;Line 9;|> await #;215;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));79;;;;;;;;;;;;;;;;;;;;;240;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";;;;;;;;;;;;;;;Pipeline;;;;Kept forgetting to add the `>` initially, but it's fine after a while.;"It is a bit of a footgun to miss the closing paren in the pipeline proposal. However I feel like it's closer to existing semantics and therefore easier for beginners to learn.  Treating await like a ""function"" in the pipeline proposal also feels a bit like a footgun to me. Is there a reason that `await _` wouldn't work?  Also some meta about the survey itself, I found some of the provided docs in the ""find the bug"" examples a bit confusing. Particularly the status quo one. The add function being unused"
2546;Jun 6, 2019 1:30:21 pm;Jun 6, 2019 2:02:38 pm;Complete;;;English;;1559853021_5cf977ddb28ff6.67758601;;;flattened vs both;3-5 years;Advanced;TypeScript;;101;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;;;;Line 4;Const cabbageJar = Jar(cutCabbage);245;;;;;;;;;217;;;;;;;;;;;;;Line 5;(_ => new Jar(_));83;;;;;;;;;;;;;;;;;;;;;278;"Const kimchi = ""cabbage"" |> wash |> cut |> salt |> x => new Jar(x) |> x => add(""spicy paste"", x) |> stir |> x => ferment(x, 2) |> await |> x => x.takeOne()";;;;;;;;;;;;;;;Pipeline;;;;"Hard to reach ""|"" with little finger and then jump to "">"" with little finger again. ";"The proposal with wrapping into function of one argument fits better with a lot of functional programming libraries, where they use data last and currying a lot.  Additionally, it looks like more idiomatic js code, with function passing and function wrapping. I understand right away that some particular section of pipeline operator is a function, which will be executed when execution reaches there, while with # approach it might get confusing whether the function is being called now, or if the execution will be delayed until later.   Using example from beginning with addTen function, it is more clear when each function will be executed.   Const x = 2 |> x => add(x)(10) Vs Const x = 2 |> add(#)(10)  While ""#"" has no meaning in js, it has a very strong association with comment, when coming from bash. Might it get confusing?"
2547;Jun 6, 2019 1:29:56 pm;Jun 6, 2019 1:36:58 pm;Complete;;;English;;1559852996_5cf977c4665510.27507856;;;nested vs flattened;3-5 years;Intermediate;Ruby;;82;number;"""function""";;;"y => add(10, y);";;;;;;Almost never;Sometimes;I like Pattern 2 better;;;;;;Line 11;add the number of days to ferment;77;;;;;;;Line 4;Need to call 'add' function;99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2549;Jun 6, 2019 1:42:40 pm;Jun 6, 2019 2:30:41 pm;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559853760_5cf97ac0b07f97.40756429;;;nested vs proposal 2;3-5 years;Intermediate;TypeScript;;12;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Every now and then;;;;I like the status quo better;Line 11;Pass day param to ferment or return func which returns (days) => Promise< Jar>;462;;;;;;;;;;;;;;;;Line 10;Await does something unexpected?;791;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;856;"const addCurry = s => jar => add(s, jar); const fermentCurry = numdays => jar => ferment(jar, numdays)  const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> veg => new Jar(veg)   |> addCurry(""spicy paste"")   |> stir   |> fermentCurry(2)   |> await   |> jar => jar.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Null checks make for a lot of non-business logic checks that make me double check the entire thing for consistency.;;;;;;;;;The proposal;;Fine. Better than calling .map() as part of an array transform;I generally don't like the # sign.  Particularly, await # looks weird. I appreciate await by itself is confusing as it could be a function, though. Is handling promises as part of the pipeline necessary?
2550;Jun 6, 2019 1:43:15 pm;Jun 6, 2019 2:15:26 pm;Complete;;;English;;1559853795_5cf97ae3093aa5.52727936;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;413;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 6;"... ferment(saltyCabbageJar, 14);";130;;;;;;;;;;;;;;;;;;;;;;Line 5;... new Jar(_));105;;;;;;;;;;;;;;;;;;;;;372;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The proposal;;A little awkward at first, but fine after a few goes.;Initially the syntax was a little intimidating, but it's fairly intuitive, and useful for certain use cases. 
2552;Jun 6, 2019 1:54:08 pm;Jun 6, 2019 2:46:40 pm;Complete;;;English;https://old.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559854447_5cf97d6fd3b9f6.05867984;;;nested vs proposal 1;more than 10 years;Advanced;TypeScript;;74;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Often;;;;I like the proposal better;Line 10;), 14;106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));79;;;;;;;;;;;;;;;;;;;;;198;"const kimckiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> await";a bowl of jogurt with berries;nested pipelines;;Started reading at the `result` declaration. Had to jump back quite a few times to look at the boolean values. Also i found the last pipeline function too complex to be defined inline. I'd prefer to have it extracted into its own named function, e.g. `prepareFood(fermentation)`, so that the last step of the pipeline could be read as `|> prepareFood` :);;;;;;;;;;;;;The Status quo;;Kinda weird. But i understand the limitations...;"On one hand, i find this new syntax proposal kind of awkward and at the same time lacking. For example, having to surround inline arrow functions with parentheses was unintuitive, and common cases like    - `|> (_ => new Wrapper(_))`, or    - `|> (_ => _.prop)`, or    - `|> (_ => func(_, other, params)` feel too cumbersome and symbol-soupy.   Having some syntax sugar for these common cases could make this syntax ore palatable, but in turn would increase the syntax surface of the language even more, which brings me to my second point...  I feel like JS already suffers too much from the ""having more than one way of doing some basic thing"" problem. Like: having more than one way of defining a variable (var, const, let), more than one way of defining a function (to many to list...), more than one way of accessing a property (the `.` operator, or destructuring), etc.  This proposal would add yet another way of doing a very very basic thing in the language: calling a function. Admittedly, functions already have more than one way of being called, but at least the alternative ways of calling a function have a specific purpose (`new` for ""instantiating"" a ""class"", `.call` for calling a function with a dynamic `this`, etc). With the proposed pipeline operator i feel like there's no such clear-cut criteria to decide whether to use `|>` or `()`, which i feel introduces a decision where previously there was none, for a very very common thing to do while programming. Not only this is a constant extra cognitive load, but it would also invite lots of pointless bikeshedding and the enforcing of annoying style rules (e.g., ""use the pipeline operator is you have 2 or more levels of nested function calls"", or ""never use the pipeline operator"").  /my 2 cents"
2553;Jun 6, 2019 1:54:53 pm;Jun 6, 2019 3:17:19 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559854492_5cf97d9ce65e43.24908649;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;58;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the status quo better;Line 10;), 14;141;;;;;;;;;;;;;;;;Line 9;(await #).takeOne();287;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;536;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;large conditions with ternaries ;;;;;;;;;The Status quo;;ok;
2555;Jun 6, 2019 2:04:46 pm;Jun 6, 2019 2:18:39 pm;Complete;;;English;;1559855086_5cf97fee797b64.07249201;;;nested vs both;3-5 years;Advanced;JavaScript;;103;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 10;i would add `, 2 * 7` after the parenthesis on line 10;123;;;;;;;;;;;;;;;;Line 10;I'd wrap it in a function that will call takeOne on the input parameter;118;;;;;;;;;;;;;Line 5;Add a parenthesis after the jar constructor close paren;40;;;;;;;;;;;;;;;;;;;;;146;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Reminiscent of other languages with a similar construct;I do enjoy the Elixir method of always passing in as the first parameter but given the edge cases and inconsistency of the Javascript API conventions it is much less viable than the # placeholder.
2556;Jun 6, 2019 2:05:06 pm;Jun 6, 2019 2:47:52 pm;Complete;;;English;;1559855106_5cf98002c07106.15298372;;;nested vs flattened;0-2 years;Intermediate;JavaScript;;92;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;Sometimes;Sometimes;I like Pattern 2 better;;;;;;Line 10;), 14;888;;;;;;;Line 6;replace saltCabbageJar with saltyCabbageJar;1088;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"const processedCabbage = salt(cut(wash('cabbage')));  const cabbageJar = new Jar(processedCabbage);  const kimchiToFerment = stir(add('spicy paste', cabbageJar));  const kimchiJar = await ferment(kimchiToFerment, 2);  const kimchi = kimchiJar.takeOne();";;;;;;;;;;Keeping track of the function nesting.;Not having to keep track of a bunch of variable names.;Keeping track of and coming up with descriptive variable names.;Each step is explicit, and can be pipelined with a pipeline transformer/once the pipeline operator comes out.;;;;;;;
2558;Jun 6, 2019 2:10:37 pm;Jun 6, 2019 2:26:00 pm;Complete;;;English;;1559855437_5cf9814d6b60c6.90741488;;;nested vs both;more than 10 years;Expert;JavaScript;;71;number;"""function""";"add.bind(null, 10);";;;;;;;;;;;Often;;;I like the pipeline with the # better;;Line 11;add numdays param;84;;;;;;;;;;;;;;;;Line 9;await #;68;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));223;;;;;;;;;;;;;;;;;;;;;157;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;kept hitting \> - have to remember the shift+\ to get the pipe.. but it was fine..;this will be really helpful while composing small functional utility methods to acheive desired goal  (e.g. map |> filter |> sort |> uniq)
2559;Jun 6, 2019 2:10:15 pm;Jun 6, 2019 3:53:07 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559855415_5cf98137566db0.05141218;;;nested vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);PHP;160;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;;;;;;;Rarely;;;;I like the proposal better;Line 11;Add numDays parameter (14);285;;;;;;;;;;;;;;;;Line 9;await #;283;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;693;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);parentheses, |> priority;"There is a syntax error: a ""("" is missing on line 8: should be |> (((#.jogurt ... I wasn't sure about the pipe operator priority (must be obviously above ?:). It's irritating not to use the # notation in line 12 (additionally to the unusual destructuring argument).";;;;;;;;;The proposal;;This seems to be a question addressed to people with US keyboard layout. With a german keyboard it's just another AltGr typing like {, [ etc. and typing wasn't problematic.  More important is that the visual form fits the function and |> is therefore a good choice.;It's kind of a question from mars. Practical situation:  - job: still IE 11 support required => ES5 (not even const!) - private website: Edge and old mobile browser support required => only recently switched to basic ES6 (no destructuring, await, ...)
2563;Jun 6, 2019 2:36:44 pm;Jun 6, 2019 3:04:30 pm;Complete;;;English;http://www.newsblur.com/site/1529246/mozilla-hacks-the-web-developer-blog;1559857004_5cf9876c776177.16745795;;;nested vs both;more than 10 years;Advanced;JavaScript;;84;3;"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;Line 11;add 14 between the last 2 brackets;126;;;;;;;;;;;;;;;;Line 10;combine await and ferment onto one line?;247;;;;;;;;;;;;;Line 5;add missing matching bracket;71;;;;;;;;;;;;;;;;;;;;;315;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;awkward to combine those two keys on a qwerty keyboard, but not too bad;"at a glance, it's tricky to figure out where # does or doesn't belong. Why is it required after ""await"" if only one thing can follow? Why does it have to be passed to the Jar constructor if it only takes one parameter?   This pipeline operator might be useful, but I think it would be easier to reason about if the code was just refactored with intermediate steps as needed:  const washedpickle = wash(pickle);  const jarWithPickle = new Jar(washedPickle);  etc.  It seems like this would come in handy in rare cases when 4 or more things need to be piped along, but often the library with that style of code has been written to support chaining instead: Pickle.slice().wash().putInJar()..."
2568;Jun 6, 2019 2:39:11 pm;Jun 6, 2019 3:28:29 pm;Complete;;;English;;1559857151_5cf987ff669d27.26640332;;;flattened vs both;5-10 years;Advanced;JavaScript;;226;"""number""";"""function""";;;"y => add(10, y);";;;;;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;use saltyCabbageJar;204;;;;;;;Line 9;use |> await #;226;;;;;;;;;;;;;Line 5;use |> (_ => new Jar(_));28;;;;;;;;;;;;;;;;;;;;;183;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Simple enough after typing \> a few times.;Makes the order of reading much more logical unlike the example you had us rewrite on the previous question where the order of execution actually happens inside out.
2570;Jun 6, 2019 3:07:53 pm;Jun 6, 2019 3:58:32 pm;Complete;;;English;;1559858873_5cf98eb90cdda7.31514941;;;flattened vs proposal 1;more than 10 years;Intermediate;JavaScript;;73;number;"""function""";;;"y => add(10, y);";;Branch A;;;;;;;Rarely;;;;I like the proposal better;;;;;;;;;;Line 5;rename the constant saltyCabbageJar to saltCabbageJar;2490;;;;;;;;;;;;;;;;;;;;;;Line 5;add a paren at the end of line 5;30;;;;;;;;;;;;;;;;;;;;;157;"const kimchi = await ferment( stir( add ( ""spicy paste"", new Jar( salt(cut(wash(""cabbage"") ) ) ) ) ) , 2);";a bowl of jogurt with berries;density of operators;;It isn't really immediately obvious what the underscore is doing;;;;;;;;;;;;;Other - Write In (Required);refactor the code. this is a weird situation I've never encountered.;I guess it's OK. I'd rather not use that, honestly.;
2571;Jun 6, 2019 3:15:17 pm;Jun 6, 2019 3:28:29 pm;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1559859317_5cf99075c59099.78166370;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;16;string;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);117;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));32;;;;;;;;;;;;;;;;;;;;;236;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> (_ => stir(_, 2))   |> ferment   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;"in the body of the ""else if"" a pipe operation was on the same line, and other one was in the next line";;;;;;;;;;;;;The proposal;;I unconsciously wrote => instead of |> (once, but I thought I should mention it), but I think I like it;
2575;Jun 6, 2019 3:27:21 pm;Jun 6, 2019 3:51:50 pm;Complete;;;English;https://www.reddit.com/;1559860041_5cf9934911b5c1.82051311;;;nested vs both;more than 10 years;Expert;JavaScript;;127;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;variant 2;;;;;;Often;;;I like the streamlined pipeline proposal better;;Line 10;, 14;173;;;;;;;;;;;;;;;;;;;Line 1;(The image with the code doesn't load for me :( );131;;;;;;;;;;Line 5;Add closing paren at end: `)`;109;;;;;;;;;;;;;;;;;;Line 1;(Image again does not load);49;228;"const kimchi =   ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Very natural. Already use it in a few other functional programming languages frequently.;"I love this style of programming, can't come quick enough.  I feel the simple ""one argument function"" pipeline proposal (so without #) works the best. It's simple and clean, and adding an anonymous function when necessary is for me personally not an issue in readability.  If we *do* want something like the # syntax, I think we may want to do so separate from the pipeline proposal. Make it a standard language feature, kind of like Scala's `_` syntax (where `_ + 1` is a shorthand for the function `x => x + 1`)."
2579;Jun 6, 2019 4:08:53 pm;Jun 6, 2019 4:38:46 pm;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559862533_5cf99d0566d183.51717762;;;nested vs proposal 1;0-2 years;Advanced;TypeScript;;249;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";variant 5;;;;;;;Often;;;;I like the proposal better;Line 11;", 14);";113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 4;Add a jar;70;561;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar |> ""spicy paste"" |> add |> stir |> (_ => ferment(_, 2)).takeOne();";a bowl of jogurt with berries;density of operators;;It's honestly not *that* bad, just a complicated set of instructions. I think the pipeline operator helps a lot with following the logical flow of data.;;;;;;;;;;;;;The proposal;;Might take a bit to get used to, similar to =>, but can easily become second nature. |> |> |> :) ;Hope it goes through!
2600;Jun 6, 2019 6:02:46 pm;Jun 6, 2019 6:06:42 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559869366_5cf9b7b61672b8.38405783;;;flattened vs proposal 1;0-2 years;Beginner;Java;;63;;"""function""";;;"y => add(10, y);";;variant 5;;;;;;;Every now and then;;;;;;;;;;;;;;;;13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12;18;;;;;;;;;;;;;;;;;;;;;This isn't hard on mobile. It's impossible. I suggest you delete all of my responses. 
2614;Jun 6, 2019 7:30:41 pm;Jun 6, 2019 7:44:14 pm;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559874641_5cf9cc51449fa5.21431185;;;flattened vs both;5-10 years;Advanced;TypeScript;;88;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;variant 3;;;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";189;;;;;;;;;;;;;;the image isn't showing up properly;26;;;;;;;;;;;;;;;;;;;;;;;;;;;;the image isn't showing up properly;11;199;"const kimchiJar = wash(""cabbage"")   |> cut(#)   |> salt(#)   |> new Jar(#)   |> add('spicy paste', #)   |> stir(#)   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;it was okay. Sometimes I accidentally typed \>;I think using `await` in a pipeline is sort of confusing. Rather than: `|> something |> await #`, I'd expect `|> await something`
2625;Jun 6, 2019 8:42:12 pm;Jun 6, 2019 8:51:56 pm;Complete;;;English;;1559878931_5cf9dd13e98887.47013498;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;90;integer;"""function""";;;"y => add(10, y);";;;variant 3;;;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";153;;;;;;;;;;;;;;;17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;83;;;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The proposal;;;
2627;Jun 6, 2019 9:03:32 pm;Jun 6, 2019 9:52:31 pm;Complete;;;English;;1559880212_5cf9e214323135.98588593;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;76;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;;;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Fix the typo;211;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 1;I see an access denied image;53;397;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;Using an underscore as a parameter name in the final lambda mixed with globals, not having a new line before or after the OR in the jogurt if else, and inconsistent new lines before the pipe operator in the jogurt return all made the code harder to read.;;;;;;;;;;;;;The Status quo;;It was a quick one handed motion. I wouldn't mind typing it multiple times.;"I think the lambdas are too verbose for an operator that is meant to compact code and increase readability. If feasible, I'd rather that be optional, otherwise something like each pipe getting a closure and then setting a variable for the previous return, and keeping await on the same line.   Ex: const pickle = ""cucumber""   |> wash   |> new Jar($r)   |> add(water, $r)   |> salt   |> await ferment($r, 2)   |> p => {        console.log(p);        return p.takeOne();      };"
2642;Jun 6, 2019 11:40:20 pm;Jun 7, 2019 12:01:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559889620_5cfa06d487d712.81004356;;;flattened vs proposal 2;5-10 years;Intermediate;Other - Write In (Required);Perl;140;number;"""function""";;;"y => add(10, y);";;;variant 3;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrauthJar = await fermet(saltyCabbageJar, 14);";90;;;;;;;;;;;;;;Sorry, I can't see the image;22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;242;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;I find ternary operators in more than one line very difficult to follow. Adding levels of indentation does not help. Even if you chose a branch in the ternaries it's tricky to know if this branch is the 'return' or will go through some additional pipes a few lines below.;;;;;;;;;The proposal;;"I typed \> more than once I understand | is probably not an option, but it would feel way more natural. Even only > would feel more natural. I'm not used to any language where |> is a thing, so it's not obvious for me what the code is doing. After assimilating |> to ""pipe"" then all makes more sense.";I'm usually scared of adding new features to a language. This one looks neat and can lead to more readable code. However, I can also see this abused and making a mess. Nothing that could not happen now, anyway.  Slightly inclined in favor of |>
2647;Jun 7, 2019 12:06:46 am;Jun 7, 2019 12:28:40 am;Complete;;;English;;1559891205_5cfa0d05c331a8.07548179;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;73;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;;;;;;Other - Write In (Required);I'd split it in many variables instead;;;I like the proposal better;Line 11;add the missing second parameter to ferment;71;;;;;;;;;;;;;;;;;;;;;;;sadly the image with the source code doesn't load :/;52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;266;"const kimchi = wash(""cabbage"")   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;"- looked at first 3 variables - tried to find where they are used in the following code - then reading the steps one by one - this whole line 8 would really benefit from optional chaining - 11 too - imo line 8 would be better written like this: `(isBreakfast || isSnackTime) && (#.jogurt && #.jogurt.ready)` - line 9: The ternary was highly confusing here: I was wondering how we got jogurt again when the previous line would either return a boolean or a nullish. Then I saw the ternary. At this point it's time to exit the pipeline and use an if-else imo. So I'm going with ""nesting pipeline is a bad plan"" (in this case)";;;;;;;;;The proposal;;it's ok, it's really only three keystrokes on a querty (mac keyboard) (shift, |, >)  I also tried it on my azerty and it's slightly more annoying because the > character is on the other side of the keyboard but it's not too bad either.;Can't wait to be able to use this in a proper codebase. # is an ugly character but I can get used to it like I did for private fields
2649;Jun 7, 2019 12:37:09 am;Jun 7, 2019 12:58:26 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559893028_5cfa1424e6cf99.79876462;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;222;number;"""function""";;"add.call(null, 10);";;;;variant 5;;;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";244;;;;;;;;;;;;;;;;;;;Line 7;salt(#);94;;;;;;;;;;;;;;;;;;;;;;;;263;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await ferment(#, 2)  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;"I am not familiar enough with the patterns resulting from the ""|>"" operator";;;;;;;;;The proposal;;It was ok.;
2651;Jun 7, 2019 12:50:07 am;Jun 7, 2019 1:05:04 am;Complete;;;English;;1559893807_5cfa172f5573d6.49955690;;;flattened vs proposal 2;3-5 years;Advanced;TypeScript;;149;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;;;;;;Other - Write In (Required);very often, but usually only when using RxJS;;;I like the proposal better;;;;;;;;;;Line 6;add the missing 'y' in saltyCabbageJar;122;;;;;;;;;;Line 5;remove the semicolon;32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;77;"""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> await ferment;";;;;;a bowl of jogurt with berries;whitespace formating;;The formatting and the large (nested) conditionals threw me off a bit. Oh and the unnecessary wine function, that was weird to read. Otherwise, it's not that bad imo.;;;;;;;;;The proposal;;It was nice actually, since both are on the same key. I could see it becoming really intuitive the more I use it.;The # is nice to work with, but is really kinda ugly (which is probably why people hate the private field proposal so much). It's not the worst, but maybe there are other symbol you could use? 
2654;Jun 7, 2019 1:05:04 am;Jun 7, 2019 1:25:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559894704_5cfa1ab0394d78.95687007;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;176;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar,14);96;;;;;;;;;;;;;;;;Line 7;|> salt(#);85;;;;;;;;;;;;;;;;;;;;;;;;187;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir(#)  |> ferment(#, 2)  |> await #  |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;There's just a lot of words!   It wasn't any particular feature or piece of syntax that was tricky, it was just very verbose.  All that #.jogurt && #.jogurt.ready ... stuff I would have pulled out into a helper function - isTimeForJogurt(#). That leads to wrapping the pipeline as prepareJogurt(#).  It's not the syntax, it's the lack of meaningful names.;;;;;;;;;The proposal;;Easy enough :);I like this proposal very much. I'm interested to know if there's any work to integrate with iterators and generators - for example to flow generator output through a pipeline - but even without that I think this is a good, useful, proposal.
2656;Jun 7, 2019 1:11:15 am;Jun 7, 2019 1:32:59 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559895075_5cfa1c23c43c46.54258387;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;67;number;"""function""";;;"y => add(10, y);";;;variant 4;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;insert `(` between `pound` and `cut` on line 3;91;;;;;;;;;;Line 8;replace line 8 with `|> ferment(#, 2)`;143;;;;;;;;;;;;;;;;;;;;31;;;;;;;168;"const kimchi = ""cabbage""   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;too many if statements;;Parsing out line 8 seemed to be the main thing.  The arrow function on 12 is hard to follow (where does the `{wine}` object come from?;;;;;;;;;The proposal;;Ok, but easier to look at when the font has ligatures for it.;
2662;Jun 7, 2019 2:52:14 am;Jun 7, 2019 3:37:07 am;Complete;;;English;;1559901134_5cfa33ce5ebc25.36491221;;;flattened vs proposal 1;3-5 years;Intermediate;TypeScript;;224;number;"""function""";;;"y => add(10, y);";;variant 4;;;variant 2;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";269;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 6;Line 7;;;;;Line 5;|> (_ => new Jar(_));320;;;;437;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);total uncertainty of what is going to happen if you suddenly introduce an undefined variable to the final part of the function (line 15);the code is readable enough, although line 15 is really unpredictable to me - what would happen if you pass a variable to the pipe, and then make something not related to it inside (jogurt variable is undefined);;;;;;;;;;;;;The proposal;;exciting :);"the proposal, IMO, will allow developers to use this pattern after all; at the moment it's totally unusable, and developers are forced to seek other ways to achieve the same results."
2664;Jun 7, 2019 2:59:10 am;Jun 7, 2019 3:24:39 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559901549_5cfa356dcd56b1.55553839;;;flattened vs proposal 1;3-5 years;Expert;JavaScript;;140;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;;variant 1;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Fix the typo, salt -> salty;86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3;Line 6;add an ingredient before the call;145;;;;196;"const kimchi = wash(""cabbage"") |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await .takeOne();";a bowl of jogurt with berries;density of operators;;Having isLunch, isBreakfast isSnackTime at the end of the conditionals caused me to spend too much time thinking about the shape of the response instead of the above variables.  That and reading the large conditions were the largest cause of slowdown, the extra |> on line 15 seems like a small gotcha, it not being indented a level makes it possible to miss.;;;;;;;;;;;;;The Status quo;;A little uncomfortable, on the UK layout the | is in the far bottom left and > the bottom right which is quite awkward;Writing all the arrow functions makes it lose out on being a nicer syntax, as well as all the extra parenthesis around said functions
2665;Jun 7, 2019 3:13:03 am;Jun 7, 2019 3:40:31 am;Complete;;;English;;1559902383_5cfa38af1d0869.69334437;;;flattened vs proposal 2;more than 10 years;Expert;TypeScript;;1018;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;correct typo in function name;46;;;;;;;;;;Line 5;remove semicolon;97;;;;;;;;;;;;;;;;;;;;;;;;;;4;;;;;;;125;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> strir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;identifiers;;"The biggest problem is that I'm not certain what ""#"" means down the pipeline. ""json.jogurt"" is much easier to read than ""#.jogurt"" so I'd probably just split the pipieline in two.";;;;;;;;;The proposal;;Since I'm also Elixir dev I find it really easy to type.;Can't wait to get this proposal in. I don't _love_ the hash but after a while it felt more and more acceptable. I think it's a tradeoff worth to accept!
2673;Jun 7, 2019 6:17:41 am;Jun 7, 2019 6:43:14 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1559913461_5cfa63f562e586.70037230;;;nested vs both;more than 10 years;Expert;JavaScript;;126;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 3;variant 5;variant 3;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;Line 3;new Jar(;250;;;;;;;;;;;;;;;;;;;;;;Line 7;salt(#);84;;;;;;;;;;;Line 5;;Line 7;;Line 9;Remove the curly braces;89;;;;;;;311;'cabbage' |> wash |> cut |> salt |> new Jar(#) |> add('spicy paste', #) |> stir |> await # |> ferment(#, 2) |> #.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;I don't understand this question. It's like typing anything;"It's a better alternative to the ""fluent""/jQuery style programming (where each method must return `this`), because it's easier to test and everything is just functions. I hope the proposal comes through"
2676;Jun 7, 2019 6:46:17 am;Jun 7, 2019 7:17:38 am;Complete;;;English;;1559915177_5cfa6aa9896a11.16653162;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;20;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 1;await ferment;644;;;;;;;;;;Line 3;pound(cutCabbage);73;;;;;;;;;;;;;;;;;;;Line 5;Remove semicolon;87;;;;;Line 5;;;;;;21;;;;;;;409;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await;  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;too many if statements;;The conditions being tested are repeated several times in a small amount of space, which makes the tests very dense. I found the pipeline to be the most easily understandable part of this code, personally.;;;;;;;;;;;;;The proposal;;I like it and it isn't awkward at all.;I really like the pipeline, it really clears up long function chains.
2677;Jun 7, 2019 6:49:36 am;Jun 7, 2019 7:54:42 am;Complete;;;English;;1559915376_5cfa6b70115ca3.89400552;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;37;3;"""function""";;;"y => add(10, y);";;;variant 4;;variant 2;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;Line 6;add an await in front of the ferment function;119;;;;;;;;;;;;;Line 8;change the line to : |> ferment(14, #);108;;;;;;;;;;;;;;;;;;;;12;;;;;;;218;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> await ferment(#, 2)     |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;I can read the code sequencially line by line.  I had to pause a bit on the consition on line 8, because of the redundancy.  I had to read line 12 several time, and I'm not even sure it is correct, because I would say that the call of this inline function is missing an argument.;;;;;;;;;The proposal;;quite a pain on an azerty keyboard (4 keystrokes, 2 of them being modifiers).  But I think the keyword's look fit it's intended purpose, and too me this is more important than the ease of typing it.;
2680;Jun 7, 2019 8:13:36 am;Jun 7, 2019 8:49:17 am;Complete;;;English;;1559920415_5cfa7f1ff39e26.26670854;;;nested vs proposal 1;5-10 years;Expert;TypeScript;;160;number;"""function""";;;"y => add(10, y);";;variant 4;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 1;await ferment(;787;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";190;;;;;;;;;;;;;;;;;;;;;;;;Line 3;;;;;;;;3;Line 5;|> new Jar();40;;;;256;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;"Line 14-15, the placeholder '_' refers to the json payload in the response but in line 15 the the pipleline operator used 'jogurt' as its placeholder; had to reread that a few times.";;;;;;;;;;;;;The proposal;;It's great. Functional programming is really taking off in my team and in the realms I visit/operate online. The status-quo, for me, is what happens when we try to be more functional. The language doesn't have a native way to express data transformations as a clear, readable, pipeline. This solves it.;I've been learning Elixir for the past two months and the pipeline operator is perhaps my favorite part of the language. So perhaps I'm a bit biased. 
2681;Jun 7, 2019 8:28:05 am;Jun 7, 2019 8:47:12 am;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559921284_5cfa8284ddab80.42545937;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;111;number;"""function""";;;"y => add(10, y);";;variant 4;;;variant 2;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;Line 6;"await ferment(salyCabbageJar, 14);";114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 6;;;;;;Line 5;|> (_) => new Jar(_);42;;;;393;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |>(_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 14)) |> await |>(_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;"the long if statements slowed me down, as well as the return jogure line where there was a chained function below the return statement. It took me a second to realize where the ""|> (jogurt => add..."" line was applying.";;;;;;;;;;;;;The proposal;;it was a little cumbersome, but I'm sure I'd get used to is quickly.;
2684;Jun 7, 2019 9:59:44 am;Jun 7, 2019 10:12:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559926784_5cfa9800025c36.39972390;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;110;Number;"""function""";;"add.call(null, 10);";;;;variant 5;;variant 1;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Salty instead of Salt;189;;;;;;;;;;;;;;;;;;;Line 8;Await;75;;;;;;;;;;;;;;Line 8;;;;;;;;;;28;;;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The Status quo;;;
2686;Jun 7, 2019 10:25:05 am;Jun 7, 2019 10:43:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559928305_5cfa9df1389f55.41049086;;;nested vs both;3-5 years;Advanced;JavaScript;;77;;"""object""";;;"y => add(10, y);";;variant 2;variant 2;variant 2;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;Line 1;await ferment(;197;;;;;;;;;;;;;;;;Line 9;remove await -- |> already unwraps the promise.;92;;;;;;;;;;;;;Line 8;remove the await: |> unrwaps the promise.;80;Line 1;Line 2;Line 3;Line 4;Line 5;Line 6;Line 7;Line 8;Line 9;;21;;;;;;;330;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)  await kimchi.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;fine;I'd vote for $ or @ over #.  @ has the history of bash behind it with $@ as the arguments to the program.  $ might have baggage with JQuery, but I dislike using a usually-comment character # as the pipe input/return value.
2688;Jun 7, 2019 10:45:06 am;Jun 7, 2019 12:53:03 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559929506_5cfaa2a2a57d21.22542549;;;flattened vs proposal 2;5-10 years;Intermediate;JavaScript;;171;function;"""object""";"add.bind(null, 10);";;;;;variant 2;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"pound(cutCabbage);";173;;;;Line 5;No idea. new Jar(#);718;;;;;;;;;;;;;;;;Line 1;;;;Line 5;;;;;;;;;;;;;497;"const kimchi =  ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> await ferment(#, 2) |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);What does the # refer to? If both jogurt and and wine are ready: true...then what gets fed where???;Tracking from the start -> true, false, false... a: result = url, which is fed to the await... b: which brings back...something and the mode c: which is fed into the await #.json... d: which brings back both jogurt: {ready: true} and wine: {ready: true } e: Which is now fed into the ternary...but since d brings back both jogurt and wine as true...i get both a bowl of berries AND a cup of wine?? But it seems I'm only going to get a bowl of berries, since at least that came back true first, and since it's true even if isBreakfast or isSnackTime,  the ternary will stop at the after first result, and ignore the rest.  Had to read line 8 ten times - lines 8 to 13 are headache inducing.  The # is confusing.;;;;;;;;;Other - Write In (Required);Don't understand the # lose the idea of what it is on line 3.;Typing the |> is great.  If we can string functions in left to right fashion and change order on the fly that would be seriously cool.;Can we also get functions that go backwards like this:  < |   Thanks!
2690;Jun 7, 2019 11:19:22 am;Jun 7, 2019 11:30:35 am;Complete;;;English;https://feedly.com/i/collection/content/user/6904df5b-416b-4702-a08d-522aea57617b/category/a-work;1559931562_5cfaaaaa4376d3.95216348;;;nested vs both;more than 10 years;Advanced;Other - Write In (Required);C#;64;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;variant 4;variant 3;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;Line 3;new Jar(;103;;;;;;;;;;;;;;;;;;;Line 8;ferment(#, 14);49;;;;;;;;;;;;;;;;;Line 8;;;2;;;;Line 7;ferment(# , 14);22;149;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne";;;;;;;;;;;;;;;Pipeline with #;;;;I must admit that I mis-typed |> the first few times.  I do not have any muscle memory for that combination and it is far more likely for me to type a backslash as opposed to a pipe character.;
2691;Jun 7, 2019 11:56:07 am;Jun 7, 2019 2:27:11 pm;Complete;;;English;https://wallabag.spiffy.tech/;1559933767_5cfab3473211a4.86137107;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;215;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";variant 4;;variant 2;;;;;Every now and then;;;;I like the proposal better;;;;Line 1;Await the fermentation process;152;;;;;;;;;;Line 3;Add an opening paren to the function call;87;;;;;;;;;;;;;;;;;;;;;;;;Line 3;;;;;;;;34;Line 5;(_ => new Jar(_));46;;;;228;"const kimchiJar =  ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2)) |> await;  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);Using _ for pipeline variables instead of naming them;;;;;;292;;;;;;;;The proposal;;A little odd, but worth it.;I liked using this same pipeline operator in F#, and would very much like to see it in JavaScript.
2693;Jun 7, 2019 12:46:25 pm;Jun 7, 2019 1:20:45 pm;Complete;;;English;https://www.reddit.com/r/javascript/comments/bxeflg/optional_chaining_is_now_at_stage_2/;1559936785_5cfabf11404b71.62919931;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;168;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";variant 3;;variant 1;;;;;Rarely;;;;I like the proposal better;Line 11;Add numdays argument;153;;;;;;;;;;;;;Line 3;"Add ""("" between ""pound"" and ""cut""";80;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;Remove braces;828;;;;;;;461;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> (_ => ferment(_, 2))     |> await     |> (_ => _.takeOne());";a bowl of jogurt with berries;whitespace formating;;;;;;;;;;;;;;;The proposal;;Reasonably ergonomic since both are RH and both are shifted.;
2699;Jun 7, 2019 1:55:42 pm;Jun 11, 2019 9:08:33 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559940941_5cfacf4de67616.22139050;;;flattened vs proposal 1;5-10 years;Advanced;Ruby;;45;Number;"""function""";;;"y => add(10, y);";;variant 4;;;variant 2;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;Line 7;"const sauerkraut = await sauerkrautJar.takeOne();";124;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;;;;;Line 5;|> (_ => new Jar(_));34;;;;326106;"const kimchiJar = await ""cabbage"" |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"")) |> stir |> ferment const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;inconsistent style;;"1) treating ""await"" as a function 2) trying to think about what each function returned and how that would pipe into the next function 3) Using _ as an identifier instead of a real variable name 4) Inconsistency between when |> was on a separate line vs. inline";;;;;;;;;;;;;The proposal;;That part is OK.;In simple cases like the above it can be a lot more readable. I'm worried about the complex cases where people try to use this e.g. with conditional program flow - it can be a lot less understandable in that case. Not sure if there's a good way to avoid it though.
2705;Jun 7, 2019 3:31:31 pm;Jun 7, 2019 3:52:35 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559946691_5cfae5c38f2754.14382836;;;nested vs both;5-10 years;Expert;Other - Write In (Required);Groovy;317;number;"""function""";"add.bind(null, 10);";;;;variant 4;variant 3;variant 1;;;;;Rarely;;;I like the status quo better;;Line 10;it's missing the numdays param;90;;;;;;;;;;;;;;;;;;;;;;Line 5;new Jar(#);85;;;;;;;;;;;;;;;;;;;;;;;10;Line 5;new Jar(#);30;;;;388;"const kimchi = ""cabbage"" |> wash(#) |> cut(#) |> salt(#) |> add(""so spice"", new Jar(#)) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Other - Write In (Required);why nest functions, why not pass a reference to the cabage around?;;;;
2710;Jun 7, 2019 9:29:40 pm;Jun 7, 2019 9:50:05 pm;Complete;;;English;;1559968180_5cfb39b4265290.81071169;;;nested vs proposal 2;5-10 years;Advanced;Other - Write In (Required);C#;20;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 4;variant 1;;;;;Rarely;;;;I like the proposal better;Line 10;), 2);108;;;;;;;;;;;;;;;;;;;;;;;;;Line 8;|> ferment(#, 2);98;;;;;;;;;;;;;;;Line 6;;;;;2;;;;;;;301;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);The error on line 12;"The pipelines were ok.  The long line with multiple || operators for null checking was hard to read.  Line 12 was also weird, since it was inconsistent with the rest, and I think it's missing a couple ""#."" before the ""wine""s.";;;;;;;;;The proposal;;It was great, even on mobile.  I can't wait!;
2713;Jun 8, 2019 12:54:34 am;Jun 8, 2019 1:27:10 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1559980474_5cfb69ba43d225.91409027;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;182;"""number""";"""function""";;;"y => add(10, y);";;;variant 2;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);403;;;;;;;;;;Line 5;|> new Jar(#);125;;;;;;;;;;;;;;;;;;;;Line 5;;;;;;11;;;;;;;270;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;Argument desctructuring on line 12 :    (({wine}) => wine |> fillGlass)();;;;;;;;;The proposal;;Fine, not harder than type a fat arrow ( => ).;I found this proposal very interesting ! :-)
2714;Jun 8, 2019 1:12:58 am;Jun 8, 2019 2:01:31 am;Complete;;;English;;1559981578_5cfb6e0a5067e4.59458617;;;nested vs proposal 2;3-5 years;Advanced;TypeScript;;157;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;variant 3;;;;;Every now and then;;;;I like the proposal better;;;;;;;Line 3;add a parenthesis;294;;;;;;;;;;;;;Line 5;remove the semicolon;58;;;;;;;;;;;;;;;;;;;;Line 5;;;;;;109;;;;;;;380;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)   |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);Redundant pipeline and arrow function usage;"1) on line 8, condition `(#.jogurt && #.jogurt.ready)` is redundantly repeated 2) `""https://url.com"" |> await fetch(#, ...)` is definitely not a good pattern 3) ternary operator abuse, just use if-s 4) until this section I thought expression on the right side of pipeline operator must evaluate to a function, while in this case it evaluates to null/glass/bowl, which makes sense, but is confusing at first";;;;;;;;;The proposal;;it is better from the standpoint of reading. humans are not computers -- we read from left to right, not from middle to both direction;`|> ferment(#, 2) |> await #` kind of sucks, why not just `|> await ferment(#, 2)` or `|> ferment(#, 2) |> await`?
2716;Jun 8, 2019 1:23:10 am;Jun 8, 2019 1:50:55 am;Complete;;;English;;1559982190_5cfb706e8de3d6.61857477;;;flattened vs both;3-5 years;Advanced;JavaScript;;201;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;variant 4;;variant 2;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;;;;Line 6;add 'await' before function call;245;;;;;;;;;;;;;Line 8;ferment(#, 14);95;;;;;;;Line 5;remove the semicolon;145;;;;;;;;;;;3;;;;;;;398;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Typed '  |>' once, then copied and pasted it every new line with the indent. These text areas do not support pressing TAB to indent, in text editor it would be more likely for me to type it manually.;
2717;Jun 8, 2019 1:18:32 am;Jun 8, 2019 2:14:06 am;Complete;;;English;https://planet.mozilla.org/;1559981912_5cfb6f58c6f1c5.55210521;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;135;number;"""function""";;;"y => add(10, y);";;;variant 4;;variant 1;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;Fix the variable name typo;127;;;;;;;;;;;;;;;;Line 8;\> ferment(#, 14);69;;;;;;;;;;;;;;;;;;;;6;;;;;;;267;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;"This was mostly fine to read until I hit line 12 where I wondered why anyone would do this. Logically the code reads fine, but this isn't an improvement over the old method apart from being able to read it top-down instead of inside-out, but written better almost all of this could be handled by call chaining. I can see the benefit of this for code we don't have control over and can't be re-written or wrapped to support chaining, but the |> syntax is both horrible and hard to type.  (Also I don't think the ""bowl of jogurt with berries"" answer it technically accurate because at no point do we say what to fill the bowl with. Does fillbowl() have that logic?)";;;;;;;;;Other - Write In (Required);The proposal would be fine but the syntax is horrible. Need a nicer to read and easier to type chaining operator and frankly hash is a terrible placeholder because it means nothing to a new reader.;Awkward.;* With # it's very hard to determine what it's about for someone reading this code the first time, especially given my next point.  * It doesn't help that in _some_ cases # is required and others it's automatic purely to save explicit function signature brackets. I'd prefer it to be always required since everywhere else in the language there's a very clear distinction between `wash` and `wash()` (passing function reference vs immediate function execution result). To a new learner this code appears to use both concepts here arbitrarily and interchangeably.  * The use of `await` as a separate line will cause a lot of dev confusion since it's usually prefixing the awaited operation. I'd prefer it attached to the line itself. What happens here if we have two async promise-returning methods in a row and then the `async` line after the second?  * Please don't use #. This feels like a design based around saving bundle size vs readability.  * |> is totally awkward to type.
2727;Jun 8, 2019 8:33:10 am;Jun 8, 2019 9:01:35 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560007990_5cfbd5363d00e3.85170640;;;nested vs both;0-2 years;Beginner;Python;;315;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;variant 2;variant 3;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;Line 3;Add an opening paren;128;;;;;;;;;;;;;Line 5;Delete the semicolon;78;;;;;;;;;;;;;;;;;;;;Line 5;;;;;;7;Line 5;Use a wrapper function;33;;;;571;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;The code is more composable and requires fewer parentheses. It improves the potential for high-quality software engineering in JavaScript.;"The pipeline proposal (presumably influenced by OCaml or F#) is great, but the ""#"" as a replacement for function call syntax is too much magic. The language should aim to be expressive without obscuring the underlying lambda calculus model of computation."
2729;Jun 8, 2019 11:42:45 am;Jun 8, 2019 11:59:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1560019365_5cfc01a5bffcb4.34938465;;;nested vs both;3-5 years;Intermediate;Other - Write In (Required);Rust;158;"""integer""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;variant 5;variant 3;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;Line 3;Add a parenthesis after `Jar`;89;;;;;;;;;;;;;;;;;;;;;;Line 8;Pass `#` to `salt()`;75;;;;;;;;;;;;;;;;;9;Line 5;Replace `new Jar` with `(_ => new Jar(_))`;108;;;;203;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;It was a lot smoother than having to figure out what is nested with what. It was a lot more intuitive than nesting functions.;I like this feature.
2735;Jun 8, 2019 7:57:41 pm;Jun 8, 2019 8:13:23 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1560049061_5cfc75a5abd553.59282739;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;125;number;"""function""";;;"y => add(10, y);";;;variant 4;;variant 2;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;;Line 6;await;53;;;;;;;;;;;;;Line 8;|> ferment(#, 14);78;;;;;;;;;;;;;;;;;;;;9;;;;;;;183;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;density of operators;;Reading line 8 was the hardest. I had to zoom back and forth to match parentheses. Line 12 was interesting but tricky.;;;;;;;;;The proposal;;Annoying, but there's no real alternative, is there?;Thanks for your hard work!
2737;Jun 8, 2019 9:13:37 pm;Jun 8, 2019 9:36:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560053617_5cfc8771890e03.11180000;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;210;number;"""function""";"add.bind(null, 10);";;;;variant 4;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 7;not sure;290;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38;Line 5;_ => new Jar(_);42;;;;171;"const kimchi = ""cabbage""  |> cut  |> wash  |> salt  |> _ => new Jar(_)  |> jar => add(""spicy paste"", jar)  |> stir  |> jar => await ferment(jar)  |> ({ takeOne }) => takeOne()";a bowl of jogurt with berries;too many if statements;;Initially the fetch call was a little confusing, but the final function call with the various ready, global boolean checks made it quite confusing. ;;;;;;;;;;;;;The proposal;;A little different at first, but honestly so was => (arrow function). Now I am used to it.  The line '|' character required shift+type, but again so does the '>', difference is that you have to hold shift for BOTH the '|' &' >'.  ~> looks too much like an arrow so that is out.  All in all, it is just a new thing to learn but the benefit is worth it.;In our codebase, we often use the Lodash 'flow' function, which essentially does a similar thing to the pipe operator.  It takes a bit of getting used to the first few times, but ends up making the code much more readable.  It is better when you are working with a 'pipeline' of data. I know the code in the examples is intentionally verbose.  Ideally though the way to use this is 'prep all your 'data' first, then send it to something that processes or uses that data'.  Also, I would be nice to see how then or catch would work with this. Or are you meant to use await only?
2749;Jun 9, 2019 5:18:34 am;Jun 9, 2019 5:44:23 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560082714_5cfcf91ad10cc2.44628708;;;nested vs proposal 1;3-5 years;Advanced;TypeScript;;126;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;variant 1;;;;;Often;;;;I like the proposal better;Line 10;`, 14`;177;;;;;;;;;;;;;Line 3;pound(cutCabbage);105;;;;;;;;;;;;;;;;;;;;;;;;Line 3;;;;;;;;9;;;;Line 7;|> _ => ferment(_, 14);98;376;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> _ => new Jar(_)   |> _ => add(""spicy paste"", _)   |> stir   |> _ => ferment(_, 2)   |> await   |> takeone";a bowl of jogurt with berries;density of operators;;1. The booleans being a static thing threw me off a little 2. Four lines of code to fetch and get json felt like a lot of overhead 3. I re-read the response structure many times;;;;;;;;;;;;;The proposal;;On my Android mobile device, not bad;
2751;Jun 9, 2019 5:45:08 am;Jun 9, 2019 6:02:51 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560084308_5cfcff544dbad0.39280773;;;flattened vs proposal 1;5-10 years;Advanced;Ruby;;104;Integer;"""function""";;;"y => add(10, y);";;variant 2;;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";188;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));58;;;;;;;;;;;;;;;;;;220;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;The difficult part was understanding which branch evaluated to true;;;;;;;;;;;;;The proposal;;As easy as it is in Elm or $ in PureScript :);Using _ as the name of the arguments is cool but I hope it didn't confuse people
2756;Jun 9, 2019 8:53:26 am;Jun 9, 2019 9:23:57 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560095606_5cfd2b76bd8c70.00640019;;;flattened vs both;more than 10 years;Expert;JavaScript;;91;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;variant 2;;variant 3;;;;Rarely;;;I like the status quo better;;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pundcutCabbage(cutCabbage); // or at least this is what it seems it should be doing";186;;;;Line 5;|> new Jar(#) // remove the semicolon;95;;;;;;;;;;;;;;;;;;;;;;;;;;4;Line 5;|> new Jar(#) // but also |> await #;91;;;;872;"// first of all, add and stir should be methods of the jar, but anyway..., so, if I understood your requirement:  const processedCabbage = salt(cut(wash('cabbage'))); const kimichiJar = stir(add('spicy paste', new Jar(processedCabbage))); const kimichi = (await ferment(kimichiJar)).takeOne();  // second version, if OOP was applied better:  const jar = new Jar(cut(wash('cabbage')));  jar.add('salt', 'spicy paste'); jar.stir(); // could be an improved jar that can stir, otherwise you would need to stir before adding to the jar ;)  await delay(2); // assuming we defined `delay` somewhere; does fermenting mean anything else than waiting?  const kimichi = jar.content; // not sure what 'takeOne' is supposed to mean";;;;;;;;;;;;;;;Other - Write In (Required);None of these makes sense. I wrote a version on the previous page.;;;Weird.;Yes, see the previous question for how I would write this code. Also on the previous page the progress was less than 40% and now we got to 96%. Also there was a page where there was a question about where the bug is but there was no code. I thought that that was probably a check against robots. Nevertheless, this survey seems buggy. Also the style of programming that you proposed is less than intuitive to say the least.
2758;Jun 9, 2019 10:07:58 am;Jun 9, 2019 10:22:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560100078_5cfd3cee83f625.03913726;;;flattened vs both;3-5 years;Advanced;Other - Write In (Required);Ocaml;98;The definition of add as a string;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;variant 4;;variant 2;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;;;;;;;;;;Line 6;Add await;45;;;;;;;;;;;;;Line 8;|> ferment(#, numDays);213;;;;;;;;;;;;;;;;;;Line 9;;6;;;;Line 7;|> (_ => ferment(_, numDays));61;216;"wash(""cabbage"") |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not bad;
2764;Jun 9, 2019 1:40:41 pm;Jun 9, 2019 2:17:55 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560112841_5cfd6ec9969720.67501586;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;86;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;;variant 1;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;saltyCabbageJar;151;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 6;;;;;7;;;;Line 7;|> (_ => ferment(_, 2);91;251;const kimchi = 'cabbage' |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add('spice paste', _) |> stir |> (_ => ferment(_, 2) |> await |> (_ => _.takeOne());a bowl of jogurt with berries;density of operators;;Pipes are great, and I understand readability concerns around, say, silently passing the piped value as the first parameter to a function with multiple parameters. May be better for the majority, though I'd personally prefer tighter syntax.  The conditional expressions could benefit from null-coalescing for brevity.;;;;;;;;;;;;;Other - Write In (Required);"The problem I have with the proposal is the way it handles piping when multiple parameters are passed to a function; as soon as the underscore variable and extra syntax are present it starts looking like noise. I'd personally be happier if the piped value were silently passed as the first parameter always, and I could read the rest with that mental transform in mind.";Great;This proposal is probably fine overall, explicitness to help people less familiar understand what's going on. Too noisy for my particular taste, but I tend to prefer less popular languages/styles so take that with a grain of salt.
2767;Jun 9, 2019 5:54:05 pm;Jun 9, 2019 6:02:52 pm;Complete;;;English;;1560128045_5cfdaa2d11aed7.27367884;;;nested vs proposal 1;more than 10 years;Expert;JavaScript;;54;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;variant 3;;;;;Often;;;;I like the proposal better;;;;;;;Line 3;Add `(` after `Jar`;96;;;;;;;Line 3;Add `(` between `pound` and `cut`;29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;add `(_) => ferment(_, 14)`;59;128;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_) => new Jar(_)   |> (_) => add(""spicy paste"", _)   |> stir   |> await   |> (_) => ferment(_, 2)   |> (_) => _.takeOne()";a bowl of jogurt with berries;too many if statements;;;;;;;;;;;;;;;The proposal;;;
2770;Jun 9, 2019 8:40:14 pm;Jun 9, 2019 9:13:54 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560138014_5cfdd11e4b3a92.28527335;;;flattened vs proposal 1;more than 10 years;Expert;TypeScript;;77;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;add ( after pound;155;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10;;;;Line 7;|> (_ => ferment(_, 14);63;118;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> takeOne";a bowl of jogurt with berries;density of operators;;read through to conditionals, backtracked to booleans at the top, read through to the end, backtracked to the fetch response comment;;;;;;;;;;;;;The proposal;;alright, not super fast, don't use left shift much, i tend to use right shift for everything, and |> is not quick that way.;thanks for taking the time to do this!
2771;Jun 9, 2019 8:47:04 pm;Jun 9, 2019 11:31:09 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560138424_5cfdd2b8326f62.16032282;;;nested vs both;5-10 years;Advanced;Python;;383;number;"""function""";;;"y => add(10, y);";;variant 2;variant 4;variant 3;;;;;Often;;;I like the streamlined pipeline proposal better;;;;;;;;Line 7;;5111;;;;;;;;;;;;;;;;;;;Line 8;;1235;;;;;;;Line 6;;56;;;;;;;;;;;3;;;;;;;513;"const kimchi = ""cabbage"" |>wash |>cut |>salt |>(_=>new Jar(_)) |>(_=>add(""spicy paste"",_)) |>stir |>(_=>ferment(_,2)) |>await |>(_=>_.takeOne());";;;;;;;;;;;;;;;Pipeline with #;;;;;
2778;Jun 10, 2019 3:13:53 am;Jun 10, 2019 3:37:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560161633_5cfe2d61420af7.27871509;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;108;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";variant 5;;variant 1;;;;;Every now and then;;;;I like the proposal better;Line 12;"add `14` as the missing argument: `, 14);`";193;;;;;;;;;;;;;Line 3;const crushedCabbage = pound(cutCabbage);113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;|> (_ => ferment(_, 14));74;388;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;Tracking the various states of readiness and time was the most complex aspect. I'd expect Prettier to sort out the formatting at 14/a5;;;;;;;;;;;;;The proposal;;Fine;I *really* look forward to seeing this syntax land: seeing the control flow in the same sequence in code as it does IRL is going to be much nicer
2779;Jun 10, 2019 5:52:24 am;Jun 10, 2019 6:46:12 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560171144_5cfe5288655034.23795555;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;60;number;"""function""";;;"y => add(10, y);";;variant 4;;variant 2;;;;;Every now and then;;;;I like the proposal better;;;;Line 3;need to add the salt?;173;;;;;;;;;;Line 3;add parenthesis;436;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;need to add cabbage to jar?;144;;;;629;const kimchi = 'cabbage' |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add('spicy paste', _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());a bowl of jogurt with berries;inconsistent style;;"the use of ""_"" with a lambda function was hard...  Had to go back and look at the API response and constants ";;;;;;;;;;;;;The proposal;;comfortable/quick ;
2781;Jun 10, 2019 7:43:36 am;Jun 10, 2019 8:06:19 am;Complete;;;English;https://feedly.com/i/subscription/feed%2Fhttp%3A%2F%2Fhacks.mozilla.org%2Ffeed%2F;1560177816_5cfe6c982fc892.59836276;;;flattened vs proposal 2;more than 10 years;Expert;TypeScript;;10;number;;;;"y => add(10, y);";;;variant 5;;variant 2;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";49;;;;;;;;;;;;;;;;Line 7;|> salt;22;;;;;;;;;;;;;;;;;;;;;;;;311;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Willing to keep one pipeline and using ternary conditionals that needs to return an entity for the pipeline to continue is a bit messy.  It's like forcing one Promise chain and having choices in the `then()` methods...  I would prefer to have one pipeline to get the fetch result, then two different pipelines extending the first one, one to process the yogurt, and a second one to process the wine.  Clear code is easy to maintain. This one can really be improved for readability.;;;;;;;;;The Status quo;;;The idea is good, especially for recurrent  mechanical transforms, like after a `fetch()` call. Note I find the special `|> await #` a stretch: why no direct `|> await ferment(#, 2)`...  Not sure I like for use with ternary conditionals...
2782;Jun 10, 2019 8:10:44 am;Jun 10, 2019 8:43:05 am;Complete;;;English;;1560179444_5cfe72f45dc621.22923584;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;148;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;variant 3;;;;;Rarely;;;;I like the proposal better;;;;;;;Line 3;Add a ( to the end of line 3;163;;;;;;;;;;;;;;;;;;;;;;Line 7;remove the parens;282;;;;;;;;;;;;;Line 7;;;;4;;;;;;;323;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;inconsistent style;;I had to keep looking at the JSON to make sure I was reading the other code correctly. I paused on lines 9 and 10, then I realized those should have been on either 1 line or 3 lines. I also briefly thought about the nested pipeline operators but I assumed these weren't related to the higher ones.  I think lines 11-13 were the most confusing with nested ternary _and_ nested pipeline operators.;;;;;;;;;The proposal;;It was a little weird and slow for me. I think I was starting to get used to it near the end, however.;Looking forward to this new operator. It was interesting to see that this isn't as straightforward as I initially thought.  Good luck!
2785;Jun 10, 2019 8:52:43 am;Jun 10, 2019 11:19:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560181963_5cfe7ccb0d8055.86732932;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;79;"""number""";"""function""";;;"y => add(10, y);";;;variant 2;;variant 1;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;"Rename arg to ""saltyCabbageJar""";89;;;;;;;;;;Line 5;Remove the trailing semi-colon;87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;106;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await #   |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);Nested ternary operators;"The `&&` conditionals are a bit slow, and could be improved via the `?.` (eg  `#.jogurt?.ready && isBreakfast`) operator. The big thing is the nested ternaries, giving several ""else"" blocks.";;;;;;;;;The Status quo;;Hmm, didn't think about how it _felt_ to type that, but I suppose it was OK. You hold down SHIFT for each character so that makes it easier.;"I'm more for _using_ the ""status quo"" but wouldn't mind if this existed in the Ecmascript spec.  I work a lot with junior developers, and when teaching them, I find it more important that they understand the _fundamentals_ before they dive into deeper aspects of some part of the language.  For instance, arrow functions vs declarative functions. I find it more important that a developer understand the _concept_ of functions, arguments, etc. before diving into the lexical `this` and when an arrow function might be useful.  Similarly, composing functions by storing each result in a variable and then passing it on is easier to understand when you already have the foundation of variables and function calls. Once a developer understands these, moving onto these ""pipeline"" proposal shouldn't be that big of a leap, and hopefully then the developer can see the advantages of one methodology over another."
2787;Jun 10, 2019 9:45:38 am;Jun 10, 2019 9:59:10 am;Complete;;;English;;1560185138_5cfe8932c416a7.82264153;;;flattened vs proposal 2;more than 10 years;Beginner;TypeScript;;109;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 4;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";133;;;;;;;;;;;;;;;;Line 8;ferment(#, 14);54;;;;;;;;;;;;;;;;;;;;5;;;;;;;182;"const kimchi = ""cabbage""    |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;- having to read #.jogurt && #.jogurt.ready && isBreakfast, and then almost the same but with snacktime.;;;;;;;;;The proposal;;not very nice. the | symbol is on a rather not so nice place on my keyboard. I typed { and \ every time instead.;
2788;Jun 10, 2019 10:01:10 am;Jun 10, 2019 10:20:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560186069_5cfe8cd5eb7a75.41817771;;;flattened vs proposal 2;more than 10 years;Intermediate;JavaScript;;128;integer;"""function""";;;"y => add(10, y);";;;variant 4;;variant 3;;;;Often;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(crushedCabbaege);";101;;;;;;;;;;Line 8;|> ferment(#, 14);111;;;;;;;;;;;;;;;;;;;;3;;;;;;;241;"const kimchi = ""kimchi"" |> wash |> cut |> salt |> new Jar(#) |> add (""spicy paste"", #) |> stir |> ferment (#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);The uncertainty if I'm right so I can't actually tell what confused me if I'm wrong.  Also, what the hell is 'cors' and 'jogurt'?  Is that an alternative to 'yogurt'?;I counted the parenthesis to see if they all matched up. I'm still unclear on this notation: function (x) => {blahblah} It's the =>.;;;;;;;;;The Status quo;;"I see what you're trying to do here; making things unnecessarily easy.  If I had trouble with a list of discrete commands, I wouldn't have become a programmer in the first place.  Maybe concentrate your energies elsewhere?  there are tons of bugs on bugzilla that need fixing before this comes to pass.";
2791;Jun 10, 2019 1:45:05 pm;Jun 10, 2019 1:59:34 pm;Complete;;;English;;1560199505_5cfec1516e21c5.82817041;;;flattened vs proposal 2;more than 10 years;Beginner;C++;;96;3;"""function""";;;"y => add(10, y);";;;variant 5;;variant 1;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"change ""saltCabbageJar"" to ""saltyCabbageJar""";130;;;;;;;;;;;;;;;;;;;Line 7;make it salt(#);83;;;;;;;;;;;;;Line 7;;;;8;;;;;;;247;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;The proposal;;fine;
2795;Jun 10, 2019 4:19:23 pm;Jun 10, 2019 4:54:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1560208763_5cfee57b1846f5.69912371;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;61;"""number""";"""function""";"add.bind(null, 10);";;;;variant 4;;variant 2;;;;;Every now and then;;;;I like the proposal better;;;;Line 1;add `await` before `ferment`;158;;;;;;;;;;Line 3;Put `(` before `)`;112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;replace line 5 with `|> (_ => new Jar(_))`;305;;;;715;"const kimchiJar = ""cabbage""   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2)   |> await";a bowl of jogurt with berries;inconsistent style;;I was enjoying myself until line 12. The pipeline operator on the same line differing from line those on lines 6-10 caused me to second-guess myself and reread lines 11-12. Throughout the rest of the code I was thrown off by seeing _ as a variable name, however messy code isn't a stranger to my team so the density of operators or multitude of if statements wasn't a problem.;;;;;;;;;;;;;The proposal;;It would've felt weird typing an operator with 2 different characters in it (PHP flashbacks), but since I've grown accustomed arrow functions it felt quite natural.;I would prefer writing `|> new Jar` opposed to `|> (_ => new Jar(_))` opposed.  Multithreading in Javascript plz (jk)
2800;Jun 10, 2019 7:55:35 pm;Jun 10, 2019 8:06:07 pm;Complete;;;English;;1560221734_5cff1826d8f9b2.20533278;;;flattened vs proposal 1;3-5 years;Intermediate;C++;;15;"""number""";"""function""";;;"y => add(10, y);";;variant 3;;;variant 2;;;;Rarely;;;;I like the status quo better;;;;;;;;;;;;;Line 7;"await sauerkrautJar.takeOne();";70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;98;;;;;;;186;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => {new Jar(_)})     |> (_ => {add(""spicy paste"", _)}     |> (_ => {stir(_, 2})     |> await     |> takeOne";a bowl of jogurt with berries;whitespace formating;;Pipelines are indented at different levels which is rather annoying;;;;;;;;;;;;;The Status quo;;Not any worse than -> or =>;
2803;Jun 11, 2019 2:34:31 am;Jun 11, 2019 2:52:24 am;Complete;;;English;;1560245671_5cff75a755f357.56836316;;;nested vs proposal 2;more than 10 years;Advanced;Java;;99;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;variant 1;;;;;Every now and then;;;;I like the proposal better;Line 10;), 14;75;;;;;;;;;;;;;;;;;;;;;;Line 5;new Jar(#);47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;149;"""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(#, ""spicy paste"") |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;The main problem about this code seems to be the nested ternary operators. But all in all, it was still quickly readable to me;420;;;;;;;;The proposal;;A bit clumsy on a German QWERTZ keyboard (the '|' requires pressing AltGr + < , the '>' Shift + < );I really like the proposal!
2806;Jun 11, 2019 2:56:11 am;Jun 11, 2019 3:11:06 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560246971_5cff7abb197435.03581526;;;flattened vs proposal 2;0-2 years;Advanced;JavaScript;;50;Number;"""function""";;;"y => add(10, y);";;;variant 4;;variant 3;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;Insert paranthesis to next caracter of pound;138;;;;;;;;;;Line 5;Replace line 5 to line 6;161;;;;;;;;;;;;;;;;;;;;5;;;;;;;148;;;;;;a bowl of jogurt with berries;density of operators;;The operators much then letters;;;;;;;;;The proposal;;x  |> y |>z;
2809;Jun 11, 2019 4:56:11 am;Jun 11, 2019 5:20:38 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560254171_5cff96db968f40.38262857;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;111;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 3;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 1;await ferment( ...;130;;;;;;;;;;Line 3;"add missing opening brace: poundcutCabbage();";47;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;remove {} brackets or add return keyword;172;;;;;;;220;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";null;density of operators;;"1. Following the outer pipeline down 2. Going into the big tail-end block; 3. Going back _up_ the pipeline to check back on certain values. 4. Prune the boolean algebra in my head to find which branch is taken in the cascaded if/else-if   Limited head-space for variable values and the big guard conditions are the slow-downs here.";;;;;;;;;;;;;The proposal;;Felt natural;I _really_ don't like the need for arrow function wrappers to deal with multi-argument functions, especially with the outer braces.  Some syntactic sugar required there.    
2814;Jun 11, 2019 6:48:29 am;Jun 11, 2019 7:18:04 am;Complete;;;English;;1560260909_5cffb12d96e695.79652279;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;664;number;"""function""";"add.bind(null, 10);";;;;variant 5;;variant 2;;;;;Every now and then;;;;I like the proposal better;;;;Line 1;async/await;199;;;;;;;;;;Line 3;delete the );34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;((str, someNumber) => ferment(str, someNumber));115;331;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(_, ""spicy paste""))   |> stir   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;nested pipelines and density of operators. i also kinda wish that fllPlate or fillBowl actually existed somewhere so I could reason about that as well;;;;;;;;;;;;;The proposal;;I'll just need to get the muscle memory down, it's not too far for the pinky... but it does demand that my hand leaves the neutral position a bit;just do it
2816;Jun 11, 2019 8:03:23 am;Jun 11, 2019 8:29:16 am;Complete;;;English;https://feedly.com/i/subscription/feed%2Fhttp%3A%2F%2Fhacks.mozilla.org%2Ffeed%2F;1560265403_5cffc2bb6cf656.09803398;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;70;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;;variant 3;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;pound(cutCabbage);57;;;;Line 5;Remove the semicolon;48;;;;;;;;;;;;;;;;;;;;;;;;;;2;;;;;;;107;"const kimchi = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;Nested ternaries. My linter would block this code :D;;;;;;;;;The proposal;;Both characters are pretty common, so pretty much came from muscle memory. Two characters is a little bit longish and they are far apart (at least on my keyboard);
2824;Jun 11, 2019 10:18:49 am;Jun 11, 2019 10:55:23 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560273529_5cffe2798ea4b6.73599644;;;flattened vs both;more than 10 years;Advanced;JavaScript;;95;"""number""";"""function""";;;"y => add(10, y);";;variant 4;variant 5;;variant 1;;;;Other - Write In (Required);almost never - i develop mostly with jquery/bootstrap frontend, and custom es5 tools for backend;;I like the status quo better;;;;;;;;;;;Line 6;correct spelling-error: saltCabbageJar -> saltyCabbageJar;140;;;;;;;;;;;;;;;;;;;Line 5;not sure, its confusing which # is the bug (i'm guessing its the first);534;;;;;;;;;;;;;;;;;;Line 5;i don't know.  guessing line 5 b/c its only place that explicitly instantiates Jar.  error could also be lines 6 or 7 (implicit instantiation inside salt() and ferment();388;;;;641;"const kimchi = ""cabbage"" |> wash(#) |> cut(#) |> salt(#) |> new Jar(#) |> add(""spicy paste"", #) |> stir(#) |> ferment(#, 2) |> await # |> #.takeOne();  // honestly the the status-quo would be easier to read/debug: var result; result = wash(""cabbage""); result = cut(result); result = salt(result); result = new Jar(result); result = add(""spicy paste"", result); result = stir(result); result = await ferment(result, 2); result = result.takeOne(); const kimchi = result;";;;;;;;;;;;;;;;Current status quo;;;;typing it was actually pleasant and made me feel cool (like using an hp rpn calculator).;"unfortunately, ""coolness"" does not cut it in industrial usage of javascript, where readability and ease-of-debugging are more pressing painpoints."
2825;Jun 11, 2019 10:32:59 am;Jun 11, 2019 11:14:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560274379_5cffe5cb830834.76222110;;;nested vs proposal 2;more than 10 years;Advanced;Other - Write In (Required);ABAP;399;number;"""function""";"add.bind(null, 10);";;;;;variant 2;variant 1;;;;;Every now and then;;;;I like the proposal better;Line 1;Add numdays to ferment function;177;;;;;;;;;;;;;;;;;;;Line 5;"remove "";""";269;;;;;;;;;;;;;;;;;;;;Line 5;;;;;;4;;;;;;;283;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;Re-reading lines to resolve if statements;;;;;;;;;The proposal;;easy;
2826;Jun 11, 2019 10:41:20 am;Jun 11, 2019 1:01:17 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560274880_5cffe7c0b1aa62.70468416;;;nested vs both;5-10 years;Intermediate;JavaScript;;256;number;"""function""";;;"y => add(10, y);";;variant 4;variant 3;variant 1;;;;;Rarely;;;I like the pipeline with the # better;;Line 10;Insert a 'numdays' argument in ferment function;6975;;;;;;;;;;;;;;;;;;;;;;Line 5;Pass a argument to Jar constructor;154;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Pass a argument to Jar constructor;86;;;;555;"const kimchiJar = ""cucumber""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#,2)  |> await #  |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Not very easy;Can replace '|>' by '>>' ? 
2829;Jun 11, 2019 11:30:14 am;Jun 11, 2019 12:15:23 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560277814_5cfff336133c96.25437321;;;nested vs proposal 2;more than 10 years;Expert;JavaScript;;48;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 4;variant 2;;;;;Rarely;;;;I like the status quo better;;;;Line 1;add await;97;;;;;;;;;;;;;;;;;;;;;;Line 8;ferment(14);69;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;use shorthand arrow;1397;;;;;;;229;"const jar = new Jar(""cabbage"" |> cut |> salt) const kichiJar = await (add(""spicy paste"", jar) |> stir |> ferment); const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;"1. realising in line 6 that the RHS of the |> operator can be an arbitrary expression, not a function - it's unclear how await can be evaluated then 2. jumping back to line 5 to check back on what the argument was that gets passed as # to fetch 3. scanning the nested ternary expression - which is fine due to the proper indentation, although I had expected lines 9 and 10 to merge 4. being confused by the pipeline operator in the arrow function. That IIFE seems to be called without an argument to be destructured. Checking again whether is mis-parsed something.  When being asked about the result, going to evaluate the predicate in line 8. Checking back to line 1-3 for the constant values. Being uncertain why the ""#.joghurt && #.joghurt.ready &&"" part is duplicated, should've been simplified. Checking again whether I mis-parsed the nesting, but being assured by ""throws an error"" not being an answer choice on the question :-) Then shortly wondering about lines 8 and 9, how # and # refer to different things.";;;;;;;;;The Status quo;;| and > are both weird to reach on german keyboards, but I'm accustomed to operators being slow to type;"It's unclear when the ""operands"" of the operator are evaluated - usually one would expect them to be evaluated before the operation itself, but with # this is getting really weird. For plain function chains, a pipeline operator would be fine, but that tiny # placeholder changes semantics a lot, leading to really unclear code when mixed with functions"
2833;Jun 11, 2019 12:39:54 pm;Jun 11, 2019 1:04:44 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560281994_5d00038a0b5e19.17370994;;;flattened vs both;5-10 years;Advanced;JavaScript;;170;number;"""function""";;;"y => add(10, y);";;variant 3;variant 4;;variant 1;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;fix the typo;123;;;;;;;;;;;;;;;;Line 8;pass number of days to ferment;97;;;;;;;;;;;;;;Line 5;;;;;"put a call to ""add""";102;;;;;;;536;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> add{""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Other - Write In (Required);I'm comfortable with the status quo, but I could get used to either of the new proposals. Probably # moreso;;;Ok. But since I'm not used to it, it was slightly awkward an error-prone.;
2835;Jun 11, 2019 1:16:17 pm;Jun 11, 2019 1:38:30 pm;Complete;;;English;;1560284177_5d000c11294607.11897353;;;flattened vs proposal 1;more than 10 years;Intermediate;Other - Write In (Required);Swift;97;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;;variant 3;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> new Jar(_);595;;;;204;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(_) |> add(""spicy paste"", _) |> stir |> ferment(_, 2) |> await |> (x => x.takeOne())";a bowl of jogurt with berries;too many if statements;;Breakfast, snacktime, and lunch can change the behavior of this function from far away. Also, its cyclomatic complexity is pretty high.;;;;;;;;;;;;;The proposal;;"It's fine. Thinking time is more important than typing time anyway ;)";
2837;Jun 11, 2019 1:22:04 pm;Jun 11, 2019 1:42:05 pm;Complete;;;English;;1560284524_5d000d6c345140.55610069;;;flattened vs proposal 1;more than 10 years;Expert;JavaScript;;172;number;"""function""";;;"y => add(10, y);";;variant 3;;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;310;;;;;;;207;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => {new Jar(_)}   |> (_ => {add(""spicy paste"", _)}   |> stir   |> await   |> (_ => ferment(_, 2)";a bowl of jogurt with berries;whitespace formating;;;;;;;;;;;;;;;The proposal;;similar to typing the =>;
2838;Jun 11, 2019 1:29:13 pm;Jun 11, 2019 2:40:30 pm;Complete;;;English;;1560284953_5d000f196020a8.89800612;;;flattened vs proposal 1;more than 10 years;Advanced;TypeScript;;3496;number;"""function""";;;"y => add(10, y);";;variant 3;;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"change ""saltCabbageJar"" to ""saltyCabbageJar""";102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;;;;return jar;99;;;;;;;263;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _) |> stir |> (_ => ferment(_, 2) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;nested pipelines;;The nested pipeline made me stop and make sure what was going on;;;;;;;;;;;;;The proposal;;Gets easier over time. }>, }?, |>, |>, etc;
2841;Jun 11, 2019 2:28:04 pm;Jun 11, 2019 2:53:37 pm;Complete;;;English;;1560288483_5d001ce3d51ba8.38998388;;;flattened vs both;5-10 years;Advanced;JavaScript;;194;number;"""function""";;;"y => add(10, y);";;variant 4;variant 3;;variant 2;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;;;;Line 4;swap lines 4 & 5;139;;;;;;;;;;Line 5;new Jar(#);183;;;;;;;;;;;;;;;;;;;;;;;;Line 5;new Jar(_);39;;;;349;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;awkward at first, but you get used to keeping the shift key down fairly quickly.;
2842;Jun 11, 2019 2:37:59 pm;Jun 11, 2019 3:11:29 pm;Complete;;;English;https://getpocket.com/;1560289079_5d001f37318705.49929222;;;flattened vs proposal 1;5-10 years;Expert;JavaScript;;135;Function;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 6;await;125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 2));143;464;"const kimchi = wash(""cabbage"") |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ferment |> await |> (_ => _.takeOne() ";a bowl of jogurt with berries;too many if statements;;The if and the conditions with || and && make me pause to ensure I get the priority of the operators right, and backtrack to check the values of the booleans;;;;;;;;;;;;;The proposal;;Not easy but I filled the survey on a phone, I think that on a keyboard I wouldn't even think about it, I already frequently reach for those symbols;I find the operator readable, but would rather take a native pipe function. I think the difference in readability wouldn't be that impactful, so for compatibility I'd favor a polyfill-able solution over a transpilable one.
2843;Jun 11, 2019 3:39:05 pm;Jun 11, 2019 4:16:29 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560292745_5d002d894dafa8.85277066;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;172;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";145;;;;;;;Line 5;|> new Jar(#);99;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;;;;;;;;;311;"const kimchiJar = wash(""cabbage"")   |> cut(#)   |> salt(#)   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir(#)   |> ferment(#, 2)   |> await #";;;;;a bowl of jogurt with berries;nested pipelines;;`fillBowl` was not defined anywhere, which made me look around for it for a sec.;;;;;;;;;The proposal;;"It was only slightly awkward; I think it will be easy to get used to.";Some images did not load in Chrome 74.0.3729.169. I opened dev tools to open the images in a separate tab.
2848;Jun 11, 2019 7:54:34 pm;Jun 11, 2019 8:13:08 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560308074_5d00696a141b69.51241634;;;flattened vs proposal 2;3-5 years;Advanced;TypeScript;;90;number;"""function""";;;"y => add(10, y);";;;variant 5;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 6;Use await;75;;;;;;;;;;;;;;;;Line 7;salt;253;;;;;;;;;;;;;;;;;10;;;;;;;162;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> takeOne;;;;;a bowl of jogurt with berries;density of operators;;Long conditionals (e.g. line 8), nested ternary operators;;;;;;;;;Other - Write In (Required);Really depends on the use case - I'd personally mix the two ways in different situations;Needs getting used to;
2852;Jun 11, 2019 11:29:27 pm;Jun 11, 2019 11:55:37 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560320967_5d009bc7cce830.86098520;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;125;3;"""function""";;;"y => add(10, y);";;;variant 2;variant 3;;;;;Rarely;;;;I like the proposal better;;;;;;;Line 3;Add '(' to the end of line 3;110;;;;;;;;;;;;;Line 5;"Remove ';' from line 5";58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;442;"const kimchi  = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne();";;;;;a bowl of jogurt with berries;identifiers;;The density of the operators where hard to read, nested ternary operators are always hard to keep in order. But even harder where the identifiers, especially when you don't have a way to decomposite after awaiting the json. It would have been easier if it would be possible to get rid of the top identifier (the '#' in this case) in this example.;;;;;;;;;The proposal;;On german keyboards writing '|>' is a little awkard I would prefer '->' or just '|' (I know that this is already reserved, but still would be easier :) );
2856;Jun 12, 2019 1:42:30 am;Jun 12, 2019 2:01:39 am;Complete;;;English;https://qsurvey.mozilla.com/;1560328950_5d00baf610b852.46902918;;;nested vs both;3-5 years;Intermediate;Other - Write In (Required);PHP;101;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 3;variant 4;variant 2;;;;;Every now and then;;;I like the streamlined pipeline proposal better;;;;;Line 1;add await before ferment(...);403;;;;;;;;;;;;;;;;;;;;;;Line 8;replace line with `|> ferment(#, 10)` (or some other number instead of 10);75;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;remove {..} braces;196;;;;;;;202;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> s => new Jar(s) |> jar => add(""spicy paste"", jar) |> stir |> jar => ferment(jar, 2) |> await;  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline;;;;;
2857;Jun 12, 2019 2:03:10 am;Jun 12, 2019 2:38:57 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1560330190_5d00bfce4b2eb3.05900987;;;flattened vs proposal 1;more than 10 years;Intermediate;JavaScript;;14;number;"""function""";"add.bind(null, 10);";;;;variant 4;;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));57;;;;284;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> await   |> (_ => ferment(_, 2))   |> (_ => _.takeOne());";a bowl of jogurt with berries;density of operators;;Piping the URL to fetch was unneccsasary.  I had to refer back to see what the URL was.  Using underscores for the piped argument is quite confusing.  It would make sense to have meaningful variable names instead of underscores.  The conditions were not written well and could have been abstracted to other functions and cleaned up a bit.  The nested pipelines where actually the easiest to read, although the second one's whitespace formatting was a bit confusing.;;;;;6;;;;;;;;The proposal;;Mostly simple.  Once or twice I typed \ instead of |, but other than that, no complaints.;
2863;Jun 12, 2019 4:23:18 am;Jun 12, 2019 4:48:25 am;Complete;;;English;;1560338598_5d00e0a65e1c22.75680188;;;flattened vs proposal 2;0-2 years;Advanced;JavaScript;;127;3;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;variant 3;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";263;;;;;;;;;;;;;Line 5;|> new Jar(#);75;;;;;;;;;;;;;;;;;;;;;;;11;;;;;;;227;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;The hardest part was the nested conditionals.  Would be easier if refactored so it was flatter and less nested.;;;;;;;;;The proposal;;"I'm not used to typing ""|"" so that was a little awkward and slow at first.  But that's something that will improve with practice, so I'm not bothered by it.";"I like the new proposal and the style of coding that it allows.  Nitpick: I find the ""#"" sign to be noisy and not so easy on the eyes.  I wonder if something else would work as a placeholder.  Perhaps ideally ""_"" if it were available, but anything less noisy, that doesn't stick out as much."
2869;Jun 12, 2019 6:53:08 am;Jun 12, 2019 6:55:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560347588_5d0103c43efc21.08766184;;;nested vs both;0-2 years;Beginner;JavaScript;;39;1;;;;;;variant 2;variant 4;variant 2;;;;;Often;;;;;;;;Line 1;;11;;;;;;;;;;;;;;;;;;;;;;Line 1;;8;;;;;;;Line 1;;7;;;;;;;;;;;;;;;;;;9;;;;;;;;;;;;;;;;;;;;;
2871;Jun 12, 2019 7:19:24 am;Jun 12, 2019 7:33:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560349164_5d0109eca7b843.38190172;;;nested vs proposal 2;more than 10 years;Expert;TypeScript;;158;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;variant 3;variant 3;;;;;Rarely;;;;I like the status quo better;;;;;;;Line 3;new Jar(;128;;;;;;;;;;;;;;;;Line 5;new Jar (#);49;;;;;;;;;;;;;;;;;Line 5;;;;;;;;;;;;;73;;;;;;a bowl of jogurt with berries;inconsistent style;;;;;;;;;;;The Status quo;;;
2875;Jun 12, 2019 9:04:42 am;Jun 12, 2019 9:23:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560355482_5d01229a8f4721.04684314;;;nested vs proposal 1;0-2 years;Expert;JavaScript;;93;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;variant 2;;;;;Every now and then;;;;I like the proposal better;;;;Line 1;add await;168;;;;;;;;;;Line 3;omit the closing parens;104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));80;;;;173;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ferment |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);it is ok;it was ok;;;;;;;;;;;;;The proposal;;ok using a french keyboard;i have experience with haskell and elm so I may not be representative of a typical js dev
2876;Jun 12, 2019 9:37:58 am;Jun 12, 2019 10:10:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560357478_5d012a669dd214.60531353;;;nested vs proposal 1;3-5 years;Expert;JavaScript;;96;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;;variant 2;;;;;Other - Write In (Required);often, but typically with intermediate variables declared;;;I like the status quo better;;;;Line 1;"missing await before ferment; saurkrautJar is a promise instead of a jar";105;;;;;;;;;;Line 3;"""poundcutCabbage)"" should be ""pound(cutCabbage)""";124;;;;;;;;;;;;;;;;;;;Line 5;remove the semicolon that's terminating the statement early;87;;;;;;;;;;;;;;;;;;633;"// If the Jar -> Jar functions return the same Jar, I would refactor this // differently. There isn't enough information to tell which is the case, so I // have to assume they return new Jar instances. // // In real life, naming the interstitial values is rarely as awkward as in this // example, in my experience.  const washedCabbage = wash('cabbage'); const cutCabbage = cut(washedCabbage); const saltedCabbage = salt(cutCabbage); const jarOfPlainCabbage = new Jar(saltedCabbage); const jarOfSpicyCabbage = add('spicy paste', jarOfPlainCabbage); const stirredJarOfSpicyCabbage = stir(jarOfSpicyCabbage); const jarOfFermentedCabbage = await ferment(stirredJarOfSpicyCabbage, 2); const kimchi = jarOfFermentedCabbage.takeOne();";a bowl of jogurt with berries;identifiers;;"The overall density contributed, but the biggest issue was not (seemingly?) specific to the pipeline operator: the ""_"" identifiers. I assume these could have had meaningful names (url, response, and destructuring { jogurt, pickels }, respectively).";;;;;;;;;;;;;Other - Write In (Required);I'm unsure.;pretty normal;I'm generally a fan of the pipeline operator proposal. But less so after this survey!  When I've experimented with it before, I've used it to chain named functions which take a single argument. This is very useful to me since I do tend to write a lot of 'pipeline'-like code. But I find the inlined arrow functions used in the examples here very noisy and overweight. If the pipeline operator is going to lead to a lot of code like that, I'd rather it not exist at all to be honest.
2878;Jun 12, 2019 9:54:49 am;Jun 12, 2019 2:35:04 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560358489_5d012e59ab2ad4.98090550;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;130;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;;variant 3;;;;;Every now and then;;;;I like the status quo better;;;;;;;Line 3;insert (;6634;;;;;;;Line 3;insert (;39;;;;;;;;;;;;;;;;;;;Line 8;(_ => await _) appaently, but that's ugly and confusing;7123;;;;;;;;;;;;;;;;;;1012;;a bowl of jogurt with berries;inconsistent style;;I dislike the verbosity of |>, I'd prefer  something like  const {pickles={}, yogurt={}} = await fetch(...).then(r => r.json()) const result = do { if (pickes.ready) { ... } else if(..) {...} };;;;;;;;;;;;;The Status quo;;verbose;
2879;Jun 12, 2019 10:00:27 am;Jun 12, 2019 10:13:52 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560358827_5d012fabab6384.07273622;;;nested vs both;5-10 years;Intermediate;C++;;68;int;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;variant 2;variant 1;;;;;Often;;;I like the status quo better;;Line 2;Move it down one;83;;;;;;;;;;;;;;;;;;;Line 7;Move it up two;117;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;dunno;85;;;;163;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment (#,2)     |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Awkward. I use dvorak, but I suppose it would be about the same on qwerty.;This kind of code should not be encouraged. Deeply nested function calls like this should be peeled out and given names for readability's and maintainability's sake.
2883;Jun 12, 2019 11:31:00 am;Jun 12, 2019 11:41:13 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560364259_5d0144e3d4c588.30897130;;;flattened vs both;3-5 years;Intermediate;TypeScript;;79;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";variant 5;variant 5;;variant 2;;;;Rarely;;;I like the streamlined pipeline proposal better;;;;;;;;;;;;;;Line 6;await ferment(saltyCabbageJar, 14);78;;;;;;;;;;;;;;;;Line 7;salt;50;;;;;;;;;;;;;;;;;;;;;Line 7;await ferment(_, 2);54;176;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Current status quo;;;;Cumbersom;
2889;Jun 12, 2019 6:20:42 pm;Jun 12, 2019 6:38:45 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560388842_5d01a4eac8ea03.81024453;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;105;number;"""function""";;;"y => add(10, y);";;;variant 4;variant 2;;;;;Every now and then;;;;I like the status quo better;;;;Line 1;not sure;185;;;;;;;;;;;;;;;;;;;;;;Line 8;ferment(#,14);116;;;;;;;;;;;;;;;;;;Line 9;;;;;;;;;192;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;mostly tracing values to their origin and the amount of operators occuring in small space;;;;;;;;;The proposal;;Not bad;I would write the status quo across multiple lines declaring variables for each step, so in a way, it is similar to that.
2893;Jun 12, 2019 11:22:50 pm;Jun 12, 2019 11:46:55 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560406970_5d01ebbaa0cb50.35257539;;;nested vs proposal 1;5-10 years;Advanced;JavaScript;;93;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";variant 2;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 1;const sauerkrautJar = await ferment(;142;;;;;;;;;;;"const crushedCabbage = pound(cutCabbage);";68;;;;;;;;;;;;;;;;;;;Line 2;;146;;;;;;;;;;;;;;;;;;185;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _)   |> stir   |> (_ =>ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;identifiers;;"`_.` i'm very familiar with lodash so `_` kind of remind me of that library signature. So it slow me down when read `_.jogurt` or `_.pickles` as in my mind I'm associate those as a lodash function, not property of object `_` I believe you can write `|> (food => {` in line 10 and change the parameter name in scope to make it more clear.  `_.pickles |> fillPlate;` why not just `fillPlate(_.pickles)`  `} else if  ((_.jogurt && _.jogurt.ready && isBreakfast) || (_.jogurt && _.jogurt.ready && isSnakeTime)) {` the condition is too complicated and can be simplify `} else if  (_.jogurt && _.jogurt.ready && (isBreakfast || isSnakeTime)) {`";;;;;;;;;;;;;The proposal;;not every familiar as first;
2894;Jun 13, 2019 12:21:01 am;Jun 13, 2019 12:29:31 am;Complete;;;English;;1560410461_5d01f95dd1b624.12137634;;;flattened vs proposal 1;5-10 years;Advanced;TypeScript;;52;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 4;;154;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 14));47;116;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ferment |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;;;;;;;;;;;;;;The proposal;;like heaven. reminds me of f#;
2895;Jun 13, 2019 12:34:52 am;Jun 13, 2019 4:34:26 am;Complete;;;English;;1560411292_5d01fc9c2ed899.35906239;;;nested vs both;more than 10 years;Expert;JavaScript;;163;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;variant 5;variant 2;;;;;Rarely;;;I like the pipeline with the # better;;;;;Line 1; = await fermet(;4469;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;|> salt(#);435;;;;Line 8;|> await _;88;;;;;;;;;;;;;;;;;;4027;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;On a Swiss keyboard I probably would use Copy&Paste...;
2896;Jun 13, 2019 12:41:42 am;Jun 13, 2019 1:10:31 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560411702_5d01fe36303262.13210455;;;flattened vs proposal 2;0-2 years;Advanced;JavaScript;;191;'number';"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;variant 4;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;Correct spelling of variable;142;;;;;;;;;;;;;;;;Line 8;|> ferment (#, 14);120;;;;;;;;;;;;;;;;;Line 8;;;5;;;;;;;349;"const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar   |> add ('spicy paste', #)   |> stir   |> ferment (#, 2)   |> await #   |> #.takeOne ();";;;;;a bowl of jogurt with berries;Other - Write In (Required);await and the order of operations (e.g. await #.json());The order of operations with await and the property access was a little hard to parse without parentheses, and the nested ternaries would have been better replaced with a function call that encases several if statements at the same level.  The pipeline nesting did not bother me me much so much as the ternary nesting.;;;;;;;;;The proposal;;Rather ergonomic and enjoyable.  Didn't have to think about how to name variables I'll never reuse again, always a plus.;Really like the syntax and use of #. Reminds me of the Clojure (as-> ) macro.  I imagine it'd be a bit of a cognitive jump for people unfamiliar with unix pipes, but the hash placeholder symbol might help a lot with guiding new users on how the pipeline actually works, as they can explicitly see where the variable will be threaded through to in the pipeline.
2898;Jun 13, 2019 1:22:14 am;Jun 13, 2019 1:46:49 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560414134_5d0207b68cf136.55989674;;;nested vs proposal 2;0-2 years;Beginner;Other - Write In (Required);PHP;126;number;"""object""";"add.bind(null, 10);";;;"add.apply(null, [10]);";;variant 2;variant 2;;;;;Often;;;;I like the proposal better;;;;;;133;;;;;;;;;;;;;;;;Line 9;;162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;348;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;Too many ternary conditions.;;;;;;;;;Other - Write In (Required);I like both. I thing the status quo can be more readable with new lines between each parameter. Bu tthe proposal is good, simple to read and write.;;Missing # in some line like the 2nd line( |> wash) is weird. We could think this function don't need parameter.
2900;Jun 13, 2019 2:00:36 am;Jun 13, 2019 2:27:05 am;Complete;;;English;https://tamtamy.reply.com/tamtamy/permalink/do-your-part-on-ecmascript-specification.action?recommended=true;1560416436_5d0210b4a92e96.53198554;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;282;string;"""error""";;;;"add.apply(null, [10]);";variant 4;;variant 1;;;;;Every now and then;;;;I like the proposal better;Line 12;"const sauerkraut = sauerkrautJar.takeOne(3);";558;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;84;;;;316;;null;density of operators;;;;;;;;;;;;;;;The proposal;;;
2907;Jun 13, 2019 3:49:01 am;Jun 13, 2019 4:09:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560422941_5d022a1d958809.35221127;;;flattened vs proposal 1;0-2 years;Intermediate;JavaScript;;103;number;"""function""";;;"y => add(10, y);";;variant 2;;;variant 3;;;;Rarely;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3; = pound(cutCabbage);127;;;;;;;;;;;;;;;;;;;Line 6;"remove ;";128;;;;;;;;;;;;;;;;;;116;please provide a sample that I can copy/paste the code otherwise I don't want to spend time typing;a bowl of jogurt with berries;inconsistent style;;i have to keep track of whether there's a semicolon at the end of the line. this is annoying since in JS \n is OK;;;;;;;;;;;;;The Status quo;;meh...;i don't like usage of underscore, it's confusing should be more like: cubumber |> wash |> new Jar() |> add('water') but the worse is that now I have to read from left to right in current way, it's from right to left, e.g.: wash(new Jar(add(cucumber, 'water))) if there's a mixture of that syntax in a project then I need to switch all the time and this is how I'll make mistakes in a code
2909;Jun 13, 2019 4:58:58 am;Jun 13, 2019 5:12:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560427138_5d023a82b8f8d6.37640067;;;flattened vs proposal 2;more than 10 years;Intermediate;Other - Write In (Required);C#;123;number;"""function""";;;"y => add(10, y);";;;variant 2;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"Insert missing ""("" to get pount(cutCabbage)";109;;;;Line 5;remove the semicolon;40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;236;"// TODO: get a textarea that knows about code! const kimchi = cabbage     |> wash     |> cut     |> salt // TODO See F# et all, pipeline operate should take its left hand argument and make it the last arcgument of the curried right hand side: no need for magic ""#"" placeholder.     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> await ferment(#, 2)";;;;;null;Other - Write In (Required);lack of abstraction (eg. putting conditions into helper functions with good naming). Plus nested conditional expressions;Mixing details of representation with the overall flow.;;;;;;;;;The proposal;;Fine;Would be better without the need for a placeholder. Currying and partial application means F# (et al) have a pipeline without the need for a placeholder.
2910;Jun 13, 2019 5:18:49 am;Jun 13, 2019 6:07:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560428329_5d023f293b71f6.90832542;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;144;3;"""function""";;;"y => add(10, y);";;variant 2;;;variant 1;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;"change ""saltCabbageJar"" to ""saltyCabbageJar""";259;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"remove "";"" on line 5 add "";"" at the end of line 9";265;;;;;;;;;;;;;;;;;;532;"const kimchijar = ""cabbage""      |> wash      |> cut      |> salt      |> (_=> new Jar(_))      |> (_ => add(""spicy paste"", _))      |> stir      |> (_ => ferment(_, 2))      |> await;";a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;;The proposal;;fine ;
2912;Jun 13, 2019 7:01:24 am;Jun 13, 2019 7:29:18 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1560434484_5d025734733949.61800463;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;316;number;"""function""";;"add.call(null, 10);";;;variant 2;;;variant 1;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 5;"const saltCabbageJar = salt(cabbageJar);";141;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;"|> (_=> new jar(_));";62;;;;;;;;;;;;;;;;;;332;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ = > new Jar(_)) |> (_=>add(""spicy paste"", _)) |> stir |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;nested pipelines;;;;;;;294;;;;;;;;The Status quo;;Nice, but I still thing it damages code reusability more that it adds an advantage.  While clean for short statements, it becomes too difficult to read too fast.;
2921;Jun 13, 2019 10:20:04 am;Jun 13, 2019 10:47:48 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=quora&utm_medium=referral;1560446404_5d0285c4b48df4.37312024;;;flattened vs both;0-2 years;Advanced;Other - Write In (Required);I spend most of my time programming in ES6 JavaScript, PHP7, and MySQL, though I also dabble in Bash.;234;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";variant 4;variant 4;;variant 3;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;;;;;;;Line 3;"I would place ""poundcutCabbage"" as an argument in the ""crush"" function like so: const crushedCabbage = crush(poundcutCabbage);";181;;;;;;;;;;Line 8;"I would pass the # placeholder as the first argument and the number of days to ferment as the second to the ferment function like so: ferment(#, 2);";304;;;;;;;;;;;;;;;;;;;;;Line 5;"Pass the # placeholder as the argument to the Jar class like so: |> new Jar(#);";69;;;;403;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add('spicy paste', #)     |> stir     |> await ferment(#, 2)     |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;;
2922;Jun 13, 2019 10:24:18 am;Jun 13, 2019 11:43:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560446657_5d0286c1dc2499.48183416;;;flattened vs proposal 2;3-5 years;Intermediate;JavaScript;;113;3;"""function""";;;"y => add(10, y);";;;variant 2;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"correct the intended function invocation `pound(cutCabbage);`";3447;;;;Line 2;check babel plug-ins;220;;;;;;;;;;;;;;;;Line 1;;;;;;;;;;6;;;;;;;395;"wait... kimchiJar is being assigned the result of a promised Jar not a function, but the instructions say refactor the function: am I supposed to refactor kimchiJar or kimchiJar.takeOne(); (which isn't written anywhere)?";;;;;a bowl of jogurt with berries;too many if statements;;I found myself re-reading line 8 and the comment on line 7 to make sure I was getting the result of the conditonals correct in my head. Everything else was easy enough to follow;;;;;;;;;The proposal;;I didn't type `|>`, okay fine I just did. I'm a touch typist but often have to look for special characters so I think using the pipe operator will take some time getting used to but I should probably work on my typing skills anyway...;nope
2924;Jun 13, 2019 10:12:52 am;Jun 13, 2019 11:37:05 am;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1560445972_5d0284141af704.32084777;;;flattened vs proposal 2;5-10 years;Intermediate;JavaScript;;48;;"""function""";;;"y => add(10, y);";;;variant 2;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;pound(cutCabbage);73;;;;Line 9;await ferment(#, 2);133;;;;;;;;;;;;;;;;;;;;;;;;Line 9;;;;;;;;;145;"const kimchijar = ""cabbage"" |> wash |> cut |> salt |> new Jar (#) |> add(""spicy sauce"", #) |> stir(#) |> await ferment(#, 2)";;;;;a bowl of jogurt with berries;density of operators;;have to go back and forth between if statement, see which result were suggested, looking at the const to analyze each value, and guess what was the possible path;;;;;;;;;The Status quo;;typing was fine, except in a navigator, where using a tab interact with the navigation in the browser. ;
2925;Jun 13, 2019 11:40:39 am;Jun 13, 2019 11:43:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560451238_5d0298a6f11840.85080897;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;5;;;;;;;variant 2;;;variant 1;;;;;;;;;;;;;;;;;;;;18;;;;;;;;;;;;;;;;;;;;;;;;;;;36;;;;;;;;;;;;;;;;;;7;;;;;;;;;;;;;;;;;;;;;
2928;Jun 13, 2019 4:47:05 pm;Jun 13, 2019 5:06:08 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560469625_5d02e079509af6.69213656;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;133;number;"""function""";;;"y => add(10, y);";;;variant 5;variant 3;;;;;Every now and then;;;;I like the proposal better;;;;;;;Line 3;new Jar(;100;;;;;;;;;;;;;;;;;;;;;;Line 7;|>salt;89;;;;;;;;;;;;;;;;;7;;;;;;;316;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;I found it straightforward to proceed through, but the ternary operators were a little heavy.;;;;;;;;;The proposal;;It's OK. The |> is a bit out of the normal typing position, but in the style used here, it's used as the beginning of a conceptual phase, so a brief moment of thought is acceptable. It's also easy to type while holding SHIFT, which makes it very quick.;
2940;Jun 14, 2019 2:42:09 am;Jun 14, 2019 3:02:40 am;Complete;;;English;;1560505329_5d036bf14df939.48273480;;;nested vs proposal 1;3-5 years;Intermediate;TypeScript;;11;3;"""function""";;;"y => add(10, y);";;variant 2;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 1;const sauerkrautJar = await ferment(;243;;;;;;;;;;Line 3;"pound(cutCabbage);";33;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));170;;;;;;;;;;;;;;;;;;301;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> ferment |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);conditions;;;;;;;;;;;;;;The proposal;;It's easy to type.;
2944;Jun 14, 2019 4:40:42 am;Jun 14, 2019 5:21:51 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560512442_5d0387ba676129.49107518;;;nested vs proposal 2;5-10 years;Intermediate;JavaScript;;88;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;variant 3;variant 3;;;;;Often;;;;I like the proposal better;;;;;;;Line 3;new Jar (;139;;;;;;;;;;;;;;;;Line 5;new Jar (#);466;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;337;"const veg = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await     |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;nothing except the ternary operators;;;;;;;;;The proposal;;Just like arrow functions;Yeah, just wondering if visual studio code can provide some sort of type inference. Having said that I like what I see
2947;Jun 14, 2019 5:52:24 am;Jun 14, 2019 6:07:31 am;Complete;;;English;;1560516744_5d039888bdb738.36857853;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;8;3;"""function""";;;"y => add(10, y);";;;variant 2;;variant 3;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;pound(cutcabbage);36;;;;Line 5;|> new Jar(#);309;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;196;"consr kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add (""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;jumping back and forth reading booleans;95;;;;;;;;The proposal;;not great on an azerty keyboard but worth it;
2952;Jun 14, 2019 7:01:49 am;Jun 14, 2019 7:46:42 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560520908_5d03a8cce02fa9.17582790;;;nested vs proposal 1;more than 10 years;Advanced;TypeScript;;196;function;"""function""";;;"y => add(10, y);";;variant 3;;variant 3;;;;;Other - Write In (Required);"I don't like such expressions since they are hard to debug (set breakpoint). I prefer it like `const res1 = func1();. const res2 = func2(res1);` What if on step 2 something goes wrong?";;;I like the status quo better;;;;;;;Line 3;"const washedCab = wash(""cabbage""); const cutCab = cut(washedCab); and so on";269;;;;;;;Line 3;"-> pound(cutCabbage);";120;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;;;;(_ => { add(_, new Jar(_)) };380;;;;;;;339;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_=> new Jar(_))   |> (_=> add(""spicy paste"", _)   |> stir   |> (_=> ferment(_, 2))   |> await   |> (_=> _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);"Collision with lodash lib (_.clone). For me it would be easy to read if ""x"" is used as argument";"I get used to 'lodash' library. All its operations look like _.clone, _.findFirst, _.throttle, _.debounce and etc. This library is quite popular lib. https://www.npmjs.com/package/lodash I get confused with ""_"" variable name. I suggest using different suggested var name, e.g. ""x"". ""x"" is a general name for function arg, e.g. f(x).";;;;;;;;;;;;;The proposal;;I think I can get used to it;"Suggest using other argument name, other than ""_"" since there is a collision with highly popular lodash library."
2953;Jun 14, 2019 8:59:46 am;Jun 14, 2019 9:27:43 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560527986_5d03c4725f5e61.76407898;;;flattened vs proposal 2;0-2 years;Advanced;JavaScript;;183;"""string""";"""function""";;;"y => add(10, y);";;;variant 5;;variant 1;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 5;;726;;;;;;;;;;;;;;;;;;;Line 7;salt;141;;;;;;;;;;;;;;;;;;;;;;;;221;"const kim = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(#, ""spicy paste"")  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;;
2954;Jun 14, 2019 9:23:59 am;Jun 14, 2019 9:40:19 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560529438_5d03ca1ef37ba5.09722714;;;nested vs proposal 1;5-10 years;Expert;TypeScript;;46;'number';"""function""";;;"y => add(10, y);";;variant 5;;variant 1;;;;;Rarely;;;;I like the proposal better;Line 10;), 2;100;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;|> (_ => ferment(_, 2));49;189;"const kimchi = 'cabbage'  |> wash  |> cut  |> salt  |> (saltedCutCabbage => new Jar(saltedCutCabbage))  |> (jar => add('spicy paste', jar))  |> stir  |> (jar => ferment(jar, 2))  |> await  |> (jar => jar.takeOne())  ;";a bowl of jogurt with berries;Other - Write In (Required);We need the freaking elivs operator. Also would be nice to have some pattern matching in the language.;"Had to slow down to see what the state was of breakfast, lunch, etc.  It was actually pretty easy to see that you were going to fill the bowl with jogurt and add berries, that was easy.  The worst part of the code was the ""if (pickles && pickles.ready && isLunch)"" etc. If we had the null coalescing operator, it could have been ""if (pickles?.ready && isLunch)"" and then it would have been much more readable. ";;;;;;;;;;;;;The proposal;;Actually pretty good, now that I've tried it a few times.  Really no different than =>, I'm sure it'll become muscle memory over time.;Can you get this expedited? I've seen versions of the pipeline operator that are really complex, have placeholders and all this other stuff. What I saw here was perfect, a great base upon which to build.  I just don't want to have to wait until 2021 to start using it.
2955;Jun 14, 2019 9:25:41 am;Jun 14, 2019 9:55:08 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560529541_5d03ca85230e57.66898809;;;nested vs proposal 2;0-2 years;Intermediate;Java;;142;Integer;"""function""";;;"y => add(10, y);";;;variant 2;variant 1;;;;;Often;;;;I like the proposal better;;;75;;;;;;;;;;;;;;;;;;;;;31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;39;;;;;;;;;;;;;;;;;;;;;
2957;Jun 14, 2019 11:53:49 am;Jun 14, 2019 1:09:06 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560538429_5d03ed3d022d34.50427412;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;326;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;variant 1;;;;;Rarely;;;;I like the proposal better;Line 10;), 14;195;;;;;;;;;;;;;;;;;;;;;;Line 5;new Jar(#);88;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;585;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne()";;;;;;inconsistent style;;The complex boolean condition on line 8 took extra attention to parse, especially since it leads into nested ternaries. Line 10 isn't an idea way to write this code in my opinion but I could understand it pretty easily. Line 12 is probably the hardest to understand of the entire piece of code because of how many different operators there are, especially with the combined IIFE/new syntax;;;;;;;;;The proposal;;Fine, I didn't feel particularly bothered typing it.;This was a really cool format for a survey! It was pretty fun to take.
2961;Jun 14, 2019 2:40:52 pm;Jun 14, 2019 3:11:14 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560548452_5d041464cbc4f9.64930730;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;138;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";variant 5;;variant 1;;;;;Every now and then;;;;I like the proposal better;Line 11;", 14);";219;;;;;;;;;;;;;Line 3;"pound(cutCabbage);";127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 14));132;236;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> (_ => new Jar(_))  |> (_ => add(""spicy paste"", _))  |> stir  |> (_ => ferment(_, 2))  |> await  |> (_ => _.takeOne())";a bowl of jogurt with berries;too many if statements;;;;;;;19;;;;;;;;The proposal;;Easy.;
2967;Jun 15, 2019 3:05:29 am;Jun 15, 2019 3:32:45 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560593129_5d04c2e99456a4.75930148;;;flattened vs proposal 1;3-5 years;Advanced;JavaScript;;129;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";variant 5;;;variant 3;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;|> (_ => ferment(_, 14));85;282;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_=> add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne())";a bowl of jogurt with berries;density of operators;;1) overuse of _ variable name, hard to grasp what it stands for at any given moment 2) The check for _.jogurt etc. is clunky and can be rewritten with less redundancy 3) inconsistent spacing and line feeds;;;;;;;;;;;;;The proposal;;I don't use pipe symbol very often, so it took me a bit to find it on the keyboard :) other than that, no problems;"At first I was like ""this syntax is weird and has nothing on the status quo"", but having read through the proposal examples and having typed it a few times myself, I do believe the new syntax (after the initial confusion dissipates) might be easier and hence quicker to make sense of"
2969;Jun 15, 2019 4:26:14 am;Jun 15, 2019 4:54:20 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560597974_5d04d5d69802f6.15352822;;;flattened vs proposal 1;more than 10 years;Advanced;JavaScript;;254;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;;variant 3;;;;Rarely;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;pound(cutCabbage);137;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));265;;;;285;"const cabbageJar = new Jar(salt(cut(wash(""cabbage"")))); const spicyCabbageJar = add(""spicy paste"", cabbageJar); const kimchi = await ferment(stir(spicyCabbageJar), 2); const kimchiServing = kimchi.takeOne();";a bowl of jogurt with berries;Other - Write In (Required);await breaks the reading flow, the pipelines are reversing the way we read parameters so far;My memory, but not a lot more...;;;;;;;;;;;;;The Status quo;;I did not type it, this question is unclear.;This proposal makes things go backwards, not sure I like it, it is not very intuitive.
2971;Jun 15, 2019 11:09:31 am;Jun 15, 2019 4:44:05 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560622171_5d05345b25efe9.81907421;;;nested vs proposal 2;5-10 years;Expert;JavaScript;;85;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;variant 1;;;;;Often;;;;I like the proposal better;Line 10;pass 14 (2 weeks) as the 2nd argument to ferment;288;;;;;;;;;;;;;;;;;;;;;;Line 5;# => new Jar(#);19116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;220;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await #    const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;;
2973;Jun 15, 2019 3:34:37 pm;Jun 15, 2019 4:13:58 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560638077_5d05727d9d9d34.13114355;;;flattened vs proposal 1;more than 10 years;Advanced;Ruby;;140;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;;variant 3;;;;Other - Write In (Required);varies by task, library, and languages. often in F#, rarely in low c++, every so often in java web dev;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;add ( after pound token;64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 2));58;322;"const kimchi =      ""cabbage"" |>     wash |>     cut |>      salt |>     x => new Jar(x) |>     add.bind(null, ""spicy paste"") |>     stir |>      x => ferment(x, 2) |>     await |>     x => x.takeOne();";a bowl of jogurt with berries;identifiers;;"The await on 7 threw me off at first, as I was thinking it was all promises first, why not just chain with then (under the hood) instead of excess awaits.  I next was confused at the naming as I usually see _ as a ""don't care variable"", so had to see which and what it was actually being used for here. Once on the ifs, I kept reading the first bit then realizing I didn't need to worry about it as it didn't apply because of the (double-checked) variables at the top. Finally, the return types of the fillBowl and add() methods initially confused me until I saw the variable names and the multiple-choice answers.";;;;;;;;;;;;;The proposal;;Not bad, I seem to type it: [Rshift:down with Rthumb] [|:press with middle finger] [Rshift:up] [Rshift:down with Rpinky] [>: press with index finger][Rshift:up]  a few times hit |? by accident;"I like java's method references for constructors vs creating a lambda: ""cucumber"" |> wash |> Jar::new // java method ref syntax inserted, returns a new  Jar java usage: stream().map(Jar::new).collect(...);  Also, I thought the takeOne being a lambda was weird, and prefer ruby &:refs style for calling methods (vs functions): ... salt |>  x => ferment(x, 2) |> await |> &:takeOne # ruby method call syntax inserted, calls (x => x.takeOne()) ruby usage:  x.find_all(&:isValid)...   I would also appreciate haskell style currying, though bind does exist, it's a mouthful with the this pointer being arg 0 jar |> add([""water""]) | > salt  -- haskell-style implicit currying syntax inserted"
2974;Jun 15, 2019 5:01:06 pm;Jun 16, 2019 10:58:30 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560643266_5d0586c26e1419.80987300;;;nested vs proposal 2;0-2 years;Intermediate;JavaScript;;60375;number;"""function""";;;"y => add(10, y);";;;variant 2;variant 3;;;;;Often;;;;I like the proposal better;;;;;;;Line 3;new Jar (;196;;;;;;;;;;;;;Line 5;|> new Jar(#);187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2521;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #     |> #.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);what #.jogurt resolves to in line: 9 and what goes into the fillbowl. Is it {ready: true}?;after the line number 8 which resolves to true and when it came down then. I was trying to figure out what is going inside the fillBowl method maybe {ready: true} online 10 because line 9 will resolves to true. If we just look at line number 11 and after that destructing wine from # (i think) and then passing wine to fillGlass...;;;;;;;;;The proposal;;I think this is something what we should use, one because we won`t have any intuitive two chars left to be used together, secondly it`s been used (or considered) by many programming languages already, so yeah it`s nice.;"I believe it will take a little bit of time to warp around devs minds, because we were thinking in let`s say Top Down approach but this is more of a bottom up approach. For example, what we are trying to make in earlier examples it was a ""cumcumber"" then we build things on top of that. But I feel it may irritates some people in some scenarios like an excellent example (bad code one) where things will get tangled pretty quickly. So, we need to work on that as a community.  Thanks for all your efforts. You guys motivates all of us."
2976;Jun 15, 2019 7:39:07 pm;Jun 15, 2019 8:15:52 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560652747_5d05abcb8c3be0.43116049;;;nested vs proposal 2;0-2 years;Intermediate;Other - Write In (Required);C;96;number;"""function""";;;"y => add(10, y);";;;variant 3;variant 1;;;;;Often;;;;I like the status quo better;Line 11;",14);";266;;;;;;;;;;;;;;;;;;;;;;Line 5;new Jar();206;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;813;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;inconsistent style;;I followed the statements to the if statement and preformed short circuit analysis to determine the output. What slowed me down was inexperience with the new proposed syntax, the poor formatting, and keeping track of scope.;;;;;;;;;The proposal;;The '|' part of the operator is on the edge of the keyboard and requires the use of the shift key. Symbolically, the operator makes sense. Ergonomically, it is not ideal.;
2978;Jun 16, 2019 1:28:49 am;Jun 16, 2019 1:48:35 am;Complete;;;English;;1560673729_5d05fdc16e0158.81141241;;;flattened vs proposal 2;more than 10 years;Advanced;Java;;103;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;;variant 3;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;Add (;68;;;;Line 5;"Remove ;";122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;323;"... |> new Jar(#) |> add(""spicy paste"", #) |> stir ...";;;;;a bowl of jogurt with berries;too many if statements;;Searching where teritary operator begun and ended.;;;;;;;;;The proposal;;okay;I would prefer #> to reuse the same character than for the parameter.
2980;Jun 16, 2019 6:49:01 am;Jun 16, 2019 7:19:11 am;Complete;;;English;;1560692941_5d0648cd1957b0.82309871;;;flattened vs proposal 2;more than 10 years;Expert;Python;;184;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;;variant 3;;;;Often;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;FUUUU;141;;;;;;;Line 5;new Jar(#);118;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;208;"FUU, tl;dw";;;;;a bowl of jogurt with berries;Other - Write In (Required);non-optimal boolean expressions;boolean expressions;;;;;;;;;The Status quo;;Ugly.;Pipes are not needed for usual funcs. The good point of assigning the stuff to temporary variables is that I can easily add and remove code doing some actions useful only for debugging. For pipelines I will have to create a func for that, it is more cognitive load.  Though they are fine for dealing to async stuff inherentely requiring functions. So I suggest to reserve this syntax for async stuff instead of `then`.
2981;Jun 16, 2019 8:09:00 am;Jun 16, 2019 8:47:55 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560697739_5d065b8bee2066.91064755;;;nested vs proposal 2;5-10 years;Advanced;JavaScript;;99;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;variant 3;;;;;Rarely;;;;I like the proposal better;;;;;;;Line 3;add ( for new Jar;302;;;;;;;;;;;;;;;;;;;;;;Line 7;salt(#);89;;;;;;;;;;;;;;;;;;;;;;;;1062;I'm on mobile, so no code, but I'd take the _ approach, i like it more than #;;;;;a bowl of jogurt with berries;too many if statements;;groking l. no 17 with the wine function.   I'd refactor those logical operations  the pipeline is ok;;;;;;;;;The proposal;;like F# :) just a convention, ok;the sooner it gets to the language, the better. though your Lisp like code is hard to spot today. proper promise chaining solves the problem to a great extent
2982;Jun 16, 2019 8:28:40 am;Jun 16, 2019 9:29:40 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560698919_5d066027d51f14.86490189;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;92;number;"""function""";"add.bind(null, 10);";;;;;variant 3;;variant 3;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;add ( between 'd' and 'c';117;;;;;;;Line 5;add # to line 5;93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;250;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;Other - Write In (Required);conditional on 8;up to line 8 was quick and straightforward. The conditional on line 8 required me to double check isBreakfast state, and that the JSON from the fetch matched up with the properties being accessed. I got a little caught up on fillBowl not existing but then went with the gist of the code. I think the pipeline operators made this much easier. The ternaries were formatted very well!;;;;;;;;;The proposal;;not too bad, but I'd probably set a keyboard shortcut.;loved the survey. It's great as an instructive tool.
2989;Jun 16, 2019 3:37:13 pm;Jun 16, 2019 3:58:26 pm;Complete;;;English;;1560724633_5d06c4996a5056.82288089;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;85;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;variant 3;;;;;Rarely;;;;I like the status quo better;;;;;;;Line 3;Add an open parens, also split the over-large expression into multiple statements.;170;;;;;;;;;;;;;;;;;;;;;;Line 7;I guess it should be `salt` instead of `salt()` ?;149;;;;;;;;;;;;;;;;;;;;;;;;203;"const washedCabbage = wash('cabbage'); const cutCabbage = cut(x1); const saltCabbage = salt(x2); const saltedJar = new Jar(saltCabbage); const spicedJar = add('spicy paste', saltedJar); const stirredJar = stir(spicedJar); const kimchiJar = await ferment(stirredJar, 2);";;;;;a bowl of jogurt with berries;Other - Write In (Required);Overlarge statement, too many dependencies;The statement is too long. At various points I have to backtrack to remember what `#` means in this context.  It seems `#` is similar to Perl's `_`. It's a magic temporary variable that exists to avoid having to define explicit variables for intermediate state.  When this pattern comes up for me I don't see these intermediate variables as problematic. Having them written explicitly makes the code easier to follow and refactor.;;;;;;;;;Other - Write In (Required);Use multiple statements;meh. I'll probably get it a little confused with `>|` in bash, but I could get used to it if I needed.;For simple pipelines this is fine, but I don't believe it's worth it.  I believe using the existing language to write multiple statements with explicit intermediate variables is a better solution than either of the examples presented here.  Thanks for asking! :)
2994;Jun 16, 2019 11:58:39 pm;Jun 17, 2019 12:24:21 am;Complete;;;English;https://feedly.com/i/entry/dPA20yDKj7MHgyIRjOX2OOk1cb+5A4xCS8qqqclHcbY=_16b04208c9a:3c5da0:5de7e37;1560754719_5d073a1fb03779.91408202;;;flattened vs proposal 2;3-5 years;Intermediate;TypeScript;;203;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 4;;variant 1;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);359;;;;;;;;;;;;;;;;Line 8;|> ferment(#, 14);65;;;;;;;;;;;;;;;;;;;;;;;;;;;240;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;"The two ternary conditions were hard to read. The inconsistency between line 10 and line 12 was weird too. But the ""pipeline"" syntax wasn't really a problem for me in this exercise.";;;;;;;;;The proposal;;Not too hard on a French AZERTY Windows keyboard. It will be harder on a Mac keyboard though. ;Appreciated to be consulted on a proposal! The survey was interesting, good job!
2995;Jun 17, 2019 12:45:50 am;Jun 17, 2019 1:05:39 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560757550_5d07452e71b321.99413319;;;nested vs proposal 2;3-5 years;Advanced;Java;;107;Number;"""object""";;;"y => add(10, y);";;;variant 4;variant 1;;;;;Every now and then;;;;I like the proposal better;Line 11;), 0;117;;;;;;;;;;;;;;;;;;;;;;;;;Line 8;ferment(#, 0);82;;;;;;;;;;;;;;;;;;;;;;;;;;;349;"const kimchi = ""cabage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne();";;;;;a bowl of jogurt with berries;density of operators;;The 2 nested operators. At first I read it without checking the result, understanding the code, and this part made it harder to read which operand could return the null value at the end.;67;;;;;;;;The proposal;;;It would be simpler if we could omit the # if it's the only argument of a constructor.
3001;Jun 17, 2019 4:45:55 am;Jun 17, 2019 7:32:40 am;Complete;;;English;;1560771955_5d077d737ba5b5.01904753;;;nested vs proposal 1;0-2 years;Intermediate;JavaScript;;138;3;"""string""";;;"y => add(10, y);";;variant 3;;variant 1;;;;;Often;;;;I like the status quo better;Line 10;Add a comma and 2 (in weeks);252;;;;;;;;;;;;;Line 3;Put a '(' after 'pound';105;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;;;;Remove the curly braces;383;;;;;;;7668;"const kimchiJar = 'cucumber'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |>(_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);Really, I can't remember what this is called, the object passed into fetch as the second argument got me thinking...though I figured cors handling. Obvious ofc.;My process of reading the code is base off of my understanding of the proposal.  It was easy for me to grasp, though I think the chain method of writing is kind of more understandable to me.  This might be because the proposal method is still new to me though...in all, I didn't find the above code hard to read.  I might be wrong though...lol.;;;;;;;;;;;;;The proposal;;This is not easy at the moment though it might change with time...still strange.;Hmm. Nothing. Other than the fact that the proposal seem FAR MORE easy to read than the status quo after I have interacted with it through this survey.
3005;Jun 17, 2019 7:41:15 am;Jun 17, 2019 8:02:56 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=ESnextNews.com&utm_medium=Weekly+Newsletter&utm_campaign=2019-06-04;1560782475_5d07a68b520299.08840536;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;182;"""number""";"""function""";;;"y => add(10, y);";;;variant 2;;variant 3;;;;;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = (pundcutCabbage);";58;;;;Line 5;"remove ;";127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;276;"const kimchi = ""cucumber"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> #.takeOne;";;;;;a bowl of jogurt with berries;;;;;;;;;;;;The proposal;;Copy pasted it once I found the pipe symbol on the German Mac keyboard. But forgot to copy the space after it.;Can't we use the simple pipe symbol which is used everywhere else? Instead, modify the assignment operator, like |= or so. And please not the hash sign as placeholder symbol, it would be too overloaded these days.
3008;Jun 17, 2019 9:29:27 am;Jun 17, 2019 9:50:03 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560788967_5d07bfe7165fb3.58907716;;;flattened vs proposal 2;5-10 years;Advanced;JavaScript;;74;"""number""";"""function""";;;"y => add(10, y);";;;variant 4;;variant 1;;;;Rarely;;;;I like the status quo better;;;;;;;;;;Line 6;saltCabbageJar -> saltyCabbageJar;56;;;;;;;;;;;;;;;;Line 8;ferment((#, 2);45;;;;;;;;;;;;;;;;;;;;;;;;;;;245;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;;;;;;;;;;The Status quo;;Difficult. Often typed \> instead.;The committee should stop cherry-picking syntactic sugar from other languages and improve the std lib instead. This proposal seems completely unnecessary since it can already be achieved with existing syntax, and the status quo is more transparent.  While you're at it get rid of classes. They trick people into thinking they're doing traditional OOP and hide the fact that they're still using prototypal inheritance with all of its eccentricities.
3012;Jun 17, 2019 9:25:31 pm;Jun 17, 2019 9:40:35 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560831931_5d0867bb930107.43682781;;;nested vs proposal 1;3-5 years;Intermediate;JavaScript;;183;number;"""function""";;;"y => add(10, y);";;variant 4;;variant 1;;;;;Rarely;;;;I like the proposal better;Line 11;", 14);";69;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";75;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));39;;;;132;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;It wasn't too bad actually;;;;;;;;;;;;;The proposal;;okay;
3014;Jun 18, 2019 12:15:27 am;Jun 18, 2019 12:59:21 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560842127_5d088f8f6d5ce6.67749550;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;150;3;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;;variant 1;;;;;Often;;;;I like the proposal better;Line 10;), 14;206;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";166;;;;;;;;;;;;;;;;;;;Line 7;;580;;;;;;;;;;;;;;;;;;832;"const kimichi = 'cabbage'   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add('spicy paste', _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;;;;;;;;;;;;;;;;The proposal;;its nice;
3016;Jun 18, 2019 1:40:38 am;Jun 18, 2019 2:06:50 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1560847238_5d08a3860054d2.90652047;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;93;number;"""function""";"add.bind(null, 10);";;;;variant 3;;variant 2;;;;;Rarely;;;;I like the proposal better;;;;Line 1;Add an await;261;;;;;;;;;;Line 3;pound(cutCabbage);62;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;Remove brackets;58;;;;;;;246;"const kimchi = ""cabbage""      |> wash      |> cut      |> salt      |> (_ => new Jar(_))      |> (_ => add(""spicy paste"", _))      |> stir      |> (_ => ferment(_, 2))      |> await      |> (_ => _.takeOne());";a bowl of jogurt with berries;too many if statements;;The hardest part is of course inside the last function. Long if statements are hard to read, I had to search for `isLunch`, etc. props... Indentation on the nested pipeline was also hard to read, it should probably be aligned with `|>`;;;;;;;;;;;;;The proposal;;On AZERTY, it is not too hard (macOS & Windows). Definitely easier than templates quotes;
3021;Jun 18, 2019 5:20:57 am;Jun 18, 2019 6:36:34 am;Complete;;;English;;1560860457_5d08d7297cbd55.51733447;;;nested vs both;more than 10 years;Advanced;JavaScript;;2647;3;"""function""";;;"y => add(10, y);";;variant 2;variant 5;variant 1;;;;;Often;;;I like the status quo better;;Line 11;add the missing numdays argument;372;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 9;;90;;;;;;28;;;;;;;;;;;;;;;;;;96;;;;;;;;;;;;;;;;Current status quo;;;;;
3029;Jun 18, 2019 8:03:09 am;Jun 18, 2019 8:29:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/?utm_source=dev-newsletter&utm_medium=email&utm_campaign=may30-2019&utm_content=javascript;1560870189_5d08fd2d0b5996.58759741;;;flattened vs proposal 1;3-5 years;Intermediate;Python;;82;Number;"""error""";;;"y => add(10, y);";;variant 5;;;variant 2;;;;Rarely;;;;I like the status quo better;;;;;;;;;;;;;Line 7;ferment() returns a promise object which uses .then() to call two different callbacks depending on the result of the promise;413;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;ferment() requires two parameters but only jar is used, I'm not sure how to fix this with the proposed convention;123;484;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar (_))     |> (_ => add(""spicy past"", _))     |> (_ => ferment(_, 2)     |> await     |> (_ => _.takeOne());";a bowl of jogurt with berries;identifiers;;"I had to read the previous line when I encountered a "" _ "" to make sure I knew what it was referencing";;;;;;;;;;;;;Other - Write In (Required);I like the explicitness of the status quo, but prefer typing |> over typing const every line;It took some getting used to, but by the end of the survey it felt natural.;
3032;Jun 18, 2019 10:37:27 am;Jun 18, 2019 11:16:43 am;Complete;;;English;;1560879447_5d0921572ddb61.34167515;;;flattened vs both;5-10 years;Advanced;TypeScript;;95;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;variant 3;;variant 1;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);200;;;;;;;;;;;;;Line 5;|> new Jar(#);1059;;;;;;;;;;Line 5;|> (_ => new Jar(_));74;;;;;;;;;;;;;;;;;;262;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> stir   |> #.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;"I have slight issues with writing ""|"" since it requires using shift key, but I still like it.";"Initially I've preferred first proposal with conjunction with partial application proposal, but I have to admit that syntax sugar like ""#.method()"" and ""await #"" is pretty awesome."
3038;Jun 18, 2019 2:10:53 pm;Jun 18, 2019 2:30:39 pm;Complete;;;English;https://hacks.mozilla.org/;1560892253_5d09535da4a909.89200485;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;173;;"""function""";;;"y => add(10, y);";;;variant 3;variant 1;;;;;Every now and then;;;;I like the status quo better;Line 12;;225;;;;;;;;;;;;;;;;;;;;;;Line 2;;45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103;/*!(Please... no. This syntax just doesn't make things easier to read compared to nested callbacks for me.)!*/;;;;;a bowl of jogurt with berries;Other - Write In (Required);Not enough braces/parens to lexically isolate separate sections.;/*!( This was actually more intuitive than the previous example of the pipeline operator to me. Maybe it's growing on me, but I still don't think I'd write code this way. It's too forward which is a bit backwards to my mind. )!*/;;;;;;;;;Other - Write In (Required);That's actually a harder choice in this case, but I just barely prefer the status quo.;No problems typing in the operator on my common QWERTY layout keyboard.;A semi-conscious hello from https://rvklein.me/
3040;Jun 19, 2019 4:13:23 am;Jun 19, 2019 5:25:13 am;Complete;;;English;https://qsurvey.mozilla.com/;1560942803_5d0a18d33222b1.54194894;;;nested vs proposal 1;5-10 years;Advanced;Other - Write In (Required);PHP;283;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;variant 3;;;;;Rarely;;;;I like the proposal better;;;;;;;Line 3;new Jar(;70;;;;;;;Line 3;"pound(cutCabbage);";87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> ($ => new Jar($));77;;;;301;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> ($ => new Jar($))   |> ($ => add(""spicy paste"", $))   |> stir   |> ($ => ferment($, 2))   |> await   |> ($ => $.takeOne())";a bowl of jogurt with berries;too many if statements;;Figuring out what the result of each condition is as I had to look at the definitions in lines 1 to 6 (moving the eyes away from the code section) and then finding the conditional part that I was just examining for values.;;;;;;;;;;;;;The proposal;;Easy enough when the keyboard layout does not require awkward key combinations to get the | and > characters. Although I can imagine that using a single character multiple times is easier to type than different characters.;
3044;Jun 19, 2019 10:22:36 am;Jun 19, 2019 12:42:58 pm;Complete;;;English;;1560964956_5d0a6f5c9cef80.61508012;;;flattened vs proposal 2;more than 10 years;Expert;TypeScript;;130;3;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;variant 4;;variant 3;;;;Often;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";109;;;;;;;;;;Line 8;|> ferment(#, 14);82;;;;;;;;;;;;;;;;;;;;;;;;;;;260;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;"seems odd.  I would think ""->"" would be a better choice than ""|>"".  ""->"" looks like an arrow, which indicates something moving in a direction.  Whereas ""|>"" seems like it means ""or greater than"" (i.e. ""x = x || x > y"")";
3046;Jun 19, 2019 12:41:12 pm;Jun 19, 2019 1:29:55 pm;Complete;;;English;;1560973272_5d0a8fd83386c9.05621226;;;flattened vs both;more than 10 years;Intermediate;Ruby;;88;3;"""function""";;"add.call(null, 10);";;;variant 5;variant 4;;variant 1;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;Replace saltCabbageJar with saltyCabbageJar;110;;;;;;;;;;;;;;;;Line 8;Replace ferment with ferment(#, 14);178;;;;;;;;;;;;;;;;;;;;;;;;Line 7;Replace ferment with (_ => ferment(_, 14));60;175;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> await # |> ferment(#, 2)";;;;;;;;;;;;;;;Pipeline with #;;;;Feels awkward to type at first, but its less typing than the status quo and it's more readable;
3047;Jun 19, 2019 6:30:45 pm;Jun 19, 2019 6:44:30 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1560994245_5d0ae1c556b598.25446563;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;96;"""number""";"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";;variant 4;variant 1;;;;;Rarely;;;;I like the proposal better;Line 10;, 14;89;;;;;;;;;;;;;;;;;;;;;;;;;Line 8;(#, 14);66;;;;;;;;;;;;;;;;;;;;;;;;;;;173;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;This is doing way too much in one statement, and would be a pain to debug. The logical flow is not semantic at all. This should be separated into many different helper functions that have actual meaning, like `jogurtIsReady()` and `prepareJogurtBowl`.;;;;;;;;;The proposal;;fine;"I'm not 100% sold on ""#"" as the character to use, but overall this seems pretty great. Lots of potential for abuse, but that's not really in the scope of this proposal (and keeps with JS's freedom to shoot yourself in the foot)"
3051;Jun 20, 2019 1:40:58 am;Jun 20, 2019 2:06:39 am;Complete;;;English;;1561020058_5d0b469a643d98.45357443;;;nested vs proposal 1;3-5 years;Advanced;JavaScript;;129;3;"""function""";;;"y => add(10, y);";;variant 5;;variant 3;;;;;Rarely;;;;I like the proposal better;;;;;;;Line 3;add ( to line end;165;;;;;;;Line 3;add ( to after =;60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 1;i dont no;243;116;i dont know;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;;;;;The proposal;;left shift key hold to  |>;it's nice idea !
3055;Jun 20, 2019 10:43:10 am;Jun 20, 2019 11:16:27 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561052590_5d0bc5ae297d36.37648105;;;flattened vs proposal 2;more than 10 years;Advanced;JavaScript;;138;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;;variant 1;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;Line 6;Spelling the variable name correctly;145;;;;;;;;;;;;;;;;;;;Line 7;Adding '#' as the first argument of 'salt';145;;;;;;;;;;;;;;;;;;;;;;;;188;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;Combination of nested pipelines and using character '#' as a reference makes hard to trace. The type of '#' changes on each line, and lacks the semantic of a proper variable name;;;;;;;;;The Status quo;;I have a spanish keyboard and found it rather incomfortable to type, though i find the symbols fitting for their purpose;I find the use of variable placeholders (the '#') rather confusing, as it lacks the semantic of a properly named variable. I think the |> operator is most useful when pipelining single argument functions, which don't need the '#'.
3056;Jun 20, 2019 11:05:12 am;Jun 20, 2019 11:16:22 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1561053912_5d0bcad8823986.36091540;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;123;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;;variant 1;;;;Often;;;;I like the status quo better;;;;;;;;;;Line 6;const sauerkrautJar = await ferment(saltyCabbageJar, 14);89;;;;;;;;;;;;;;;;;;;;;25;;;;;;;;;;;;;;;;;;;;;;;;198;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #;   |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;;;;;;;;;;Other - Write In (Required);The proposal but with currying;It was ok;
3058;Jun 20, 2019 12:38:05 pm;Jun 20, 2019 12:57:06 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561059485_5d0be09d06f513.88381817;;;flattened vs proposal 2;more than 10 years;Expert;JavaScript;;71;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;;variant 3;;;;Often;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;"insert an opening parenthesis between ""pound"" and ""cut"" in ""poundcut""";81;;;;Line 5;remove the semicolon;34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;191;"const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> await ferment(#, 2)   |> #.takeOne();";;;;;a bowl of jogurt with berries;too many if statements;;"The slowest part was ""bookmarking"" my place in the conditionals while I checked the value of the flags at the top.  Long conditionals like line 8 are especially bad for this.  Ternaries which span multiple lines are dicey at best, but nesting them as well is always a no-go.  Tellingly, I don't think the pipe operator adds to the clarity of the code (though I don't know that it detracts from it, either).";;;;;;;;;The Status quo;;"Like holding Shift while typing ""\."".  :trollface:  It doesn't feel unnatural or out-of-place.";"I think the takeaway for me is that, while the pipe operator may very well have a place in ES, using it with functions/operations which require the use of a placeholder prevents it from improving readability.  Further, there's no way to ""branch"" off from an intermediate value, meaning that one may have to fall back to the status quo later, increasing cognitive load if the need arises later in the development cycle."
3070;Jun 21, 2019 4:39:47 pm;Jun 21, 2019 5:17:13 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561160387_5d0d6ac3263071.33414166;;;flattened vs both;more than 10 years;Advanced;Other - Write In (Required);PHP;211;number;"""function""";;;"y => add(10, y);";;variant 2;variant 4;;variant 1;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;"correct the variablename passed to ferment (saltyCabbageJar with a ""y"")";166;;;;;;;;;;;;;;;;Line 8;change line 8 to: |> ferment(#, 14);145;;;;;;;Line 6;remove the semi-colon at the end of line 6;73;;;;;;;;;;;;;;;;;;323;"const kimchiJar = ""cabbage""  |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;Granted, I have to lift my right hand (my pinky fingers aren't very dexterous) but I could get used to it.;"I do prefer chaining code over having a slew of temporary variables (and employ this technique often in my JS code) -- provided the code maintains readability.  I definitely think the pipe operator with the special symbol (#) reads better than the first proposal. My only concern at the moment is this will become immensely popular and that the community will have to deal with excessive use of the pipeline operator by less advanced developers and in some cases it may be more difficult to debug than the ""classic"" code.  Not that that should stand in the way of progress :)"
3073;Jun 22, 2019 5:57:05 am;Jun 22, 2019 6:18:35 am;Complete;;;English;https://newsblur.com/folder/everything;1561208225_5d0e25a1166516.45802586;;;nested vs proposal 2;5-10 years;Intermediate;Java;;71;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 3;variant 3;;;;;Every now and then;;;;I like the proposal better;;;;;;;Line 3;add '(' after 'Jar';90;;;;;;;;;;;;;;;;Line 5;add '(#)' after 'new Jar';57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;166;"const kimchiJar = ""cabbage""  |> wash  |> cut  |> salt  |> new Jar(#)  |> add(""spicy paste"", #)  |> stir  |> ferment(#, 2)  |> await #  |> #.takeOne()";;;;;a bowl of jogurt with berries;nested pipelines;;it wasn't clear from the previous samples that one can put arbitrary expression as parts of the pipeline, so I was a bit surprised by this example's usage of 'await function_call(#)' and huge ternary operator block. I spent a lot of time on the wine part of the ternary, because it looks like it would throw (anonymous function called without arguments, but it has destructuring in its parameters). Nested pipeline operators were a bit puzzling at first, but then just 'clicked'.;;;;;;;;;The proposal;;Unusual. I tend to put the angle bracket '>' first and then remember about the pipe '|', and both require Shift to be pressed, so not the most convenient combination, but I could live with it.;
3076;Jun 22, 2019 12:41:02 pm;Jun 22, 2019 12:49:34 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561232462_5d0e844e138f04.85454526;;;flattened vs proposal 2;3-5 years;Expert;TypeScript;;77;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 5;;variant 1;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;Line 6;change to saltyCabbageJar;44;;;;;;;;;;;;;;;;;;;Line 7;change to salt;66;;;;;;;;;;;;;;;;;;;;;;;;110;"""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicyPaste', #)   |> stir   |> ferment   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;The proposal;;Fine;
3078;Jun 22, 2019 9:35:20 pm;Jun 22, 2019 10:04:10 pm;Complete;;;English;https://qsurvey.mozilla.com/;1561264520_5d0f01885bc8f8.64802719;;;nested vs both;0-2 years;Advanced;JavaScript;;181;"""number""";"""function""";;;"y => add(10, y);";;variant 2;variant 5;variant 1;;;;;Every now and then;;;I like the pipeline with the # better;;Line 10;), 14;227;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;salt;154;;;;Line 5;|> (_ => new Jar(_));252;;;;;;;;;;;;;;;;;;400;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await;  const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;| is actually pretty far to reach for my pinky as a key while holding shift but I don't have any better ideas. It's also a shame for an operator to have to be 2 key presses.;Reading what functions return into others in a sequence instead of inside is nice.
3081;Jun 23, 2019 8:19:11 am;Jun 23, 2019 8:50:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561303151_5d0f986f27d335.36284683;;;nested vs proposal 1;0-2 years;Intermediate;TypeScript;;191;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;;variant 1;;;;;Rarely;;;;I like the proposal better;Line 11;Add an argument for numdays to ferment call;164;;;;;;;;;;;;;Line 3;Add an opening paren to the pound call;87;;;;;;;;;;;;;;;;;;;Line 9;move text on line 9 to follow the await;167;;;;;;;;;;;;;;;;;;643;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_,2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;inconsistent style;;The return statement in the else if branch threw me off. I had to step back and retrace the code to try to figure out what should happen.;;;;;;;;;;;;;The proposal;;It was easy enough;I like the vertical alignment of the operator. I think it is easier to read than nested calls because each line has its purpose and they are easier to read through.
3082;Jun 23, 2019 1:34:41 pm;Jun 23, 2019 1:36:09 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561322081_5d0fe2615b0936.24038228;;;nested vs both;more than 10 years;Expert;JavaScript;;4;;;;;;;variant 2;variant 3;variant 1;;;;;;;;;;;;13;;;;;;;;;;;;;;;;;;;;;;;;5;;;;;;;;;;;;3;;;;;;;;;;;;;;;;;;3;;;;;;;;;;;;;;;;;;;;;
3089;Jun 24, 2019 11:50:11 am;Jun 24, 2019 12:34:08 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561402211_5d111b6374e288.96822510;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;850;number;"""function""";;;"y => add(10, y);";;variant 5;;;variant 3;;;;Rarely;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;const crushedCabbage = pound(Cabbage);497;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 14));91;534;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))  const kimchi = kimchiJar.takeOne()";a bowl of jogurt with berries;inconsistent style;;the long if statement, the not so well formatting, variables in if which were not part of the api result;;;;;;;;;;;;;The proposal;;it was good.  really felt like I was typing the recipe for the variable  ;the extra parentheses were a bit annoying and doesn't look good. would be nice if they could become optional
3092;Jun 24, 2019 11:02:59 pm;Jun 25, 2019 9:44:28 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561442579_5d11b9132a0ab9.41273773;;;flattened vs both;0-2 years;Intermediate;JavaScript;;69;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 2;variant 3;;variant 1;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;;;;Line 6;rename saltCabbageJar  by saltyCabbageJar;191;;;;;;;;;;;;;Line 5;new Jar(#);34;;;;;;;;;;;;81;;;;;;;;;;;;;;;;;;37725;"const kimchiJar = ""cabbage""  |> wash  |> cut(#)  |> salt(#)  |> new Jar(#)  |> add(""spicy paste"", # )  |> stir(#)  |> ferment(#)  |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;not intuitive  especially on a french keyboard for the | character but it's the same as [ { so i think i could get used to it;
3093;Jun 25, 2019 1:37:16 am;Jun 25, 2019 1:51:22 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561451836_5d11dd3c9ade76.38440351;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;74;Number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;;variant 4;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 7;await sauerkrautJar;227;;;;;;;;;;;;;Line 8;|> ferment(#,14);65;;;;;;;;;;;;;;;;;;;;;;;;;;;129;"const kimchiJar = ""cabbage""     |> wash     |> cut     |> salt     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir     |> ferment(#, 2)     |> await #";;;;;a bowl of jogurt with berries;too many if statements;;#.jogur && #.jogurt.ready  and nested ? :;;;;;;;;;The proposal;;ok;await # is consistent but looks odd instead of just await
3099;Jun 25, 2019 9:54:14 am;Jun 25, 2019 10:18:32 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561481654_5d1251b6473592.08293054;;;nested vs proposal 2;3-5 years;Advanced;JavaScript;;140;"""number""";"""function""";;;"y => add(10, y);";;;variant 4;variant 2;;;;;Rarely;;;;I like the proposal better;;;;Line 1;Add the 'await' instruction just before the call to the ferment() function;119;;;;;;;;;;;;;;;;;;;;;;Line 8;By calling ferment(#, 14) instead of just 'ferment';65;;;;;;;;;;;;;;;;;;;;;;;;;;;242;const kimchiJar = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne();;;;;a bowl of jogurt with berries;nested pipelines;;"I started to read the 'const result' statement, had to go back and forth with the first declared const because forgot to read these lines first (!), tried to understand the condition first, then reread the ternary operator to understand the output. Didn't find it really complicated to read, the conditions are pretty straightforward and the indentation seemed clear to me. The only ""problem"" was that fillBowl() (and fillGlass()) are not implemented here so I wondered a second where they came from...";;;;;;;;;The proposal;;I use a french keyboard so these characters were not really intuitive to type but I still very much liked the proposed feature.;
3101;Jun 25, 2019 1:17:55 pm;Jun 25, 2019 1:30:06 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561493875_5d1281735037c8.74548640;;;nested vs both;more than 10 years;Expert;TypeScript;;79;number;"""function""";"add.bind(null, 10);";;;;variant 3;variant 5;variant 3;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;Line 3;add (;58;;;;;;;;;;;;;;;;;;;;;;Line 7;salt(#);112;;;;;;;;;;;Line 5;;;;;remove curly braces;43;;;;;;;187;"const kimchi = ""cabbage"" |> wash |> cat |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;it's a little bit annoying, but i will probably create a shortcut/snippet for it.. so it is ok;This is one of the proposals I really wait for, though I'm not nesting lots of functions today, as I am usually keeping partial results in variables (for readability), this helps in reducing the noise, use less characters while keeping the code readable. 
3106;Jun 26, 2019 9:39:23 am;Jun 26, 2019 9:49:24 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561567163_5d139fbb3fe983.26311282;;;flattened vs both;3-5 years;Advanced;TypeScript;;64;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;variant 3;;variant 3;;;;Rarely;;;I like the streamlined pipeline proposal better;;;;;;;;;;;;;;;;;Line 3;"add ""("" after pound and before cutCabbage";36;;;;;;;Line 5;"Add ""(#)"" after ""Jar""";34;;;;;;;;;;;;;;;;;;;;;;;;Line 5;Change the code after the |> to an anonymous function, (_ => new Jar(_));32;;;;88;"const kimchi = ""cabbage""     |> wash     |> cut     |> salt     |> (_ => new Jar(_))     |> (_ => add(""spicy paste"", _))     |> stir     |> ferment     |> await     |> (_ => _.takeOne());";;;;;;;;;;;;;;;Pipeline;;;;Easy;"I'm pretty torn on the #. I would probably be happy with it if it were some other character or token. (Scala's _ comes to mind, as does the ""it"" of Kotlin, I think? Clojure might do something like this with %? But obviously JavaScript has a lot of compatibility constraints. I would probably use # happily if it were formalized.)"
3107;Jun 26, 2019 8:43:19 pm;Jun 26, 2019 8:54:22 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561606999_5d143b577cb473.55722121;;;flattened vs proposal 1;5-10 years;Advanced;Java;;65;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 4;;;variant 3;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;pound(cutCabbage);43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> Jar;40;;;;171;"""cabbage"" |> wash |> cut |> salt |> Jar |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;inconsistent style;;misspelling yogurt, and weird top-down left-right formatting;;;;;;;;;;;;;Other - Write In (Required);the proposal with _ being special like in scala;annoying, would prefer something that didn't require me to hold shift;
3110;Jun 27, 2019 4:17:46 am;Jun 27, 2019 4:51:46 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561634265_5d14a5d9da97d6.89176248;;;nested vs proposal 1;5-10 years;Advanced;TypeScript;;150;"""number""";"""function""";;"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";variant 3;;variant 1;;;;;Rarely;;;;I like the status quo better;Line 10;), 14;191;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";95;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;add return statment or use lambda expression;273;;;;;;;277;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne())";a bowl of jogurt with berries;density of operators;;inconsistent styles make reading hard also. Line 13, the lack of factorization takes some time to recognize that the conditions are mostly identical.;;;;;;;;;;;;;Other - Write In (Required);Neither;Pretty ok.;I had some difficulty I recognize the bug related to arrow function statements vs arrow function expressions.
3111;Jun 27, 2019 10:47:23 am;Jun 27, 2019 11:09:53 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561657643_5d15012b5057d4.06062213;;;flattened vs proposal 2;3-5 years;Advanced;JavaScript;;51;number;"""function""";;;"y => add(10, y);";;;variant 2;;variant 3;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;Add a `(` between `pound` and `cut` in `poundcutCabbage`;91;;;;Line 5;Remove the extra semicolon;40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;166;"const kimichi =     wash(""cabbage"")     |> cut(#)     |> salt(#)     |> new Jar(#)     |> add(""spicy paste"", #)     |> stir(#)     |> ferment(#)     |> await #     |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;The density of operators and the implicit `#` being used to the point I had to deconstruct it mentally to analyze it almost algorithmically.;;;;;;;;;Other - Write In (Required);Status quo, but without the explicit `#`;Not a major issue.;"A middle ground of neutral would've been nice on the first question of ""proposal vs status quo""."
3113;Jun 27, 2019 11:48:47 am;Jun 27, 2019 12:13:37 pm;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1561661326_5d150f8eca0f87.83634638;;;flattened vs proposal 1;more than 10 years;Expert;TypeScript;;169;number;"""function""";;;"y => add(10, y);";;variant 4;;;variant 2;;;;Rarely;;;;I like the proposal better;;;;;;;;;;;;;Line 6;"const sauerkrautJar = await ferment(saltyCabbageJar, 14);";122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (cabbage => new Jar(cabbage));140;;;;292;"""cabbage"" |> wash |> cut |> salt |> (() => add(""spicy paste"")) |> (cabbage => new Jar(cabbage)) |> stir |> ferment |> await";a bowl of jogurt with berries;Other - Write In (Required);too many ifs, needing to look up to the top mid-paragraph, too much logic;i reasoned my way through line by line. when i read the if statements, i had to look to back and forth a lot. Unless i am mistaken, the function returns a promise of bowl of jogurt and berries, not the bowl of jogurt and berries itself;;;;;;;;;;;;;The proposal;;worth it;i really like the idea of this selectors proposal in combination with this feature: https://esdiscuss.org/topic/proposal-selector-select-expression
3114;Jun 27, 2019 2:17:02 pm;Jun 27, 2019 2:28:42 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561670222_5d15324e682397.90703999;;;flattened vs proposal 2;more than 10 years;Expert;TypeScript;;118;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;;variant 2;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;add a ( before cut;97;;;;Line 5;"remove ;";66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;46;;;;;;a bowl of jogurt with berries;density of operators;;;;;;;;;;;;;;
3115;Jun 28, 2019 4:31:38 am;Jun 28, 2019 5:07:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561721498_5d15fa9aca5342.47839953;;;flattened vs proposal 1;5-10 years;Intermediate;JavaScript;;134;3;"""function""";;;"y => add(10, y);";;variant 2;;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 6;"add ""await"" because ferment return a promise";202;;;;;;;;;;;;;;;;;;;;;;Line 8;remove await;126;;;;;;;;;;;;;;;;;;587;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> ( _ => new Jar(_))   |> ( _ => add(""spicy paste"",_))   |> stir   |> ( _ => ferment(_,2))   |> await   |> (_ => takeOne (_));";a bowl of jogurt with berries;too many if statements;;Process : - Memorizing the state (const) and response of the fetch, - Parsing the logic, pausing on the If/else if/else statement to know that condition apply with the current state and response  On the all calculating the boolean logic of the if statements takes the longest.;;;;;;;;;;;;;The proposal;;Typing : akward and need a pause on a Azerty keyboard. ;"Even if the typing will be a bit slow, the design of this operator is really meaningful.  The logic of ""what this piece of code do""  is simpler to understand because it's more process oriented : each action/step is in a natural order. "
3121;Jun 30, 2019 6:55:03 am;Jun 30, 2019 7:11:14 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561902902_5d18bf36d20423.58861656;;;nested vs both;more than 10 years;;JavaScript;;134;Number;"""function""";"add.bind(null, 10);";;;;variant 4;variant 3;variant 2;;;;;Rarely;;;I like the pipeline with the # better;;;;;Line 1;I don't see the bug.;484;;;;;;;;;;;;;;;;;;;Line 5;change the line to new Jar(#);61;;;;;;;;;;;;;;;;;;;;;;;;Line 5;change the line to (_ => new Jar(_));37;;;;165;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment   |> await   |> #.takeOne() ";;;;;;;;;;;;;;;Pipeline with #;;;;;
3122;Jun 30, 2019 9:53:30 am;Jun 30, 2019 10:23:41 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561913609_5d18e909da6a98.24392298;;;nested vs both;0-2 years;Advanced;JavaScript;;174;number;"""function""";;"add.call(null, 10);";"y => add(10, y);";;variant 5;variant 5;variant 3;;;;;Often;;;I like the pipeline with the # better;;;;;;;;Line 9;new Jar(;153;;;;;;;;;;;;;;;;;;;;;;Line 8;salt(#);407;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 14));83;459;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(x)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #";;;;;;;;;;;;;;;Pipeline with #;;;;Definitely annoying, but I could create a text replace snippet or something similar, so not that big of deal. ;SHIP THAT ASAP please :-D
3123;Jun 30, 2019 2:18:06 pm;Jun 30, 2019 3:03:42 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561929486_5d19270ebec573.18826703;;;nested vs proposal 1;more than 10 years;Expert;C++;;81;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 3;;variant 1;;;;;Rarely;;;;I like the status quo better;Line 10;"Add "", 14"" to it.";116;;;;;;;;;;;;;Line 3;Insert '(' after 'pound';102;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;Remove arrow-function-body braces;120;;;;;;;1426;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await   |> (_ => _.takeOne());";a bowl of jogurt with berries;identifiers;;Using _ repeatedly as an identifier name makes it very hard to remember what _ is at any particular point.  (I find this is a serious problem with reading hyper-pipelined code.  If everything just takes one argument consistently it's not bad, but once you have to start defining mini-functions to add in extra arguments -- with parenthesization rearing its necessary ugly head presumably for syntax reasons -- remembering what's what, and where partial pipeline results go -- is much harder than reading and passing around named variables explicitly.);;;;;;;;;;;;;Other - Write In (Required);Separate named variables for all the intermediate steps, then composite together the named variables in separate statements;It's somewhat awkward taking the weakest fingers on one hand (on QWERTY, not sure how things fare on other layouts).  It's not terrible, tho.  The readability particularly for manually curried functions is much more of a concern for me than typability.;
3124;Jun 30, 2019 4:01:42 pm;Jun 30, 2019 4:26:09 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1561935701_5d193f55e1d618.44755289;;;flattened vs both;more than 10 years;Expert;TypeScript;;72;"""number""";"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 3;variant 3;;variant 3;;;;Often;;;I like the pipeline with the # better;;;;;;;;;;;;;;;;;Line 3;"add `(` between `pound` and `cutCabbage);`";77;;;;;;;Line 5;use `new Jar(#)`, since `new Jar` is an expression (evaluated before the pipeline tries to apply the result);212;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;remove curly braces from arrow function bodies (as is, they return 'undefined');84;;;;;;;166;const kimchi = 'cabbage'   |> wash   |> cut   |> salt   |> new Jar(#)   |> add('spicy paste', #)   |> stir   |> ferment(#, 2)   |> await   |> #.takeOne();;;;;;;;;;;;;;;Pipeline with #;;;;Slightly awkward, but only compared to typing other JavaScript on a QWERTY (US) keyboard;"It's worth improving application + partial application, but before permanently spending the pipeline syntax we should consider an actual iterable pipeline (possibly with PowerShell-style ""from pipeline"" argument bindings)"
3128;Jul 1, 2019 5:39:11 pm;Jul 1, 2019 6:07:17 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562027951_5d1aa7af1d7312.26624195;;;nested vs proposal 1;more than 10 years;Advanced;JavaScript;;138;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";variant 3;;variant 2;;;;;Often;;;;I like the proposal better;;;;Line 1;"const sauerkrautJar = await ferment(...);";310;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";63;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;Remove curly braces;135;;;;;;;175;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await; // I almost put await on line one const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;density of operators;;Line 13 is especially hard to follow. I don't know at first that it's a fairly simple predicate, and so I prepare for a long string of operators, before discovering the redundancy.  The inline pipe operators took a second to get used to.;;;;;;;;;;;;;Other - Write In (Required);The pipeline proposal works best in situations with very few arrow functions.;Not an issue.;"""|>"" doesn't look like an operator the way that ""++"", ""&="" and "">="" do, but when used vertically the operators are pretty nice."
3129;Jul 1, 2019 9:06:08 pm;Jul 2, 2019 7:11:18 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562040368_5d1ad83093ffa7.96509839;;;nested vs proposal 1;5-10 years;Intermediate;JavaScript;;209;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";;"add.apply(null, [10]);";variant 3;;variant 2;;;;;Rarely;;;;I like the proposal better;;;;Line 1;should return an Observable instead;2990;;;;;;;;;;Line 3;pound(cutCabbage);73911;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;;;;(_ => new Jar(_));275;;;;;;;402;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> await |> (_ => _.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);identifiers, too many if else blocks, longer conditions;Lines 1 thru 10 were clear, the if else conditions caused slow down because  1. they are not pure (accessing values other than json response) 2. too many if else conditions 3. pipe in return statement 4. identifier (jogurt instead of bowl in line 14) 5. un necessary else in line 16.;;;;;;;;;;;;;The proposal;;It was reading the code from inside out of the status quo.  Feels much easier as we can know what goes in where and when.;
3131;Jul 2, 2019 4:07:10 am;Jul 2, 2019 4:18:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562065630_5d1b3adebb4702.55185141;;;flattened vs proposal 2;5-10 years;Advanced;TypeScript;;69;"""number""";"""object""";;;;"add.apply(null, [10]);";;variant 5;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"""pound"" requires a ( after it";56;;;;;;;;;;;;;Line 7;salt(#);44;;;;;;;;;;;;;;;;;;;;;;;;166;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> await ferment(#, 2)  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;inconsistent style;;top down, followed the logic and only looked at the branches which should happen. the introduction of `isBreakfast` meant I had to look elsewhere to see the current value of that variable. ;;;;;;;;;The proposal;;no problem, they're both characters I have to use often anyway. ;I'm excited for this proposal to be widely available. 
3134;Jul 2, 2019 6:33:04 pm;Jul 2, 2019 7:02:01 pm;Complete;;;English;https://qsurvey.mozilla.com/s3/2019-TC39-Feature-Experiment;1562117584_5d1c05d0b72456.89048316;;;nested vs proposal 2;0-2 years;Beginner;JavaScript;;450;number;"""function""";;;"y => add(10, y);";;;variant 5;variant 3;;;;;Every now and then;;;;I like the proposal better;;;;;;;Line 3;Adding an opening parenthesis;145;;;;;;;;;;;;;;;;;;;;;;Line 7;Adding the missing #;97;;;;;;;;;;;;;;;;;;;;;;;;294;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add (""spicy paste"", #) |> stir |> ferment (#, 2) |> await # |> #.takeOne()";;;;;null;nested pipelines;;;;;;;;;;;The proposal;;pretty cool, it feels more like a real step in a chain;
3138;Jul 3, 2019 6:06:29 am;Jul 3, 2019 6:14:04 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562159188_5d1ca854d07569.59168616;;;nested vs both;5-10 years;Advanced;Other - Write In (Required);rust;117;3;"""error""";;;"y => add(10, y);";;variant 3;variant 2;variant 2;;;;;Every now and then;;;I like the pipeline with the # better;;;;;Line 3;jAR(;139;;;;;;;;;;;;;;;;;;25;;;;;;;;;;;;;;;;;;;;Line 5;;;;;;19;;;;;;;9;;;;;;;;;;;;;;;;Other - Write In (Required);like in rust;;;bad;
3146;Jul 5, 2019 6:16:32 am;Jul 5, 2019 6:29:01 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562332592_5d1f4db0000ee0.54480484;;;nested vs both;0-2 years;Intermediate;Python;;104;number;"""function""";"add.bind(null, 10);";"add.call(null, 10);";"y => add(10, y);";"add.apply(null, [10]);";variant 3;variant 3;variant 3;;;;;Every now and then;;;I like the pipeline with the # better;;;;;;;;Line 3;Add a parens after Jar;102;;;;;;;;;;;;;;;;Line 5;;63;;;;;;;;;;;;;;;;;;;;;;;62;;;;;;;158;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await |> #.takeOne()";;;;;;;;;;;;;;;Pipeline with #;;;;Typing was not ergonomic: requires a large right hand movement of around four cm. Reaching the pipe character requires an upward stretch, and the right angle bracket is another stretch down.;Proposal looks good, but is incredibly hard to type.
3148;Jul 5, 2019 11:37:34 pm;Jul 6, 2019 12:19:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562395054_5d2041aebf1b96.67364396;;;nested vs proposal 1;5-10 years;Expert;JavaScript;;215;number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";;variant 5;;variant 1;;;;;Often;;;;I like the proposal better;Line 12;add `, 14)`;99;;;;;;;;;;;;;Line 3;pound(cutCabbage);47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 7;(_ => ferment(_, 14));53;264;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> (_ => new Jar(_))   |> (_ => add(""spicy paste"", _))   |> stir   |> (_ => ferment(_, 2))   |> await;  const kimchi = kimchiJar.takeOne();";a bowl of jogurt with berries;inconsistent style;;"Duplicated & lengthy boolean expression.   The inconsistent parameter naming: `|> ((jogurt) => add(""berries"", jogurt))";;;;;;;;;;;;;The proposal;;Fun, 9/10 would recommend.;Could parentheses around anon arrow functions be avoided?
3149;Jul 6, 2019 11:05:54 pm;Jul 6, 2019 11:28:03 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562479554_5d218bc2b2f897.73382291;;;flattened vs both;more than 10 years;Expert;JavaScript;;177;"""number""";"""function""";;;"y => add(10, y);";;variant 3;variant 2;;variant 3;;;;Rarely;;;I like the pipeline with the # better;;;;;;;;;;;;;;;;;Line 3;const crushedCabbage = pound(cutCabbage);215;;;;Line 5;|> new Jar(#);104;;;;;;;;;;;;;;;;;;;;Line 5;;Line 7;;Line 9;no { };70;;;;;;;405;"const kimchiJar = ""cabbage"" 	|> wash 	|> cut 	|> salt 	|> new Jar( # ) 	|> add( ""spicy paste"", # ) 	|> stir 	|> ferment( #, 2 ) 	|> await #;  	const kimchi = kimchiJar.takeOne();";;;;;;;;;;;;;;;Pipeline with #;;;;little dificult but no ploblem;
3151;Jul 7, 2019 10:36:51 am;Jul 7, 2019 10:57:41 am;Complete;;;English;https://github.com/tc39/proposal-pipeline-operator/issues/150;1562521011_5d222db3654f78.93621546;;;flattened vs proposal 1;more than 10 years;Advanced;TypeScript;;52;number;"""function""";;"add.call(null, 10);";;"add.apply(null, [10]);";variant 4;;;variant 3;;;;Every now and then;;;;I like the status quo better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";115;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;|> (_ => new Jar(_));75;;;;255;"const kimchi = ""cabbage""   |> wash   |> cut   |> salt   |> (cucumbers => new Jar(cucumbers))   |> (cucumberJar => add(""spicy paste"", cucumberJar))   |> stir   |> (cucumberJar => ferment(cucumberJar, 2))   |> await   |> (cucumberJar => cucumberJar.takeOne());";a bowl of jogurt with berries;Other - Write In (Required);the lambda|>await|>lambda|>await sequence, missing/misleading identifiers;;;;;;;;;;;;;;Other - Write In (Required);The proposal would be better, if not for all those lambdas with unnamed parameters.;No different than {}(), everything uses Shift down here.;
3154;Jul 7, 2019 2:00:59 pm;Jul 7, 2019 2:23:34 pm;Complete;;;English;;1562533258_5d225d8a8b6542.44919464;;;flattened vs proposal 1;5-10 years;Advanced;JavaScript;;13;"""number""";"""function""";;"add.call(null, 10);";;;variant 3;;;variant 2;;;;Often;;;;I like the proposal better;;;;;;;;;;;;;Line 6;await const sauerkrautJar = ferment(saltyCabbageJar, 14);236;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;;;;;return new Jar;266;;;;;;;256;I like the first proposal;a bowl of jogurt with berries;inconsistent style;;;;;;;16;;;;;;;;The proposal;;Fine.;Mixing it with anonymous functions seems like it would be hard to read. Other than that it seems really nice.
3158;Jul 8, 2019 8:22:32 am;Jul 8, 2019 9:03:25 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562599352_5d235fb878a325.41652853;;;nested vs proposal 1;more than 10 years;Advanced;TypeScript;;248;;"""function""";;"add.call(null, 10);";"y => add(10, y);";;variant 4;;variant 3;;;;;Every now and then;;;;I like the proposal better;;;;;;;Line 3;add (;125;;;;;;;Line 3;pound(cutCabbage);65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Line 5;(_ => new Jar(_));62;;;;276;"const kimchi = ""cabbage"" |> wash |> cut |> salt |> (_ => new Jar(_)) |> (_ => add(""spicy paste"", _)) |> stir |> (_ => ferment(_, 2)) |> (_ => _.takeOne());";null;density of operators;;read from top to bottom,   stopped reading when I got to the second await because I think that causes the if statements to be invalidated.;;;;;;;;;;;;;The proposal;;I don't like |>, it seems to be weird to type. Some other key placement might be nicer.  It also reads a little strange in ligatures, but perhaps I would get used to that with time.;It seems a lot like the threading macros in clojure (->> (-> etc.  I like it and it encourages a more functional style.
3159;Jul 8, 2019 1:49:35 pm;Jul 8, 2019 2:21:20 pm;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562618975_5d23ac5fa67930.96558492;;;flattened vs proposal 2;0-2 years;Intermediate;JavaScript;;127;"""number""";"""function""";;;"y => add(10, y);";;;variant 3;;variant 3;;;;Every now and then;;;;I like the proposal better;;;;;;;;;;;;;;;;Line 3;"const crushedCabbage = pound(cutCabbage);";197;;;;;;;Line 5;|> new Jar(#);77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;279;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #;  const kimchi = kimchiJar.takeOne();";;;;;a bowl of jogurt with berries;Other - Write In (Required);"Semantics: How are ""berries"" even able to be added to a bowl of { ready: true }. How do you even fill a bowl of { ready: true }... Seems like I misread this logic, but this just seems wrong to me.";9. ? #.jogurt // if ({ ready: true }) == true  since it's truthy, and not undefined or null... or at least I thought... the following semantics don't make sense afterward, which threw me off, which caused me to switch between lines 9, 10, and the comment on line 7.;;;;;;;;;The proposal;;"It's a bit annoying since I use my pinky finger and accidentally type ""\"" at first, but that's okay, since I just need to get my pinky stronger.";"It would be way nicer if JavaScript could infer where the # should go, even when parentheses are required, so that a programmer could type ""|> new Jar"" and it could assume that ""|> new Jar(#)"" is meant. It would also be a cool shortcut for the runtime to assume, by default, that # should be input as the last provided argument to the function, so in the above example, only ""|> ferment(#, 2)"" and ""|> #.takeOne()""  As a fix to this rule, I guess the helpful fix would be to use ""|> new Jar()"" if you explicitly want the JavaScript runtime to not pass in the previous argument, or ""|> new Jar(blah, #, whatever)"" if you want the JS runtime to not pass in the output of the last invocation as the last input to the current function."
3163;Jul 9, 2019 2:36:22 am;Jul 9, 2019 2:52:54 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562664982_5d24601678c6c1.70973241;;;flattened vs proposal 1;3-5 years;Intermediate;JavaScript;;215;number;"""function""";"add.bind(null, 10);";;;;variant 2;;;variant 2;;;;Rarely;;;;I like the status quo better;;;;;;;;;;;;;Line 6;;108;;;;;;;;;;;;;;;;;;;;;;Line 7;;53;;;;;;;;;;;;;;;;;;269;"const kimchiJar = ""cabbage"" |>wash |>cut |>salt |>(_ => new Jar(_)) |>(_ => add(""spicy paste"",_)) |>stir |>(_ => ferment(_,2))";a bowl of jogurt with berries;too many if statements;;The conditional comparisons ;;;;;;;;;;;;;The proposal;;Fine;Support the survey effort
3164;Jul 9, 2019 3:44:02 am;Jul 9, 2019 3:55:58 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562669042_5d246ff2456086.03964814;;;nested vs proposal 2;0-2 years;Intermediate;Java;;51;Number;"""function""";"add.bind(null, 10);";;"y => add(10, y);";"add.apply(null, [10]);";;variant 3;variant 2;;;;;Every now and then;;;;I like the proposal better;;;;Line 1;add await;148;;;;;;;;;;;;;;;;;;;Line 5;new Jar(#);42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;255;"const kimchiJat = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#, 2) |> await # |> #.takeOne()";;;;;a bowl of jogurt with berries;too many if statements;;long ternary operators ;;;;;;;;;The proposal;;a bit awkward on a turkish keyboard, can't it be a single character or alphabetic keyword?;
3166;Jul 9, 2019 7:41:39 am;Jul 9, 2019 7:59:50 am;Complete;;;English;https://hacks.mozilla.org/2019/05/javascript-and-evidence-based-language-design/;1562683299_5d24a7a36f8df3.79580140;;;flattened vs proposal 2;3-5 years;Advanced;Ruby;;90;Number;"""function""";;;"y => add(10, y);";;;variant 4;;variant 1;;;;Often;;;;I like the proposal better;;;;;;;;;;Line 6;change `saltCabbageJar` to `saltyCabbageJar`;136;;;;;;;;;;;;;;;;Line 8;`  |> ferment # 14`;62;;;;;;;;;;;;;;;;;;;;;;;;;;;270;"const kimchiJar = ""cabbage""   |> wash   |> cut   |> salt   |> new Jar(#)   |> add(""spicy paste"", #)   |> stir   |> ferment(#, 2)   |> await #   |> #.takeOne()";;;;;a bowl of jogurt with berries;density of operators;;I filled in the constants (and the information provided in the code comment about the json response) to eliminate branches of code which couldn't be active.  Then I followed the execution from there.  The ternaries and boolean operators for in-expression control flow made this especially nasty.;;;;;;;;;The proposal;;These are easy, familiar symbols that I already have touch-memory of.;I think JavaScript has more of a need to have things taken away than added at this moment.  Do not fear breaking compatibility if the alternative is preserving bad features.
3167;Jul 9, 2019 10:27:38 am;Jul 9, 2019 11:37:19 am;Complete;;;English;;1562693258_5d24ce8a55d015.12950988;;;nested vs proposal 2;more than 10 years;Advanced;JavaScript;;138;number;"""function""";;;"y => add(10, y);";;;variant 5;variant 3;;;;;Every now and then;;;;I like the proposal better;;;;;;;Line 3;add ( afrer new Jar;125;;;;;;;;;;;;;;;;;;;;;;Line 9;add braces around #;110;;;;;;;;;;;;;;;;;;;;;;;;1312;"const kimchiJar = ""cabbage"" |> wash |> cut |> salt |> new Jar(#) |> add(""spicy paste"", #) |> stir |> ferment(#,2) |> await";;;;;a bowl of jogurt with berries;density of operators;;the density of operators was the hardest to read IMO, but close second would be having the pipeline operators on the same line. Adding whitespace would really help in this example;;;;;;;;;The proposal;;I struggled a bit typing it out at first;Putting everything on a new line in the proposal example is what makes it easier to read. I would argue you could format the status quo example to read better than it currently does. The real benefit of the proposal IMO is reversing the order of functions so it reads from left to write, the way English speakers are used to reading. Would be curious to see how this proposal tests in countries that read from right to left.